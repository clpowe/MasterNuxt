{"version":3,"sources":["../../../../src/mss/MssFragmentInfoController.js"],"names":["MssFragmentInfoController","config","instance","logger","fragmentModel","started","type","loadFragmentTimeout","startTime","startFragmentTime","index","streamProcessor","baseURLController","debug","controllerType","setup","getLogger","initialize","getType","getFragmentModel","start","loadNextFragmentInfo","stop","clearTimeout","reset","representation","getCurrentRepresentation","manifest","adaptation","period","mpd","Period_asArray","AdaptationSet_asArray","segments","SegmentTemplate","SegmentTimeline","S_asArray","segment","length","request","getRequestForSegment","requestFragment","call","timescale","FragmentRequest","mediaType","HTTPRequest","MSS_FRAGMENT_INFO_SEGMENT_TYPE","t","duration","d","quality","mediaInfo","getMediaInfo","adaptationIndex","representationId","id","url","resolve","path","media","replace","bandwidth","tManifest","representationController","getRepresentationController","isFragmentLoadedOrPending","executeRequest","fragmentInfoLoaded","e","response","error","deltaFragmentTime","deltaTime","delay","Date","getTime","Math","max","setTimeout","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"mappings":"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","file":"MssFragmentInfoController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FragmentRequest from '../streaming/vo/FragmentRequest';\nimport {HTTPRequest} from '../streaming/vo/metrics/HTTPRequest';\n\nfunction MssFragmentInfoController(config) {\n\n    config = config || {};\n\n    let instance,\n        logger,\n        fragmentModel,\n        started,\n        type,\n        loadFragmentTimeout,\n        startTime,\n        startFragmentTime,\n        index;\n\n    const streamProcessor = config.streamProcessor;\n    const baseURLController = config.baseURLController;\n    const debug = config.debug;\n    const controllerType = 'MssFragmentInfoController';\n\n    function setup() {\n        logger = debug.getLogger(instance);\n    }\n\n    function initialize() {\n        type = streamProcessor.getType();\n        fragmentModel = streamProcessor.getFragmentModel();\n\n        started = false;\n        startTime = null;\n        startFragmentTime = null;\n    }\n\n    function start() {\n        if (started) return;\n\n        logger.debug('Start');\n\n        started = true;\n        index = 0;\n\n        loadNextFragmentInfo();\n    }\n\n    function stop() {\n        if (!started) return;\n\n        logger.debug('Stop');\n\n        clearTimeout(loadFragmentTimeout);\n        started = false;\n        startTime = null;\n        startFragmentTime = null;\n    }\n\n    function reset() {\n        stop();\n    }\n\n    function loadNextFragmentInfo() {\n        if (!started) return;\n\n        // Get last segment from SegmentTimeline\n        const representation = getCurrentRepresentation();\n        const manifest = representation.adaptation.period.mpd.manifest;\n        const adaptation = manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index];\n        const segments = adaptation.SegmentTemplate.SegmentTimeline.S_asArray;\n        const segment = segments[segments.length - 1];\n\n        // logger.debug('Last fragment time: ' + (segment.t / adaptation.SegmentTemplate.timescale));\n\n        // Generate segment request\n        const request = getRequestForSegment(adaptation, representation, segment);\n\n        // Send segment request\n        requestFragment.call(this, request);\n    }\n\n    function getRequestForSegment(adaptation, representation, segment) {\n        let timescale = adaptation.SegmentTemplate.timescale;\n        let request = new FragmentRequest();\n\n        request.mediaType = type;\n        request.type = HTTPRequest.MSS_FRAGMENT_INFO_SEGMENT_TYPE;\n        // request.range = segment.mediaRange;\n        request.startTime = segment.t / timescale;\n        request.duration = segment.d / timescale;\n        request.timescale = timescale;\n        // request.availabilityStartTime = segment.availabilityStartTime;\n        // request.availabilityEndTime = segment.availabilityEndTime;\n        // request.wallStartTime = segment.wallStartTime;\n        request.quality = representation.index;\n        request.index = index++;\n        request.mediaInfo = streamProcessor.getMediaInfo();\n        request.adaptationIndex = representation.adaptation.index;\n        request.representationId = representation.id;\n        request.url = baseURLController.resolve(representation.path).url + adaptation.SegmentTemplate.media;\n        request.url = request.url.replace('$Bandwidth$', representation.bandwidth);\n        request.url = request.url.replace('$Time$', segment.tManifest ? segment.tManifest : segment.t);\n        request.url = request.url.replace('/Fragments(', '/FragmentInfo(');\n\n        return request;\n    }\n\n    function getCurrentRepresentation() {\n        const representationController = streamProcessor.getRepresentationController();\n        const representation = representationController.getCurrentRepresentation();\n        return representation;\n    }\n\n    function requestFragment(request) {\n        // logger.debug('Load FragmentInfo for time: ' + request.startTime);\n        if (streamProcessor.getFragmentModel().isFragmentLoadedOrPending(request)) {\n            // We may have reached end of timeline in case of start-over streams\n            logger.debug('End of timeline');\n            stop();\n            return;\n        }\n\n        fragmentModel.executeRequest(request);\n    }\n\n    function fragmentInfoLoaded (e) {\n        if (!started) return;\n\n        const request = e.request;\n        if (!e.response) {\n            logger.error('Load error', request.url);\n            return;\n        }\n\n        let deltaFragmentTime,\n            deltaTime,\n            delay;\n\n        // logger.debug('FragmentInfo loaded: ', request.url);\n\n        if (startTime === null) {\n            startTime = new Date().getTime();\n        }\n\n        if (!startFragmentTime) {\n            startFragmentTime = request.startTime;\n        }\n\n        // Determine delay before requesting next FragmentInfo\n        deltaTime = (new Date().getTime() - startTime) / 1000;\n        deltaFragmentTime = (request.startTime + request.duration) - startFragmentTime;\n        delay = Math.max(0, (deltaFragmentTime - deltaTime));\n\n        // Set timeout for requesting next FragmentInfo\n        clearTimeout(loadFragmentTimeout);\n        loadFragmentTimeout = setTimeout(function () {\n            loadFragmentTimeout = null;\n            loadNextFragmentInfo();\n        }, delay * 1000);\n    }\n\n    function getType() {\n        return type;\n    }\n\n    instance = {\n        initialize: initialize,\n        controllerType: controllerType,\n        start: start,\n        fragmentInfoLoaded: fragmentInfoLoaded,\n        getType: getType,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nMssFragmentInfoController.__dashjs_factory_name = 'MssFragmentInfoController';\nexport default dashjs.FactoryMaker.getClassFactory(MssFragmentInfoController); /* jshint ignore:line */\n"]}