{"version":3,"sources":["../../../../../src/dash/models/PatchManifestModel.js"],"names":["PatchManifestModel","instance","logger","context","setup","getInstance","getLogger","getIsPatch","patch","hasOwnProperty","DashConstants","ORIGINAL_MPD_ID","getPublishTime","PUBLISH_TIME","Date","getOriginalPublishTime","ORIGINAL_PUBLISH_TIME","getMpdId","getPatchOperations","__children","map","nodeContainer","action","Object","keys","warn","node","selector","sel","type","startsWith","__text","xpath","SimpleXPath","isValid","value","findsAttribute","reduce","groups","child","key","push","operation","PatchOperation","position","pos","filter","__dashjs_factory_name","FactoryMaker","getSingletonFactory"],"mappings":"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","file":"PatchManifestModel.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport DashConstants from '../constants/DashConstants';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\nimport SimpleXPath from '../vo/SimpleXPath';\nimport PatchOperation from '../vo/PatchOperation';\n\nfunction PatchManifestModel() {\n    let instance,\n        logger;\n\n    const context = this.context;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n    }\n\n    function getIsPatch(patch) {\n        return patch && patch.hasOwnProperty(DashConstants.ORIGINAL_MPD_ID) || false;\n    }\n\n    function getPublishTime(patch) {\n        return patch && patch.hasOwnProperty(DashConstants.PUBLISH_TIME) ? new Date(patch[DashConstants.PUBLISH_TIME]) : null;\n    }\n\n    function getOriginalPublishTime(patch) {\n        return patch && patch.hasOwnProperty(DashConstants.ORIGINAL_PUBLISH_TIME) ? new Date(patch[DashConstants.ORIGINAL_PUBLISH_TIME]) : null;\n    }\n\n    function getMpdId(patch) {\n        return (patch && patch[DashConstants.ORIGINAL_MPD_ID]) || null;\n    }\n\n    function getPatchOperations(patch) {\n        if (!patch) {\n            return [];\n        }\n\n        // Go through the patch operations in order and parse their actions out for usage\n        return (patch.__children || []).map((nodeContainer) => {\n            let action = Object.keys(nodeContainer)[0];\n\n            // we only look add add/remove/replace actions\n            if (action !== 'add' && action !== 'remove' && action !== 'replace') {\n                logger.warn(`Ignoring node of invalid action: ${action}`);\n                return null;\n            }\n\n            let node = nodeContainer[action];\n            let selector = node.sel;\n\n            // add action can have special targeting via the 'type' attribute\n            if (action === 'add' && node.type) {\n                if (!node.type.startsWith('@')) {\n                    logger.warn(`Ignoring add action for prefixed namespace declaration: ${node.type}=${node.__text}`);\n                    return null;\n                }\n\n                // for our purposes adding/replacing attribute are equivalent and we can normalize\n                // our processing logic by appending the attribute to the selector path\n                selector = `${selector}/${node.type}`;\n            }\n\n            let xpath = new SimpleXPath(selector);\n            if (!xpath.isValid()) {\n                logger.warn(`Ignoring action with invalid selector: ${action} - ${selector}`);\n                return null;\n            }\n\n            let value = null;\n            if (xpath.findsAttribute()) {\n                value = node.__text || '';\n            } else if (action !== 'remove') {\n                value = node.__children.reduce((groups, child) => {\n                    // note that this is informed by xml2js parse structure for the __children array\n                    // which will be something like this for each child:\n                    // {\n                    //     \"<node-name>\": { <xml2js-node-object> }\n                    // }\n                    let key = Object.keys(child)[0];\n                    // we also ignore\n                    if (key !== '#text') {\n                        groups[key] = groups[key] || [];\n                        groups[key].push(child[key]);\n                    }\n                    return groups;\n                }, {});\n            }\n\n            let operation = new PatchOperation(action, xpath, value);\n\n            if (action === 'add') {\n                operation.position = node.pos;\n            }\n\n            return operation;\n        }).filter((operation) => !!operation);\n    }\n\n    instance = {\n        getIsPatch: getIsPatch,\n        getPublishTime: getPublishTime,\n        getOriginalPublishTime: getOriginalPublishTime,\n        getMpdId: getMpdId,\n        getPatchOperations: getPatchOperations\n    };\n\n    setup();\n\n    return instance;\n}\n\nPatchManifestModel.__dashjs_factory_name = 'PatchManifestModel';\nexport default FactoryMaker.getSingletonFactory(PatchManifestModel);\n"]}