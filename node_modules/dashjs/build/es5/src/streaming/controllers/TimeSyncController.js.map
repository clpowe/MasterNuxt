{"version":3,"sources":["../../../../../src/streaming/controllers/TimeSyncController.js"],"names":["HTTP_TIMEOUT_MS","DEFAULT_MAXIMUM_ALLOWED_DRIFT","DEFAULT_TIME_BETWEEN_SYNC_ATTEMPTS_ADJUSTMENT_FACTOR","DEFAULT_BACKGROUND_ATTEMPTS","DEFAULT_TIME_BETWEEN_SYNC_ATTEMPTS","DEFAULT_MINIMUM_TIME_BETWEEN_BACKGROUND_SYNC_ATTEMPTS","DEFAULT_MAXIMUM_TIME_BETWEEN_SYNC","DEFAULT_MINIMUM_TIME_BETWEEN_SYNC","TimeSyncController","context","eventBus","getInstance","urlUtils","instance","logger","isSynchronizing","isBackgroundSynchronizing","settings","handlers","dashMetrics","backgroundSyncTimeOffsets","timingSources","timeOfLastSync","timeOfLastBackgroundSync","lastOffset","lastTimingSource","internalTimeBetweenSyncAttempts","baseURLController","setup","getLogger","on","Events","ATTEMPT_BACKGROUND_SYNC","_onAttemptBackgroundSync","setConfig","config","_resetInitialSettings","NaN","get","streaming","utcSynchronization","timeBetweenSyncAttempts","initialize","_httpHeadHandler","_httpHandler","bind","_xsdatetimeDecoder","_iso8601Decoder","_directHandler","_notSupportedHandler","attemptSync","tSources","_shouldPerformSynchronization","trigger","TIME_SYNCHRONIZATION_COMPLETED","_attemptRecursiveSync","value","schemeIdUri","isNaN","backgroundAttempts","Date","now","_attemptBackgroundSync","attempts","_completeBackgroundTimeSyncSequence","deviceTimeBeforeSync","serverTime","deviceTimeAfterSync","offset","_calculateOffset","push","e","sourceIndex","index","length","_onComplete","source","hasOwnProperty","getTime","deviceReferenceTime","failed","useManifestDateHeaderTimeSource","_checkForDateHeader","_completeTimeSyncSequence","_alternateXsdatetimeDecoder","xsdatetimeStr","SECONDS_IN_MIN","MINUTES_IN_HOUR","MILLISECONDS_IN_SECONDS","datetimeRegex","utcDate","timezoneOffset","match","exec","UTC","parseInt","parseFloat","parsedDate","parse","isoStr","_rfc1123Decoder","dateStr","url","onSuccessCB","onFailureCB","time","decoder","isHeadRequest","oncomplete","onload","complete","req","XMLHttpRequest","verb","HTTPRequest","HEAD","GET","urls","shift","join","result","status","getResponseHeader","response","isRelative","baseUrl","resolve","open","timeout","onloadend","send","dateHeaderValue","getLatestMPDRequestHeaderValueByID","dateHeaderTime","Number","offsetToDeviceTimeMs","_adjustTimeBetweenSyncAttempts","shouldAttemptBackgroundSync","debug","UPDATE_TIME_SYNC_OFFSET","error","DashJSError","Errors","TIME_SYNC_FAILED_ERROR_CODE","TIME_SYNC_FAILED_ERROR_MESSAGE","isOffsetDriftWithinThreshold","_isOffsetDriftWithinThreshold","timeBetweenSyncAttemptsAdjustmentFactor","maximumTimeBetweenSyncAttempts","minimumTimeBetweenSyncAttempts","adjustedTimeBetweenSyncAttempts","Math","min","max","averageOffset","reduce","acc","curr","maxAllowedDrift","maximumAllowedDrift","lowerBound","upperBound","reset","off","__dashjs_factory_name","factory","FactoryMaker","getSingletonFactory","updateSingletonFactory"],"mappings":"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","file":"TimeSyncController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport DashJSError from './../vo/DashJSError';\nimport {HTTPRequest} from '../vo/metrics/HTTPRequest';\nimport EventBus from './../../core/EventBus';\nimport Events from './../../core/events/Events';\nimport Errors from './../../core/errors/Errors';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\nimport URLUtils from '../utils/URLUtils';\n\nconst HTTP_TIMEOUT_MS = 5000;\nconst DEFAULT_MAXIMUM_ALLOWED_DRIFT = 100;\nconst DEFAULT_TIME_BETWEEN_SYNC_ATTEMPTS_ADJUSTMENT_FACTOR = 2;\nconst DEFAULT_BACKGROUND_ATTEMPTS = 2;\nconst DEFAULT_TIME_BETWEEN_SYNC_ATTEMPTS = 30;\nconst DEFAULT_MINIMUM_TIME_BETWEEN_BACKGROUND_SYNC_ATTEMPTS = 30;\nconst DEFAULT_MAXIMUM_TIME_BETWEEN_SYNC = 600;\nconst DEFAULT_MINIMUM_TIME_BETWEEN_SYNC = 2;\n\nfunction TimeSyncController() {\n\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n    const urlUtils = URLUtils(context).getInstance();\n\n    let instance,\n        logger,\n        isSynchronizing,\n        isBackgroundSynchronizing,\n        settings,\n        handlers,\n        dashMetrics,\n        backgroundSyncTimeOffsets,\n        timingSources,\n        timeOfLastSync,\n        timeOfLastBackgroundSync,\n        lastOffset,\n        lastTimingSource,\n        internalTimeBetweenSyncAttempts,\n        baseURLController;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n\n        eventBus.on(Events.ATTEMPT_BACKGROUND_SYNC, _onAttemptBackgroundSync, instance);\n    }\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.dashMetrics) {\n            dashMetrics = config.dashMetrics;\n        }\n\n        if (config.baseURLController) {\n            baseURLController = config.baseURLController;\n        }\n\n        if (config.settings) {\n            settings = config.settings;\n        }\n    }\n\n    function _resetInitialSettings() {\n        backgroundSyncTimeOffsets = [];\n        timingSources = [];\n        timeOfLastSync = null;\n        timeOfLastBackgroundSync = null;\n        lastTimingSource = null;\n        lastOffset = NaN;\n        isSynchronizing = false;\n        isBackgroundSynchronizing = false;\n        internalTimeBetweenSyncAttempts = settings.get().streaming.utcSynchronization.timeBetweenSyncAttempts;\n    }\n\n    /**\n     * Register the timing handler depending on the schemeIdUris. This method is called once when the StreamController is initialized\n     */\n    function initialize() {\n        _resetInitialSettings();\n\n        // a list of known schemeIdUris and a method to call with @value\n        handlers = {\n            'urn:mpeg:dash:utc:http-head:2014': _httpHeadHandler,\n            'urn:mpeg:dash:utc:http-xsdate:2014': _httpHandler.bind(null, _xsdatetimeDecoder),\n            'urn:mpeg:dash:utc:http-iso:2014': _httpHandler.bind(null, _iso8601Decoder),\n            'urn:mpeg:dash:utc:direct:2014': _directHandler,\n\n            // some specs referencing early ISO23009-1 drafts incorrectly use\n            // 2012 in the URI, rather than 2014. support these for now.\n            'urn:mpeg:dash:utc:http-head:2012': _httpHeadHandler,\n            'urn:mpeg:dash:utc:http-xsdate:2012': _httpHandler.bind(null, _xsdatetimeDecoder),\n            'urn:mpeg:dash:utc:http-iso:2012': _httpHandler.bind(null, _iso8601Decoder),\n            'urn:mpeg:dash:utc:direct:2012': _directHandler,\n\n            // it isn't clear how the data returned would be formatted, and\n            // no public examples available so http-ntp not supported for now.\n            // presumably you would do an arraybuffer type xhr and decode the\n            // binary data returned but I would want to see a sample first.\n            'urn:mpeg:dash:utc:http-ntp:2014': _notSupportedHandler,\n\n            // not clear how this would be supported in javascript (in browser)\n            'urn:mpeg:dash:utc:ntp:2014': _notSupportedHandler,\n            'urn:mpeg:dash:utc:sntp:2014': _notSupportedHandler\n        };\n\n    }\n\n    /**\n     * Sync against a timing source. T\n     * @param {array} tSources\n     */\n    function attemptSync(tSources) {\n\n        timingSources = tSources;\n\n        // Stop if we are already synchronizing\n        if (isSynchronizing) {\n            return;\n        }\n\n        // No synchronization required we can signal the completion immediately\n        if (!_shouldPerformSynchronization()) {\n            eventBus.trigger(Events.TIME_SYNCHRONIZATION_COMPLETED);\n            return;\n        }\n\n        isSynchronizing = true;\n        _attemptRecursiveSync();\n    }\n\n    /**\n     * Does a synchronization in the background in case the last offset should be verified or a 404 occurs\n     */\n    function _onAttemptBackgroundSync() {\n        if (isSynchronizing || isBackgroundSynchronizing || !lastTimingSource || !lastTimingSource.value || !lastTimingSource.schemeIdUri || isNaN(lastOffset) || isNaN(settings.get().streaming.utcSynchronization.backgroundAttempts)) {\n            return;\n        }\n\n        if (timeOfLastBackgroundSync && ((Date.now() - timeOfLastBackgroundSync) / 1000) < DEFAULT_MINIMUM_TIME_BETWEEN_BACKGROUND_SYNC_ATTEMPTS) {\n            return;\n        }\n\n        backgroundSyncTimeOffsets = [];\n        isBackgroundSynchronizing = true;\n        const backgroundAttempts = !isNaN(settings.get().streaming.utcSynchronization.backgroundAttempts) ? settings.get().streaming.utcSynchronization.backgroundAttempts : DEFAULT_BACKGROUND_ATTEMPTS;\n        _attemptBackgroundSync(backgroundAttempts);\n    }\n\n    /**\n     * Perform a defined number of background attempts\n     * @param {number} attempts\n     * @private\n     */\n    function _attemptBackgroundSync(attempts) {\n        try {\n            if (attempts <= 0) {\n                _completeBackgroundTimeSyncSequence();\n                return;\n            }\n\n            const deviceTimeBeforeSync = Date.now();\n            handlers[lastTimingSource.schemeIdUri](\n                lastTimingSource.value,\n                function (serverTime) {\n                    // the timing source returned something useful\n                    const deviceTimeAfterSync = Date.now();\n                    const offset = _calculateOffset(deviceTimeBeforeSync, deviceTimeAfterSync, serverTime);\n\n                    backgroundSyncTimeOffsets.push(offset);\n                    _attemptBackgroundSync(attempts - 1);\n                },\n                function () {\n                    _completeBackgroundTimeSyncSequence();\n                }\n            );\n        } catch (e) {\n            _completeBackgroundTimeSyncSequence();\n        }\n    }\n\n    /**\n     * Sync against a timing source. This method is called recursively if the time sync for the first entry in timingSources fails.\n     * @param {number} sourceIndex\n     */\n    function _attemptRecursiveSync(sourceIndex = null) {\n        // if called with no sourceIndex, use zero (highest priority)\n        let index = sourceIndex || 0;\n\n        // the sources should be ordered in priority from the manifest.\n        // try each in turn, from the top, until either something\n        // sensible happens, or we run out of sources to try.\n        if (!timingSources || timingSources.length === 0 || index >= timingSources.length) {\n            _onComplete();\n            return;\n        }\n        let source = timingSources[index];\n\n        if (source) {\n            // check if there is a handler for this @schemeIdUri\n            if (handlers.hasOwnProperty(source.schemeIdUri)) {\n                // if so, call it with its @value\n                const deviceTimeBeforeSync = new Date().getTime();\n                handlers[source.schemeIdUri](\n                    source.value,\n                    function (serverTime) {\n                        // the timing source returned something useful\n                        const deviceTimeAfterSync = new Date().getTime();\n                        const offset = _calculateOffset(deviceTimeBeforeSync, deviceTimeAfterSync, serverTime);\n                        lastTimingSource = source;\n\n                        _onComplete(offset);\n                    },\n                    function () {\n                        // the timing source was probably uncontactable\n                        // or returned something we can't use - try again\n                        // with the remaining sources\n                        _attemptRecursiveSync(index + 1);\n                    }\n                );\n            } else {\n                // an unknown schemeIdUri must have been found\n                // try again with the remaining sources\n                _attemptRecursiveSync(index + 1);\n            }\n        } else {\n            // no valid time source could be found, just use device time\n            _onComplete();\n        }\n\n    }\n\n    /**\n     * Calculate the offset between client and server. Account for the roundtrip time\n     * @param {number} deviceTimeBeforeSync\n     * @param {number} deviceTimeAfterSync\n     * @param {number} serverTime\n     * @return {number}\n     * @private\n     */\n    function _calculateOffset(deviceTimeBeforeSync, deviceTimeAfterSync, serverTime) {\n        const deviceReferenceTime = deviceTimeAfterSync - ((deviceTimeAfterSync - deviceTimeBeforeSync) / 2);\n\n        return serverTime - deviceReferenceTime;\n    }\n\n    /**\n     * Checks if a synchronization is required\n     * @return {boolean}\n     * @private\n     */\n    function _shouldPerformSynchronization() {\n        try {\n            const timeBetweenSyncAttempts = !isNaN(internalTimeBetweenSyncAttempts) ? internalTimeBetweenSyncAttempts : DEFAULT_TIME_BETWEEN_SYNC_ATTEMPTS;\n\n            if (!timeOfLastSync || !timeBetweenSyncAttempts || isNaN(timeBetweenSyncAttempts)) {\n                return true;\n            }\n\n            return ((Date.now() - timeOfLastSync) / 1000) >= timeBetweenSyncAttempts;\n        } catch (e) {\n            return true;\n        }\n    }\n\n    /**\n     * Callback after sync has been completed\n     * @param {number} offset\n     * @private\n     */\n    function _onComplete(offset = NaN) {\n        let failed = isNaN(offset);\n        if (failed && settings.get().streaming.useManifestDateHeaderTimeSource) {\n            //Before falling back to binary search , check if date header exists on MPD. if so, use for a time source.\n            _checkForDateHeader();\n        } else {\n            _completeTimeSyncSequence(failed, offset);\n        }\n    }\n\n    /**\n     * Takes xsdatetime and returns milliseconds since UNIX epoch. May not be necessary as xsdatetime is very similar to ISO 8601 which is natively understood by javascript Date parser\n     * @param {string} xsdatetimeStr\n     * @return {number}\n     * @private\n     */\n    function _alternateXsdatetimeDecoder(xsdatetimeStr) {\n        // taken from DashParser - should probably refactor both uses\n        const SECONDS_IN_MIN = 60;\n        const MINUTES_IN_HOUR = 60;\n        const MILLISECONDS_IN_SECONDS = 1000;\n        let datetimeRegex = /^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2})(?::([0-9]*)(\\.[0-9]*)?)?(?:([+\\-])([0-9]{2})([0-9]{2}))?/;\n\n        let utcDate,\n            timezoneOffset;\n\n        let match = datetimeRegex.exec(xsdatetimeStr);\n\n        // If the string does not contain a timezone offset different browsers can interpret it either\n        // as UTC or as a local time so we have to parse the string manually to normalize the given date value for\n        // all browsers\n        utcDate = Date.UTC(\n            parseInt(match[1], 10),\n            parseInt(match[2], 10) - 1, // months start from zero\n            parseInt(match[3], 10),\n            parseInt(match[4], 10),\n            parseInt(match[5], 10),\n            (match[6] && (parseInt(match[6], 10) || 0)),\n            (match[7] && parseFloat(match[7]) * MILLISECONDS_IN_SECONDS) || 0\n        );\n        // If the date has timezone offset take it into account as well\n        if (match[9] && match[10]) {\n            timezoneOffset = parseInt(match[9], 10) * MINUTES_IN_HOUR + parseInt(match[10], 10);\n            utcDate += (match[8] === '+' ? -1 : +1) * timezoneOffset * SECONDS_IN_MIN * MILLISECONDS_IN_SECONDS;\n        }\n\n        return new Date(utcDate).getTime();\n    }\n\n\n    /**\n     * Try to use the built in parser, since xsdate is a constrained ISO8601 which is supported natively by Date.parse. if that fails, try a regex-based version used elsewhere in this application.\n     * @param {string} xsdatetimeStr\n     * @return {number}\n     */\n    function _xsdatetimeDecoder(xsdatetimeStr) {\n        let parsedDate = Date.parse(xsdatetimeStr);\n\n        if (isNaN(parsedDate)) {\n            parsedDate = _alternateXsdatetimeDecoder(xsdatetimeStr);\n        }\n\n        return parsedDate;\n    }\n\n    /**\n     * Takes ISO 8601 timestamp and returns milliseconds since UNIX epoch\n     * @param {string} isoStr\n     * @return {number}\n     */\n    function _iso8601Decoder(isoStr) {\n        return Date.parse(isoStr);\n    }\n\n    /**\n     * Takes RFC 1123 timestamp (which is same as ISO8601) and returns milliseconds since UNIX epoch\n     * @param {string} dateStr\n     * @return {number}\n     */\n    function _rfc1123Decoder(dateStr) {\n        return Date.parse(dateStr);\n    }\n\n    /**\n     * Handler for unsupported scheme ids.\n     * @param {string} url\n     * @param {function} onSuccessCB\n     * @param {function} onFailureCB\n     * @private\n     */\n    function _notSupportedHandler(url, onSuccessCB, onFailureCB) {\n        onFailureCB();\n    }\n\n    /**\n     * Direct handler\n     * @param {string} xsdatetimeStr\n     * @param {function} onSuccessCB\n     * @param {function} onFailureCB\n     */\n    function _directHandler(xsdatetimeStr, onSuccessCB, onFailureCB) {\n        let time = _xsdatetimeDecoder(xsdatetimeStr);\n\n        if (!isNaN(time)) {\n            onSuccessCB(time);\n            return;\n        }\n\n        onFailureCB();\n    }\n\n    /**\n     * Generic http handler\n     * @param {function} decoder\n     * @param {string} url\n     * @param {function} onSuccessCB\n     * @param {function} onFailureCB\n     * @param {boolean} isHeadRequest\n     * @private\n     */\n    function _httpHandler(decoder, url, onSuccessCB, onFailureCB, isHeadRequest) {\n        let oncomplete,\n            onload;\n        let complete = false;\n        let req = new XMLHttpRequest();\n\n        let verb = isHeadRequest ? HTTPRequest.HEAD : HTTPRequest.GET;\n        let urls = url.match(/\\S+/g);\n\n        // according to ISO 23009-1, url could be a white-space\n        // separated list of URLs. just handle one at a time.\n        url = urls.shift();\n\n        oncomplete = function () {\n            if (complete) {\n                return;\n            }\n\n            // we only want to pass through here once per xhr,\n            // regardless of whether the load was successful.\n            complete = true;\n\n            // if there are more urls to try, call self.\n            if (urls.length) {\n                _httpHandler(decoder, urls.join(' '), onSuccessCB, onFailureCB, isHeadRequest);\n            } else {\n                onFailureCB();\n            }\n        };\n\n        onload = function () {\n            let time,\n                result;\n\n            if (req.status === 200) {\n                time = isHeadRequest ?\n                    req.getResponseHeader('Date') :\n                    req.response;\n\n                result = decoder(time);\n\n                // decoder returns NaN if non-standard input\n                if (!isNaN(result)) {\n                    onSuccessCB(result);\n                    complete = true;\n                }\n            }\n        };\n\n        if (urlUtils.isRelative(url)) {\n            // passing no path to resolve will return just MPD BaseURL/baseUri\n            const baseUrl = baseURLController.resolve();\n            if (baseUrl) {\n                url = urlUtils.resolve(url, baseUrl.url);\n            }\n        }\n\n        req.open(verb, url);\n        req.timeout = HTTP_TIMEOUT_MS || 0;\n        req.onload = onload;\n        req.onloadend = oncomplete;\n        req.send();\n    }\n\n    /**\n     * Handler for http-head schemeIdUri\n     * @param {string} url\n     * @param {function} onSuccessCB\n     * @param {function} onFailureCB\n     * @private\n     */\n    function _httpHeadHandler(url, onSuccessCB, onFailureCB) {\n        _httpHandler(_rfc1123Decoder, url, onSuccessCB, onFailureCB, true);\n    }\n\n    /**\n     * Checks if a date header is present in the MPD response and calculates the offset based on the header\n     * @private\n     */\n    function _checkForDateHeader() {\n        let dateHeaderValue = dashMetrics.getLatestMPDRequestHeaderValueByID('Date');\n        let dateHeaderTime = dateHeaderValue !== null ? new Date(dateHeaderValue).getTime() : Number.NaN;\n\n        if (!isNaN(dateHeaderTime)) {\n            const offsetToDeviceTimeMs = dateHeaderTime - Date.now();\n            _completeTimeSyncSequence(false, offsetToDeviceTimeMs);\n        } else {\n            _completeTimeSyncSequence(true);\n        }\n    }\n\n    /**\n     * Triggers the event to signal that the time synchronization was completed\n     * @param {boolean} failed\n     * @param {number} offset\n     * @private\n     */\n    function _completeTimeSyncSequence(failed, offset) {\n\n        // Adjust the time of the next sync based on the drift between current offset and last offset\n        if (!isNaN(lastOffset) && !isNaN(offset) && !failed) {\n            _adjustTimeBetweenSyncAttempts(offset);\n        }\n\n        // Update the internal data\n        if (!failed && !isNaN(offset)) {\n            timeOfLastSync = Date.now();\n            isSynchronizing = false;\n\n            // if this is the first sync we are doing perform background syncs as well to confirm current offset\n            const shouldAttemptBackgroundSync = isNaN(lastOffset);\n            lastOffset = offset;\n            if (shouldAttemptBackgroundSync) {\n                _onAttemptBackgroundSync();\n            }\n            logger.debug(`Completed UTC sync. Setting client - server offset to ${offset}`);\n        }\n\n        if (failed) {\n            lastTimingSource = null;\n        }\n\n        // Notify other classes\n        eventBus.trigger(Events.UPDATE_TIME_SYNC_OFFSET, {\n            offset: offset,\n            error: failed ? new DashJSError(Errors.TIME_SYNC_FAILED_ERROR_CODE, Errors.TIME_SYNC_FAILED_ERROR_MESSAGE) : null\n        });\n        eventBus.trigger(Events.TIME_SYNCHRONIZATION_COMPLETED);\n    }\n\n    function _adjustTimeBetweenSyncAttempts(offset) {\n        try {\n            const isOffsetDriftWithinThreshold = _isOffsetDriftWithinThreshold(offset);\n            const timeBetweenSyncAttempts = !isNaN(internalTimeBetweenSyncAttempts) ? internalTimeBetweenSyncAttempts : DEFAULT_TIME_BETWEEN_SYNC_ATTEMPTS;\n            const timeBetweenSyncAttemptsAdjustmentFactor = !isNaN(settings.get().streaming.utcSynchronization.timeBetweenSyncAttemptsAdjustmentFactor) ? settings.get().streaming.utcSynchronization.timeBetweenSyncAttemptsAdjustmentFactor : DEFAULT_TIME_BETWEEN_SYNC_ATTEMPTS_ADJUSTMENT_FACTOR;\n            const maximumTimeBetweenSyncAttempts = !isNaN(settings.get().streaming.utcSynchronization.maximumTimeBetweenSyncAttempts) ? settings.get().streaming.utcSynchronization.maximumTimeBetweenSyncAttempts : DEFAULT_MAXIMUM_TIME_BETWEEN_SYNC;\n            const minimumTimeBetweenSyncAttempts = !isNaN(settings.get().streaming.utcSynchronization.minimumTimeBetweenSyncAttempts) ? settings.get().streaming.utcSynchronization.minimumTimeBetweenSyncAttempts : DEFAULT_MINIMUM_TIME_BETWEEN_SYNC;\n            let adjustedTimeBetweenSyncAttempts;\n\n            if (isOffsetDriftWithinThreshold) {\n                // The drift between the current offset and the last offset is within the allowed threshold. Increase sync time\n                adjustedTimeBetweenSyncAttempts = Math.min(timeBetweenSyncAttempts * timeBetweenSyncAttemptsAdjustmentFactor, maximumTimeBetweenSyncAttempts);\n                logger.debug(`Increasing timeBetweenSyncAttempts to ${adjustedTimeBetweenSyncAttempts}`);\n            } else {\n                // Drift between the current offset and the last offset is not within the allowed threshold. Decrease sync time\n                adjustedTimeBetweenSyncAttempts = Math.max(timeBetweenSyncAttempts / timeBetweenSyncAttemptsAdjustmentFactor, minimumTimeBetweenSyncAttempts);\n                logger.debug(`Decreasing timeBetweenSyncAttempts to ${adjustedTimeBetweenSyncAttempts}`);\n            }\n\n            internalTimeBetweenSyncAttempts = adjustedTimeBetweenSyncAttempts;\n        } catch (e) {\n\n        }\n    }\n\n    /**\n     * Callback after all background syncs have been completed.\n     * @private\n     */\n    function _completeBackgroundTimeSyncSequence() {\n        if (!backgroundSyncTimeOffsets || backgroundSyncTimeOffsets.length === 0) {\n            return;\n        }\n\n        const averageOffset = backgroundSyncTimeOffsets.reduce((acc, curr) => {\n            return acc + curr;\n        }, 0) / backgroundSyncTimeOffsets.length;\n\n        if (!_isOffsetDriftWithinThreshold(averageOffset)) {\n            logger.debug(`Completed background UTC sync. Setting client - server offset to ${averageOffset}`);\n            lastOffset = averageOffset;\n            eventBus.trigger(Events.UPDATE_TIME_SYNC_OFFSET, {\n                offset: lastOffset\n            });\n        } else {\n            logger.debug(`Completed background UTC sync. Offset is within allowed threshold and is not adjusted.`);\n        }\n\n        isBackgroundSynchronizing = false;\n        timeOfLastBackgroundSync = Date.now();\n    }\n\n    function _isOffsetDriftWithinThreshold(offset) {\n        try {\n            if (isNaN(lastOffset)) {\n                return true;\n            }\n\n            const maxAllowedDrift = settings.get().streaming.utcSynchronization.maximumAllowedDrift && !isNaN(settings.get().streaming.utcSynchronization.maximumAllowedDrift) ? settings.get().streaming.utcSynchronization.maximumAllowedDrift : DEFAULT_MAXIMUM_ALLOWED_DRIFT;\n            const lowerBound = lastOffset - maxAllowedDrift;\n            const upperBound = lastOffset + maxAllowedDrift;\n\n            return offset >= lowerBound && offset <= upperBound;\n        } catch (e) {\n            return true;\n        }\n    }\n\n    function reset() {\n        _resetInitialSettings();\n\n        eventBus.off(Events.ATTEMPT_BACKGROUND_SYNC, _onAttemptBackgroundSync, instance);\n    }\n\n    instance = {\n        initialize,\n        attemptSync,\n        setConfig,\n        reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nTimeSyncController.__dashjs_factory_name = 'TimeSyncController';\nconst factory = FactoryMaker.getSingletonFactory(TimeSyncController);\nfactory.HTTP_TIMEOUT_MS = HTTP_TIMEOUT_MS;\nFactoryMaker.updateSingletonFactory(TimeSyncController.__dashjs_factory_name, factory);\nexport default factory;\n"]}