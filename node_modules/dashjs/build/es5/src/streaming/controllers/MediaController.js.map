{"version":3,"sources":["../../../../../src/streaming/controllers/MediaController.js"],"names":["MediaController","context","eventBus","getInstance","instance","logger","tracks","settings","initialSettings","domStorage","validTrackSwitchModes","Constants","TRACK_SWITCH_MODE_ALWAYS_REPLACE","TRACK_SWITCH_MODE_NEVER_REPLACE","validTrackSelectionModes","TRACK_SELECTION_MODE_HIGHEST_BITRATE","TRACK_SELECTION_MODE_FIRST_TRACK","TRACK_SELECTION_MODE_HIGHEST_EFFICIENCY","TRACK_SELECTION_MODE_WIDEST_RANGE","setup","getLogger","reset","checkInitialMediaSettingsForType","type","streamInfo","getInitialSettings","tracksForType","getTracksFor","getSavedMediaSettings","setInitialSettings","length","forEach","track","matchSettings","push","setTrack","selectInitialTrack","addTrack","mediaType","isMultiTrackSupportedByType","streamId","id","createTrackInfo","mediaTracks","list","i","len","isTracksEqual","initSettings","getCurrentTrackFor","current","isCurrentTrack","noSettingsSave","FRAGMENTED_TEXT","trigger","Events","CURRENT_TRACK_CHANGED","oldMediaInfo","newMediaInfo","switchMode","getSwitchMode","extractSettings","storeLastSettings","roles","role","accessibility","audioChannelConfiguration","setSavedMediaSettings","value","saveTextSettingsDisabled","setSwitchMode","mode","warn","isModeSupported","indexOf","update","streaming","trackSwitchMode","get","setSelectionModeForInitialTrack","selectionModeForInitialTrack","getSelectionModeForInitialTrack","AUDIO","VIDEO","TEXT","IMAGE","t1","t2","sameId","sameViewpoint","viewpoint","sameLang","lang","sameRoles","toString","sameAccessibility","sameAudioChannelConfiguration","setConfig","config","resetInitialSettings","mediaInfo","notEmpty","matchLang","match","matchIndex","index","undefined","matchViewPoint","matchRole","filter","item","matchAccessibility","matchAudioChannelConfiguration","audio","video","fragmentedText","getTracksWithHighestBitrate","trackArr","max","result","tmp","Math","apply","bitrateList","map","obj","bandwidth","getTracksWithHighestEfficiency","min","Infinity","sum","reduce","acc","resolution","width","height","efficiency","getTracksWithWidestRange","representationCount","tmpArr","text","image","__dashjs_factory_name","factory","FactoryMaker","getSingletonFactory","updateSingletonFactory"],"mappings":"sEA8BA,iD,mDACA,gD,6CACA,6C,iDACA,qD,yDACA,uC,8HAEA,QAASA,gBAAT,EAA2B,CAEvB,GAAMC,SAAU,KAAKA,OAArB,CACA,GAAMC,UAAW,uBAASD,OAAT,EAAkBE,WAAlB,EAAjB,CAEA,GAAIC,gBAAJ,CACIC,aADJ,CAEIC,aAFJ,CAGIC,eAHJ,CAIIC,sBAJJ,CAKIC,iBALJ,CAOA,GAAMC,uBAAwB,CAC1BC,oBAAUC,gCADgB,CAE1BD,oBAAUE,+BAFgB,CAA9B,CAKA,GAAMC,0BAA2B,CAC7BH,oBAAUI,oCADmB,CAE7BJ,oBAAUK,gCAFmB,CAG7BL,oBAAUM,uCAHmB,CAI7BN,oBAAUO,iCAJmB,CAAjC,CAOA,QAASC,MAAT,EAAiB,CACbd,OAAS,oBAAMJ,OAAN,EAAeE,WAAf,GAA6BiB,SAA7B,CAAuChB,QAAvC,CAAT,CACAiB,QACH,CAED;;;;OAKA,QAASC,iCAAT,CAA0CC,IAA1C,CAAgDC,UAAhD,CAA4D,CACxD,GAAIjB,UAAWkB,mBAAmBF,IAAnB,CAAf,CACA,GAAMG,eAAgBC,aAAaJ,IAAb,CAAmBC,UAAnB,CAAtB,CACA,GAAMlB,QAAS,EAAf,CAEA,GAAI,CAACC,QAAL,CAAe,CACXA,SAAWE,WAAWmB,qBAAX,CAAiCL,IAAjC,CAAX,CACAM,mBAAmBN,IAAnB,CAAyBhB,QAAzB,EACH,CAED,GAAI,CAACmB,aAAD,EAAmBA,cAAcI,MAAd,GAAyB,CAAhD,CAAoD,OAEpD,GAAIvB,QAAJ,CAAc,CACVmB,cAAcK,OAAd,CAAsB,SAAUC,KAAV,CAAiB,CACnC,GAAIC,cAAc1B,QAAd,CAAwByB,KAAxB,CAAJ,CAAoC,CAChC1B,OAAO4B,IAAP,CAAYF,KAAZ,EACH,CACJ,CAJD,EAKH,CAED,GAAI1B,OAAOwB,MAAP,GAAkB,CAAtB,CAAyB,CACrBK,SAAS,KAAKC,kBAAL,CAAwBb,IAAxB,CAA8BG,aAA9B,CAAT,CAAuD,IAAvD,EACH,CAFD,IAEO,CACH,GAAIpB,OAAOwB,MAAP,CAAgB,CAApB,CAAuB,CACnBK,SAAS,KAAKC,kBAAL,CAAwBb,IAAxB,CAA8BjB,MAA9B,CAAT,EACH,CAFD,IAEO,CACH6B,SAAS7B,OAAO,CAAP,CAAT,EACH,CACJ,CACJ,CAED;;;OAIA,QAAS+B,SAAT,CAAkBL,KAAlB,CAAyB,CACrB,GAAI,CAACA,KAAL,CAAY,OAEZ,GAAMM,WAAYN,MAAMT,IAAxB,CACA,GAAI,CAACgB,4BAA4BD,SAA5B,CAAL,CAA6C,OAE7C,GAAIE,UAAWR,MAAMR,UAAN,CAAiBiB,EAAhC,CACA,GAAI,CAACnC,OAAOkC,QAAP,CAAL,CAAuB,CACnBlC,OAAOkC,QAAP,EAAmBE,iBAAnB,CACH,CAED,GAAMC,aAAcrC,OAAOkC,QAAP,EAAiBF,SAAjB,EAA4BM,IAAhD,CACA,IAAK,GAAIC,GAAI,CAAR,CAAWC,IAAMH,YAAYb,MAAlC,CAA0Ce,EAAIC,GAA9C,CAAmD,EAAED,CAArD,CAAwD,CACpD;AACA,GAAIE,cAAcJ,YAAYE,CAAZ,CAAd,CAA8Bb,KAA9B,CAAJ,CAA0C,CACtC,OACH,CACJ,CAEDW,YAAYT,IAAZ,CAAiBF,KAAjB,EAEA,GAAIgB,cAAevB,mBAAmBa,SAAnB,CAAnB,CACA,GAAIU,cAAiBf,cAAce,YAAd,CAA4BhB,KAA5B,CAAjB,EAAwD,CAACiB,mBAAmBX,SAAnB,CAA8BN,MAAMR,UAApC,CAA7D,CAA8G,CAC1GW,SAASH,KAAT,EACH,CACJ,CAED;;;;;OAMA,QAASL,aAAT,CAAsBJ,IAAtB,CAA4BC,UAA5B,CAAwC,CACpC,GAAI,CAACD,IAAD,EAAS,CAACC,UAAd,CAA0B,MAAO,EAAP,CAE1B,GAAMiB,IAAKjB,WAAWiB,EAAtB,CAEA,GAAI,CAACnC,OAAOmC,EAAP,CAAD,EAAe,CAACnC,OAAOmC,EAAP,EAAWlB,IAAX,CAApB,CAAsC,MAAO,EAAP,CAEtC,MAAOjB,QAAOmC,EAAP,EAAWlB,IAAX,EAAiBqB,IAAxB,CACH,CAED;;;;;OAMA,QAASK,mBAAT,CAA4B1B,IAA5B,CAAkCC,UAAlC,CAA8C,CAC1C,GAAI,CAACD,IAAD,EAAS,CAACC,UAAV,EAAyBA,YAAc,CAAClB,OAAOkB,WAAWiB,EAAlB,CAA5C,CAAoE,MAAO,KAAP,CACpE,MAAOnC,QAAOkB,WAAWiB,EAAlB,EAAsBlB,IAAtB,EAA4B2B,OAAnC,CACH,CAED;;;;OAKA,QAASC,eAAT,CAAwBnB,KAAxB,CAA+B,CAC3B,GAAI,CAACA,KAAL,CAAY,CACR,MAAO,MAAP,CACH,CACD,GAAMT,MAAOS,MAAMT,IAAnB,CACA,GAAMkB,IAAKT,MAAMR,UAAN,CAAiBiB,EAA5B,CAEA,MAAQnC,QAAOmC,EAAP,GAAcnC,OAAOmC,EAAP,EAAWlB,IAAX,CAAd,EAAkCwB,cAAczC,OAAOmC,EAAP,EAAWlB,IAAX,EAAiB2B,OAA/B,CAAwClB,KAAxC,CAA1C,CACH,CAED;;;;OAKA,QAASG,SAAT,CAAkBH,KAAlB,CAAyBoB,cAAzB,CAAyC,CACrC,GAAI,CAACpB,KAAD,EAAU,CAACA,MAAMR,UAArB,CAAiC,OAEjC,GAAMD,MAAOS,MAAMT,IAAnB,CACA,GAAMC,YAAaQ,MAAMR,UAAzB,CACA,GAAMiB,IAAKjB,WAAWiB,EAAtB,CACA,GAAMS,SAAUD,mBAAmB1B,IAAnB,CAAyBC,UAAzB,CAAhB,CAEA,GAAI,CAAClB,OAAOmC,EAAP,CAAD,EAAe,CAACnC,OAAOmC,EAAP,EAAWlB,IAAX,CAAhB,EAAoCwB,cAAcf,KAAd,CAAqBkB,OAArB,CAAxC,CAAuE,OAEvE5C,OAAOmC,EAAP,EAAWlB,IAAX,EAAiB2B,OAAjB,CAA2BlB,KAA3B,CAEA,GAAI1B,OAAOmC,EAAP,EAAWlB,IAAX,EAAiB2B,OAAjB,EAA4B,EAAEE,gBAAkB7B,OAASZ,oBAAU0C,eAAvC,CAAhC,CAAyF,CACrFnD,SAASoD,OAAT,CAAiBC,iBAAOC,qBAAxB,CAA+C,CAC3CC,aAAcP,OAD6B,CAE3CQ,aAAc1B,KAF6B,CAG3C2B,WAAYC,cAAcrC,IAAd,CAH+B,CAA/C,EAKH,CAED,GAAI,CAAC6B,cAAL,CAAqB,CAEjB,GAAI7C,WAAWsD,gBAAgB7B,KAAhB,CAAf,CAEA,GAAI,CAACzB,SAAD,EAAa,CAACD,OAAOmC,EAAP,EAAWlB,IAAX,EAAiBuC,iBAAnC,CAAsD,OAEtD,GAAIvD,UAASwD,KAAb,CAAoB,CAChBxD,UAASyD,IAAT,CAAgBzD,UAASwD,KAAT,CAAe,CAAf,CAAhB,CACA,MAAOxD,WAASwD,KAAhB,CACH,CAED,GAAIxD,UAAS0D,aAAb,CAA4B,CACxB1D,UAAS0D,aAAT,CAAyB1D,UAAS0D,aAAT,CAAuB,CAAvB,CAAzB,CACH,CAED,GAAI1D,UAAS2D,yBAAb,CAAwC,CACpC3D,UAAS2D,yBAAT,CAAqC3D,UAAS2D,yBAAT,CAAmC,CAAnC,CAArC,CACH,CAEDzD,WAAW0D,qBAAX,CAAiC5C,IAAjC,CAAuChB,SAAvC,EACH,CACJ,CAED;;;;OAKA,QAASsB,mBAAT,CAA4BN,IAA5B,CAAkC6C,KAAlC,CAAyC,CACrC,GAAI,CAAC7C,IAAD,EAAS,CAAC6C,KAAd,CAAqB,OAErB5D,gBAAgBe,IAAhB,EAAwB6C,KAAxB,CACH,CAED;;;;OAKA,QAAS3C,mBAAT,CAA4BF,IAA5B,CAAkC,CAC9B,GAAI,CAACA,IAAL,CAAW,MAAO,KAAP,CAEX,MAAOf,iBAAgBe,IAAhB,CAAP,CACH,CAED;;OAGA,QAAS8C,yBAAT,EAAoC,CAChC5D,WAAW0D,qBAAX,CAAiCxD,oBAAU0C,eAA3C,CAA4D,IAA5D,EACH,CAED;;;;;OAMA,QAASiB,cAAT,CAAuB/C,IAAvB,CAA6BgD,IAA7B,CAAmC,CAC/BlE,OAAOmE,IAAP,CAAY,wFAAZ,EACA,GAAMC,iBAAmB/D,sBAAsBgE,OAAtB,CAA8BH,IAA9B,IAAwC,CAAC,CAAlE,CAEA,GAAI,CAACE,eAAL,CAAsB,CAClBpE,OAAOmE,IAAP,CAAY,uCAAyCD,IAArD,EACA,OACH,CAED,GAAIZ,YAAa,EAAjB,CACAA,WAAWpC,IAAX,EAAmBgD,IAAnB,CAEAhE,SAASoE,MAAT,CAAgB,CACZC,UAAW,CACPC,gBAAiBlB,UADV,CADC,CAAhB,EAKH,CAED;;;;OAKA,QAASC,cAAT,CAAuBrC,IAAvB,CAA6B,CACzB,MAAOhB,UAASuE,GAAT,GAAeF,SAAf,CAAyBC,eAAzB,CAAyCtD,IAAzC,CAAP,CACH,CAED;;;;OAKA,QAASwD,gCAAT,CAAyCR,IAAzC,CAA+C,CAC3ClE,OAAOmE,IAAP,CAAY,qGAAZ,EACA,GAAMC,iBAAmB3D,yBAAyB4D,OAAzB,CAAiCH,IAAjC,IAA2C,CAAC,CAArE,CAEA,GAAI,CAACE,eAAL,CAAsB,CAClBpE,OAAOmE,IAAP,CAAY,0CAA4CD,IAAxD,EACA,OACH,CAEDhE,SAASoE,MAAT,CAAgB,CACZC,UAAW,CACPI,6BAA8BT,IADvB,CADC,CAAhB,EAKH,CAED;;;OAIA,QAASU,gCAAT,EAA2C,CACvC,MAAO1E,UAASuE,GAAT,GAAeF,SAAf,CAAyBI,4BAAhC,CACH,CAED;;;;OAKA,QAASzC,4BAAT,CAAqChB,IAArC,CAA2C,CACvC,MAAQA,QAASZ,oBAAUuE,KAAnB,EAA4B3D,OAASZ,oBAAUwE,KAA/C,EAAwD5D,OAASZ,oBAAUyE,IAA3E,EACJ7D,OAASZ,oBAAU0C,eADf,EACkC9B,OAASZ,oBAAU0E,KAD7D,CAEH,CAED;;;;;OAMA,QAAStC,cAAT,CAAuBuC,EAAvB,CAA2BC,EAA3B,CAA+B,CAC3B,GAAI,CAACD,EAAD,EAAO,CAACC,EAAZ,CAAgB,CACZ,MAAO,KAAP,CACH,CAED,GAAI,CAACD,EAAD,EAAO,CAACC,EAAZ,CAAgB,CACZ,MAAO,MAAP,CACH,CAED,GAAMC,QAASF,GAAG7C,EAAH,GAAU8C,GAAG9C,EAA5B,CACA,GAAMgD,eAAgBH,GAAGI,SAAH,GAAiBH,GAAGG,SAA1C,CACA,GAAMC,UAAWL,GAAGM,IAAH,GAAYL,GAAGK,IAAhC,CACA,GAAMC,WAAYP,GAAGvB,KAAH,CAAS+B,QAAT,KAAwBP,GAAGxB,KAAH,CAAS+B,QAAT,EAA1C,CACA,GAAMC,mBAAoBT,GAAGrB,aAAH,CAAiB6B,QAAjB,KAAgCP,GAAGtB,aAAH,CAAiB6B,QAAjB,EAA1D,CACA,GAAME,+BAAgCV,GAAGpB,yBAAH,CAA6B4B,QAA7B,KAA4CP,GAAGrB,yBAAH,CAA6B4B,QAA7B,EAAlF,CAEA,MAAQN,SAAUC,aAAV,EAA2BE,QAA3B,EAAuCE,SAAvC,EAAoDE,iBAApD,EAAyEC,6BAAjF,CACH,CAED,QAASC,UAAT,CAAmBC,MAAnB,CAA2B,CACvB,GAAI,CAACA,MAAL,CAAa,OAEb,GAAIA,OAAOzF,UAAX,CAAuB,CACnBA,WAAayF,OAAOzF,UAApB,CACH,CAED,GAAIyF,OAAO3F,QAAX,CAAqB,CACjBA,SAAW2F,OAAO3F,QAAlB,CACH,CACJ,CAED;;OAGA,QAASc,MAAT,EAAiB,CACbf,OAAS,EAAT,CACA6F,uBACH,CAED,QAAStC,gBAAT,CAAyBuC,SAAzB,CAAoC,CAChC,GAAM7F,UAAW,CACbqF,KAAMQ,UAAUR,IADH,CAEbF,UAAWU,UAAUV,SAFR,CAGb3B,MAAOqC,UAAUrC,KAHJ,CAIbE,cAAemC,UAAUnC,aAJZ,CAKbC,0BAA2BkC,UAAUlC,yBALxB,CAAjB,CAOA,GAAImC,UAAW9F,SAASqF,IAAT,EAAiBrF,SAASmF,SAA1B,EAAwCnF,SAASyD,IAAT,EAAiBzD,SAASyD,IAAT,CAAclC,MAAd,CAAuB,CAAhF,EACdvB,SAAS0D,aAAT,EAA0B1D,SAAS0D,aAAT,CAAuBnC,MAAvB,CAAgC,CAD5C,EACmDvB,SAAS2D,yBAAT,EAAsC3D,SAAS2D,yBAAT,CAAmCpC,MAAnC,CAA4C,CADpJ,CAGA,MAAOuE,UAAW9F,QAAX,CAAsB,IAA7B,CACH,CAED,QAAS0B,cAAT,CAAuB1B,QAAvB,CAAiCyB,KAAjC,CAAwC,CACpC,GAAMsE,WAAY,CAAC/F,SAASqF,IAAV,EAAmB5D,MAAM4D,IAAN,CAAWW,KAAX,CAAiBhG,SAASqF,IAA1B,CAArC,CACA,GAAMY,YAAcjG,SAASkG,KAAT,GAAmBC,SAApB,EAAmCnG,SAASkG,KAAT,GAAmB,IAAtD,EAAgEzE,MAAMyE,KAAN,GAAgBlG,SAASkG,KAA5G,CACA,GAAME,gBAAiB,CAACpG,SAASmF,SAAV,EAAwBnF,SAASmF,SAAT,GAAuB1D,MAAM0D,SAA5E,CACA,GAAMkB,WAAY,CAACrG,SAASyD,IAAV,EAAkB,CAAC,CAAChC,MAAM+B,KAAN,CAAY8C,MAAZ,CAAmB,SAAUC,IAAV,CAAgB,CACrE,MAAOA,QAASvG,SAASyD,IAAzB,CACH,CAFqC,EAEnC,CAFmC,CAAtC,CAGA,GAAI+C,oBAAqB,CAACxG,SAAS0D,aAAV,EAA2B,CAAC,CAACjC,MAAMiC,aAAN,CAAoB4C,MAApB,CAA2B,SAAUC,IAAV,CAAgB,CAC7F,MAAOA,QAASvG,SAAS0D,aAAzB,CACH,CAFqD,EAEnD,CAFmD,CAAtD,CAGA,GAAI+C,gCAAiC,CAACzG,SAAS2D,yBAAV,EAAuC,CAAC,CAAClC,MAAMkC,yBAAN,CAAgC2C,MAAhC,CAAuC,SAAUC,IAAV,CAAgB,CACjI,MAAOA,QAASvG,SAAS2D,yBAAzB,CACH,CAF6E,EAE3E,CAF2E,CAA9E,CAIA,MAAQoC,YAAaE,UAAb,EAA2BG,cAA3B,EAA6CC,SAA7C,EAA0DG,kBAA1D,EAAgFC,8BAAxF,CACH,CAED,QAASb,qBAAT,EAAgC,CAC5B3F,gBAAkB,CACdyG,MAAO,IADO,CAEdC,MAAO,IAFO,CAGdC,eAAgB,IAHF,CAAlB,CAKH,CAED,QAASC,4BAAT,CAAsCC,QAAtC,CAAgD,CAC5C,GAAIC,KAAM,CAAV,CACA,GAAIC,QAAS,EAAb,CACA,GAAIC,WAAJ,CAEAH,SAAStF,OAAT,CAAiB,SAAUC,KAAV,CAAiB,CAC9BwF,IAAMC,KAAKH,GAAL,CAASI,KAAT,CAAeD,IAAf,CAAqBzF,MAAM2F,WAAN,CAAkBC,GAAlB,CAAsB,SAAUC,GAAV,CAAe,CAAE,MAAOA,KAAIC,SAAX,CAAuB,CAA9D,CAArB,CAAN,CAEA,GAAIN,IAAMF,GAAV,CAAe,CACXA,IAAME,GAAN,CACAD,OAAS,CAACvF,KAAD,CAAT,CACH,CAHD,IAGO,IAAIwF,MAAQF,GAAZ,CAAiB,CACpBC,OAAOrF,IAAP,CAAYF,KAAZ,EACH,CACJ,CATD,EAWA,MAAOuF,OAAP,CACH,CAED,QAASQ,+BAAT,CAAyCV,QAAzC,CAAmD,CAC/C,GAAIW,KAAMC,QAAV,CACA,GAAIV,QAAS,EAAb,CACA,GAAIC,WAAJ,CAEAH,SAAStF,OAAT,CAAiB,SAAUC,KAAV,CAAiB,CAC9B,GAAMkG,KAAMlG,MAAM2F,WAAN,CAAkBQ,MAAlB,CAAyB,SAAUC,GAAV,CAAeP,GAAf,CAAoB,CACrD,GAAMQ,YAAaZ,KAAKH,GAAL,CAAS,CAAT,CAAYO,IAAIS,KAAJ,CAAYT,IAAIU,MAA5B,CAAnB,CACA,GAAMC,YAAaX,IAAIC,SAAJ,CAAgBO,UAAnC,CACA,MAAOD,KAAMI,UAAb,CACH,CAJW,CAIT,CAJS,CAAZ,CAKAhB,IAAMU,IAAMlG,MAAM2F,WAAN,CAAkB7F,MAA9B,CAEA,GAAI0F,IAAMQ,GAAV,CAAe,CACXA,IAAMR,GAAN,CACAD,OAAS,CAACvF,KAAD,CAAT,CACH,CAHD,IAGO,IAAIwF,MAAQQ,GAAZ,CAAiB,CACpBT,OAAOrF,IAAP,CAAYF,KAAZ,EACH,CACJ,CAdD,EAgBA,MAAOuF,OAAP,CACH,CAED,QAASkB,yBAAT,CAAmCpB,QAAnC,CAA6C,CACzC,GAAIC,KAAM,CAAV,CACA,GAAIC,QAAS,EAAb,CACA,GAAIC,WAAJ,CAEAH,SAAStF,OAAT,CAAiB,SAAUC,KAAV,CAAiB,CAC9BwF,IAAMxF,MAAM0G,mBAAZ,CAEA,GAAIlB,IAAMF,GAAV,CAAe,CACXA,IAAME,GAAN,CACAD,OAAS,CAACvF,KAAD,CAAT,CACH,CAHD,IAGO,IAAIwF,MAAQF,GAAZ,CAAiB,CACpBC,OAAOrF,IAAP,CAAYF,KAAZ,EACH,CACJ,CATD,EAWA,MAAOuF,OAAP,CACH,CAED,QAASnF,mBAAT,CAA4Bb,IAA5B,CAAkCjB,MAAlC,CAA0C,CACtC,GAAIiB,OAASZ,oBAAU0C,eAAvB,CAAwC,MAAO/C,QAAO,CAAP,CAAP,CAExC,GAAIiE,MAAOU,iCAAX,CACA,GAAI0D,QAAS,EAAb,CAEA,OAAQpE,IAAR,EACI,IAAK5D,qBAAUI,oCAAf,CACI4H,OAASvB,4BAA4B9G,MAA5B,CAAT,CAEA,GAAIqI,OAAO7G,MAAP,CAAgB,CAApB,CAAuB,CACnB6G,OAASF,yBAAyBE,MAAzB,CAAT,CACH,CACD,MACJ,IAAKhI,qBAAUK,gCAAf,CACI2H,OAAOzG,IAAP,CAAY5B,OAAO,CAAP,CAAZ,EACA,MACJ,IAAKK,qBAAUM,uCAAf,CACI0H,OAASZ,+BAA+BzH,MAA/B,CAAT,CAEA,GAAIqI,OAAO7G,MAAP,CAAgB,CAApB,CAAuB,CACnB6G,OAASvB,4BAA4BuB,MAA5B,CAAT,CACH,CACD,MACJ,IAAKhI,qBAAUO,iCAAf,CACIyH,OAASF,yBAAyBnI,MAAzB,CAAT,CAEA,GAAIqI,OAAO7G,MAAP,CAAgB,CAApB,CAAuB,CACnB6G,OAASvB,4BAA4B9G,MAA5B,CAAT,CACH,CACD,MACJ,QACID,OAAOmE,IAAP,CAAY,0CAA4CD,IAAxD,EACA,MA3BR,CA8BA,MAAOoE,QAAO,CAAP,CAAP,CACH,CAED,QAASjG,gBAAT,EAA2B,CACvB,MAAO,CACHuE,MAAO,CACHrE,KAAM,EADH,CAEHkB,kBAAmB,IAFhB,CAGHZ,QAAS,IAHN,CADJ,CAMHgE,MAAO,CACHtE,KAAM,EADH,CAEHkB,kBAAmB,IAFhB,CAGHZ,QAAS,IAHN,CANJ,CAWH0F,KAAM,CACFhG,KAAM,EADJ,CAEFkB,kBAAmB,IAFjB,CAGFZ,QAAS,IAHP,CAXH,CAgBHiE,eAAgB,CACZvE,KAAM,EADM,CAEZkB,kBAAmB,IAFP,CAGZZ,QAAS,IAHG,CAhBb,CAqBH2F,MAAO,CACHjG,KAAM,EADH,CAEHkB,kBAAmB,IAFhB,CAGHZ,QAAS,IAHN,CArBJ,CAAP,CA2BH,CAED9C,SAAW,CACPkB,iCAAkCA,gCAD3B,CAEPe,SAAUA,QAFH,CAGPV,aAAcA,YAHP,CAIPsB,mBAAoBA,kBAJb,CAKPE,eAAgBA,cALT,CAMPhB,SAAUA,QANH,CAOPN,mBAAoBA,kBAPb,CAQPJ,mBAAoBA,kBARb,CASP6C,cAAeA,aATR,CAUPV,cAAeA,aAVR,CAWPxB,mBAAoBA,kBAXb,CAYPgF,4BAA6BA,2BAZtB,CAaPW,+BAAgCA,8BAbzB,CAcPU,yBAA0BA,wBAdnB,CAeP1D,gCAAiCA,+BAf1B,CAgBPE,gCAAiCA,+BAhB1B,CAiBP1C,4BAA6BA,2BAjBtB,CAkBPQ,cAAeA,aAlBR,CAmBPd,cAAeA,aAnBR,CAoBPoC,yBAA0BA,wBApBnB,CAqBP4B,UAAWA,SArBJ,CAsBP5E,MAAOA,KAtBA,CAAX,CAyBAF,QAEA,MAAOf,SAAP,CACH,CAvjBD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAyjBAJ,gBAAgB8I,qBAAhB,CAAwC,iBAAxC,CACA,GAAMC,SAAUC,uBAAaC,mBAAb,CAAiCjJ,eAAjC,CAAhB,CACAgJ,uBAAaE,sBAAb,CAAoClJ,gBAAgB8I,qBAApD,CAA2EC,OAA3E,E,gBACeA,O","file":"MediaController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport Events from '../../core/events/Events';\nimport EventBus from '../../core/EventBus';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\n\nfunction MediaController() {\n\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n\n    let instance,\n        logger,\n        tracks,\n        settings,\n        initialSettings,\n        domStorage;\n\n    const validTrackSwitchModes = [\n        Constants.TRACK_SWITCH_MODE_ALWAYS_REPLACE,\n        Constants.TRACK_SWITCH_MODE_NEVER_REPLACE\n    ];\n\n    const validTrackSelectionModes = [\n        Constants.TRACK_SELECTION_MODE_HIGHEST_BITRATE,\n        Constants.TRACK_SELECTION_MODE_FIRST_TRACK,\n        Constants.TRACK_SELECTION_MODE_HIGHEST_EFFICIENCY,\n        Constants.TRACK_SELECTION_MODE_WIDEST_RANGE\n    ];\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        reset();\n    }\n\n    /**\n     * @param {string} type\n     * @param {StreamInfo} streamInfo\n     * @memberof MediaController#\n     */\n    function checkInitialMediaSettingsForType(type, streamInfo) {\n        let settings = getInitialSettings(type);\n        const tracksForType = getTracksFor(type, streamInfo);\n        const tracks = [];\n\n        if (!settings) {\n            settings = domStorage.getSavedMediaSettings(type);\n            setInitialSettings(type, settings);\n        }\n\n        if (!tracksForType || (tracksForType.length === 0)) return;\n\n        if (settings) {\n            tracksForType.forEach(function (track) {\n                if (matchSettings(settings, track)) {\n                    tracks.push(track);\n                }\n            });\n        }\n\n        if (tracks.length === 0) {\n            setTrack(this.selectInitialTrack(type, tracksForType), true);\n        } else {\n            if (tracks.length > 1) {\n                setTrack(this.selectInitialTrack(type, tracks));\n            } else {\n                setTrack(tracks[0]);\n            }\n        }\n    }\n\n    /**\n     * @param {MediaInfo} track\n     * @memberof MediaController#\n     */\n    function addTrack(track) {\n        if (!track) return;\n\n        const mediaType = track.type;\n        if (!isMultiTrackSupportedByType(mediaType)) return;\n\n        let streamId = track.streamInfo.id;\n        if (!tracks[streamId]) {\n            tracks[streamId] = createTrackInfo();\n        }\n\n        const mediaTracks = tracks[streamId][mediaType].list;\n        for (let i = 0, len = mediaTracks.length; i < len; ++i) {\n            //track is already set.\n            if (isTracksEqual(mediaTracks[i], track)) {\n                return;\n            }\n        }\n\n        mediaTracks.push(track);\n\n        let initSettings = getInitialSettings(mediaType);\n        if (initSettings && (matchSettings(initSettings, track)) && !getCurrentTrackFor(mediaType, track.streamInfo)) {\n            setTrack(track);\n        }\n    }\n\n    /**\n     * @param {string} type\n     * @param {StreamInfo} streamInfo\n     * @returns {Array}\n     * @memberof MediaController#\n     */\n    function getTracksFor(type, streamInfo) {\n        if (!type || !streamInfo) return [];\n\n        const id = streamInfo.id;\n\n        if (!tracks[id] || !tracks[id][type]) return [];\n\n        return tracks[id][type].list;\n    }\n\n    /**\n     * @param {string} type\n     * @param {StreamInfo} streamInfo\n     * @returns {Object|null}\n     * @memberof MediaController#\n     */\n    function getCurrentTrackFor(type, streamInfo) {\n        if (!type || !streamInfo || (streamInfo && !tracks[streamInfo.id])) return null;\n        return tracks[streamInfo.id][type].current;\n    }\n\n    /**\n     * @param {MediaInfo} track\n     * @returns {boolean}\n     * @memberof MediaController#\n     */\n    function isCurrentTrack(track) {\n        if (!track) {\n            return false;\n        }\n        const type = track.type;\n        const id = track.streamInfo.id;\n\n        return (tracks[id] && tracks[id][type] && isTracksEqual(tracks[id][type].current, track));\n    }\n\n    /**\n     * @param {MediaInfo} track\n     * @param {boolean} noSettingsSave specify if settings must be not be saved\n     * @memberof MediaController#\n     */\n    function setTrack(track, noSettingsSave) {\n        if (!track || !track.streamInfo) return;\n\n        const type = track.type;\n        const streamInfo = track.streamInfo;\n        const id = streamInfo.id;\n        const current = getCurrentTrackFor(type, streamInfo);\n\n        if (!tracks[id] || !tracks[id][type] || isTracksEqual(track, current)) return;\n\n        tracks[id][type].current = track;\n\n        if (tracks[id][type].current && !(noSettingsSave && type === Constants.FRAGMENTED_TEXT)) {\n            eventBus.trigger(Events.CURRENT_TRACK_CHANGED, {\n                oldMediaInfo: current,\n                newMediaInfo: track,\n                switchMode: getSwitchMode(type)\n            });\n        }\n\n        if (!noSettingsSave) {\n\n            let settings = extractSettings(track);\n\n            if (!settings || !tracks[id][type].storeLastSettings) return;\n\n            if (settings.roles) {\n                settings.role = settings.roles[0];\n                delete settings.roles;\n            }\n\n            if (settings.accessibility) {\n                settings.accessibility = settings.accessibility[0];\n            }\n\n            if (settings.audioChannelConfiguration) {\n                settings.audioChannelConfiguration = settings.audioChannelConfiguration[0];\n            }\n\n            domStorage.setSavedMediaSettings(type, settings);\n        }\n    }\n\n    /**\n     * @param {string} type\n     * @param {Object} value\n     * @memberof MediaController#\n     */\n    function setInitialSettings(type, value) {\n        if (!type || !value) return;\n\n        initialSettings[type] = value;\n    }\n\n    /**\n     * @param {string} type\n     * @returns {Object|null}\n     * @memberof MediaController#\n     */\n    function getInitialSettings(type) {\n        if (!type) return null;\n\n        return initialSettings[type];\n    }\n\n    /**\n     * @memberof MediaController#\n     */\n    function saveTextSettingsDisabled() {\n        domStorage.setSavedMediaSettings(Constants.FRAGMENTED_TEXT, null);\n    }\n\n    /**\n     * @param {string} type\n     * @param {string} mode\n     * @memberof MediaController#\n     * @deprecated Please use updateSettings({streaming: { trackSwitchMode: mode } }) instead\n     */\n    function setSwitchMode(type, mode) {\n        logger.warn('deprecated: Please use updateSettings({streaming: { trackSwitchMode: mode } }) instead');\n        const isModeSupported = (validTrackSwitchModes.indexOf(mode) !== -1);\n\n        if (!isModeSupported) {\n            logger.warn('Track switch mode is not supported: ' + mode);\n            return;\n        }\n\n        let switchMode = {};\n        switchMode[type] = mode;\n\n        settings.update({\n            streaming: {\n                trackSwitchMode: switchMode\n            }\n        });\n    }\n\n    /**\n     * @param {string} type\n     * @returns {string} mode\n     * @memberof MediaController#\n     */\n    function getSwitchMode(type) {\n        return settings.get().streaming.trackSwitchMode[type];\n    }\n\n    /**\n     * @param {string} mode\n     * @memberof MediaController#\n     * @deprecated Please use updateSettings({streaming: { selectionModeForInitialTrack: mode } }) instead\n     */\n    function setSelectionModeForInitialTrack(mode) {\n        logger.warn('deprecated: Please use updateSettings({streaming: { selectionModeForInitialTrack: mode } }) instead');\n        const isModeSupported = (validTrackSelectionModes.indexOf(mode) !== -1);\n\n        if (!isModeSupported) {\n            logger.warn('Track selection mode is not supported: ' + mode);\n            return;\n        }\n\n        settings.update({\n            streaming: {\n                selectionModeForInitialTrack: mode\n            }\n        });\n    }\n\n    /**\n     * @returns {string} mode\n     * @memberof MediaController#\n     */\n    function getSelectionModeForInitialTrack() {\n        return settings.get().streaming.selectionModeForInitialTrack;\n    }\n\n    /**\n     * @param {string} type\n     * @returns {boolean}\n     * @memberof MediaController#\n     */\n    function isMultiTrackSupportedByType(type) {\n        return (type === Constants.AUDIO || type === Constants.VIDEO || type === Constants.TEXT ||\n            type === Constants.FRAGMENTED_TEXT || type === Constants.IMAGE);\n    }\n\n    /**\n     * @param {MediaInfo} t1 - first track to compare\n     * @param {MediaInfo} t2 - second track to compare\n     * @returns {boolean}\n     * @memberof MediaController#\n     */\n    function isTracksEqual(t1, t2) {\n        if (!t1 && !t2) {\n            return true;\n        }\n\n        if (!t1 || !t2) {\n            return false;\n        }\n\n        const sameId = t1.id === t2.id;\n        const sameViewpoint = t1.viewpoint === t2.viewpoint;\n        const sameLang = t1.lang === t2.lang;\n        const sameRoles = t1.roles.toString() === t2.roles.toString();\n        const sameAccessibility = t1.accessibility.toString() === t2.accessibility.toString();\n        const sameAudioChannelConfiguration = t1.audioChannelConfiguration.toString() === t2.audioChannelConfiguration.toString();\n\n        return (sameId && sameViewpoint && sameLang && sameRoles && sameAccessibility && sameAudioChannelConfiguration);\n    }\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.domStorage) {\n            domStorage = config.domStorage;\n        }\n\n        if (config.settings) {\n            settings = config.settings;\n        }\n    }\n\n    /**\n     * @memberof MediaController#\n     */\n    function reset() {\n        tracks = {};\n        resetInitialSettings();\n    }\n\n    function extractSettings(mediaInfo) {\n        const settings = {\n            lang: mediaInfo.lang,\n            viewpoint: mediaInfo.viewpoint,\n            roles: mediaInfo.roles,\n            accessibility: mediaInfo.accessibility,\n            audioChannelConfiguration: mediaInfo.audioChannelConfiguration\n        };\n        let notEmpty = settings.lang || settings.viewpoint || (settings.role && settings.role.length > 0) ||\n        (settings.accessibility && settings.accessibility.length > 0) || (settings.audioChannelConfiguration && settings.audioChannelConfiguration.length > 0);\n\n        return notEmpty ? settings : null;\n    }\n\n    function matchSettings(settings, track) {\n        const matchLang = !settings.lang || (track.lang.match(settings.lang));\n        const matchIndex = (settings.index === undefined) || (settings.index === null) || (track.index === settings.index);\n        const matchViewPoint = !settings.viewpoint || (settings.viewpoint === track.viewpoint);\n        const matchRole = !settings.role || !!track.roles.filter(function (item) {\n            return item === settings.role;\n        })[0];\n        let matchAccessibility = !settings.accessibility || !!track.accessibility.filter(function (item) {\n            return item === settings.accessibility;\n        })[0];\n        let matchAudioChannelConfiguration = !settings.audioChannelConfiguration || !!track.audioChannelConfiguration.filter(function (item) {\n            return item === settings.audioChannelConfiguration;\n        })[0];\n\n        return (matchLang && matchIndex && matchViewPoint && matchRole && matchAccessibility && matchAudioChannelConfiguration);\n    }\n\n    function resetInitialSettings() {\n        initialSettings = {\n            audio: null,\n            video: null,\n            fragmentedText: null\n        };\n    }\n\n    function getTracksWithHighestBitrate (trackArr) {\n        let max = 0;\n        let result = [];\n        let tmp;\n\n        trackArr.forEach(function (track) {\n            tmp = Math.max.apply(Math, track.bitrateList.map(function (obj) { return obj.bandwidth; }));\n\n            if (tmp > max) {\n                max = tmp;\n                result = [track];\n            } else if (tmp === max) {\n                result.push(track);\n            }\n        });\n\n        return result;\n    }\n\n    function getTracksWithHighestEfficiency (trackArr) {\n        let min = Infinity;\n        let result = [];\n        let tmp;\n\n        trackArr.forEach(function (track) {\n            const sum = track.bitrateList.reduce(function (acc, obj) {\n                const resolution = Math.max(1, obj.width * obj.height);\n                const efficiency = obj.bandwidth / resolution;\n                return acc + efficiency;\n            }, 0);\n            tmp = sum / track.bitrateList.length;\n\n            if (tmp < min) {\n                min = tmp;\n                result = [track];\n            } else if (tmp === min) {\n                result.push(track);\n            }\n        });\n\n        return result;\n    }\n\n    function getTracksWithWidestRange (trackArr) {\n        let max = 0;\n        let result = [];\n        let tmp;\n\n        trackArr.forEach(function (track) {\n            tmp = track.representationCount;\n\n            if (tmp > max) {\n                max = tmp;\n                result = [track];\n            } else if (tmp === max) {\n                result.push(track);\n            }\n        });\n\n        return result;\n    }\n\n    function selectInitialTrack(type, tracks) {\n        if (type === Constants.FRAGMENTED_TEXT) return tracks[0];\n\n        let mode = getSelectionModeForInitialTrack();\n        let tmpArr = [];\n\n        switch (mode) {\n            case Constants.TRACK_SELECTION_MODE_HIGHEST_BITRATE:\n                tmpArr = getTracksWithHighestBitrate(tracks);\n\n                if (tmpArr.length > 1) {\n                    tmpArr = getTracksWithWidestRange(tmpArr);\n                }\n                break;\n            case Constants.TRACK_SELECTION_MODE_FIRST_TRACK:\n                tmpArr.push(tracks[0]);\n                break;\n            case Constants.TRACK_SELECTION_MODE_HIGHEST_EFFICIENCY:\n                tmpArr = getTracksWithHighestEfficiency(tracks);\n\n                if (tmpArr.length > 1) {\n                    tmpArr = getTracksWithHighestBitrate(tmpArr);\n                }\n                break;\n            case Constants.TRACK_SELECTION_MODE_WIDEST_RANGE:\n                tmpArr = getTracksWithWidestRange(tracks);\n\n                if (tmpArr.length > 1) {\n                    tmpArr = getTracksWithHighestBitrate(tracks);\n                }\n                break;\n            default:\n                logger.warn('Track selection mode is not supported: ' + mode);\n                break;\n        }\n\n        return tmpArr[0];\n    }\n\n    function createTrackInfo() {\n        return {\n            audio: {\n                list: [],\n                storeLastSettings: true,\n                current: null\n            },\n            video: {\n                list: [],\n                storeLastSettings: true,\n                current: null\n            },\n            text: {\n                list: [],\n                storeLastSettings: true,\n                current: null\n            },\n            fragmentedText: {\n                list: [],\n                storeLastSettings: true,\n                current: null\n            },\n            image: {\n                list: [],\n                storeLastSettings: true,\n                current: null\n            }\n        };\n    }\n\n    instance = {\n        checkInitialMediaSettingsForType: checkInitialMediaSettingsForType,\n        addTrack: addTrack,\n        getTracksFor: getTracksFor,\n        getCurrentTrackFor: getCurrentTrackFor,\n        isCurrentTrack: isCurrentTrack,\n        setTrack: setTrack,\n        setInitialSettings: setInitialSettings,\n        getInitialSettings: getInitialSettings,\n        setSwitchMode: setSwitchMode,\n        getSwitchMode: getSwitchMode,\n        selectInitialTrack: selectInitialTrack,\n        getTracksWithHighestBitrate: getTracksWithHighestBitrate,\n        getTracksWithHighestEfficiency: getTracksWithHighestEfficiency,\n        getTracksWithWidestRange: getTracksWithWidestRange,\n        setSelectionModeForInitialTrack: setSelectionModeForInitialTrack,\n        getSelectionModeForInitialTrack: getSelectionModeForInitialTrack,\n        isMultiTrackSupportedByType: isMultiTrackSupportedByType,\n        isTracksEqual: isTracksEqual,\n        matchSettings: matchSettings,\n        saveTextSettingsDisabled: saveTextSettingsDisabled,\n        setConfig: setConfig,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nMediaController.__dashjs_factory_name = 'MediaController';\nconst factory = FactoryMaker.getSingletonFactory(MediaController);\nFactoryMaker.updateSingletonFactory(MediaController.__dashjs_factory_name, factory);\nexport default factory;\n"]}