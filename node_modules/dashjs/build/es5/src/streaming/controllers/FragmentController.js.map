{"version":3,"sources":["../../../../../src/streaming/controllers/FragmentController.js"],"names":["FragmentController","config","context","eventBus","getInstance","errHandler","mediaPlayerModel","dashMetrics","debug","streamInfo","instance","logger","fragmentModels","setup","getLogger","resetInitialSettings","on","Events","FRAGMENT_LOADING_COMPLETED","onFragmentLoadingCompleted","FRAGMENT_LOADING_PROGRESS","getStreamId","id","getModel","type","model","create","fragmentLoader","requestModifier","settings","boxParser","events","errors","Errors","dashConstants","urlUtils","reset","off","createDataChunk","bytes","request","streamId","endFragment","chunk","DataChunk","mediaInfo","segmentType","start","startTime","duration","end","index","quality","representationId","e","sender","response","isInit","isInitializationRequest","strInfo","error","mediaType","Constants","AUDIO","VIDEO","FRAGMENTED_TEXT","trigger","SERVICE_LOCATION_BLACKLIST_ADD","entry","serviceLocation","warn","INIT_FRAGMENT_LOADED","MEDIA_FRAGMENT_LOADED","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"FragmentController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport DataChunk from '../vo/DataChunk';\nimport FragmentModel from '../models/FragmentModel';\nimport FragmentLoader from '../FragmentLoader';\nimport RequestModifier from '../utils/RequestModifier';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport Errors from '../../core/errors/Errors';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\n\nfunction FragmentController( config ) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n\n    const errHandler = config.errHandler;\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const dashMetrics = config.dashMetrics;\n    const debug = Debug(context).getInstance();\n    const streamInfo = config.streamInfo;\n\n    let instance,\n        logger,\n        fragmentModels;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        resetInitialSettings();\n        eventBus.on(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, instance);\n        eventBus.on(Events.FRAGMENT_LOADING_PROGRESS, onFragmentLoadingCompleted, instance);\n    }\n\n    function getStreamId() {\n        return streamInfo.id;\n    }\n\n    function getModel(type) {\n        let model = fragmentModels[type];\n        if (!model) {\n            model = FragmentModel(context).create({\n                streamInfo: streamInfo,\n                type: type,\n                dashMetrics: dashMetrics,\n                fragmentLoader: FragmentLoader(context).create({\n                    dashMetrics: dashMetrics,\n                    mediaPlayerModel: mediaPlayerModel,\n                    errHandler: errHandler,\n                    requestModifier: RequestModifier(context).getInstance(),\n                    settings: config.settings,\n                    boxParser: config.boxParser,\n                    eventBus: eventBus,\n                    events: Events,\n                    errors: Errors,\n                    dashConstants: config.dashConstants,\n                    urlUtils: config.urlUtils\n                }),\n                debug: debug,\n                eventBus: eventBus,\n                events: Events\n            });\n\n            fragmentModels[type] = model;\n        }\n\n        return model;\n    }\n\n    function resetInitialSettings() {\n        for (let model in fragmentModels) {\n            fragmentModels[model].reset();\n        }\n        fragmentModels = {};\n    }\n\n    function reset() {\n        eventBus.off(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);\n        eventBus.off(Events.FRAGMENT_LOADING_PROGRESS, onFragmentLoadingCompleted, this);\n        resetInitialSettings();\n    }\n\n    function createDataChunk(bytes, request, streamId, endFragment) {\n        const chunk = new DataChunk();\n\n        chunk.streamId = streamId;\n        chunk.mediaInfo = request.mediaInfo;\n        chunk.segmentType = request.type;\n        chunk.start = request.startTime;\n        chunk.duration = request.duration;\n        chunk.end = chunk.start + chunk.duration;\n        chunk.bytes = bytes;\n        chunk.index = request.index;\n        chunk.quality = request.quality;\n        chunk.representationId = request.representationId;\n        chunk.endFragment = endFragment;\n\n        return chunk;\n    }\n\n    function onFragmentLoadingCompleted(e) {\n        // Event propagation may have been stopped (see MssHandler)\n        if (!e.sender) return;\n\n        const request = e.request;\n        const bytes = e.response;\n        const isInit = request.isInitializationRequest();\n        const strInfo = request.mediaInfo.streamInfo;\n\n        if (e.error) {\n            if (request.mediaType === Constants.AUDIO || request.mediaType === Constants.VIDEO || request.mediaType === Constants.FRAGMENTED_TEXT) {\n                // add service location to blacklist controller - only for audio or video. text should not set errors\n                eventBus.trigger(Events.SERVICE_LOCATION_BLACKLIST_ADD, { entry: e.request.serviceLocation });\n            }\n        }\n\n        if (!bytes || !strInfo) {\n            logger.warn('No ' + request.mediaType + ' bytes to push or stream is inactive.');\n            return;\n        }\n        const chunk = createDataChunk(bytes, request, streamInfo.id, e.type !== Events.FRAGMENT_LOADING_PROGRESS);\n        eventBus.trigger(isInit ? Events.INIT_FRAGMENT_LOADED : Events.MEDIA_FRAGMENT_LOADED,\n            {\n                chunk: chunk,\n                request: request\n            },\n            { streamId: strInfo.id, mediaType: request.mediaType }\n        );\n    }\n\n    instance = {\n        getStreamId: getStreamId,\n        getModel: getModel,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nFragmentController.__dashjs_factory_name = 'FragmentController';\nexport default FactoryMaker.getClassFactory(FragmentController);\n"]}