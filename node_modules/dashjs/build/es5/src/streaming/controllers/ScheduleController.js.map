{"version":3,"sources":["../../../../../src/streaming/controllers/ScheduleController.js"],"names":["ScheduleController","config","context","eventBus","getInstance","adapter","dashMetrics","mediaPlayerModel","fragmentModel","abrController","playbackController","textController","type","mimeType","mediaController","bufferController","settings","instance","streamInfo","logger","currentRepresentationInfo","initialRequest","isStopped","isFragmentProcessingInProgress","timeToLoadDelay","scheduleTimeout","seekTarget","hasVideoTrack","bufferLevelRule","lastFragmentRequest","topQualityIndex","lastInitializedRepresentationInfo","replaceRequestArray","switchTrack","replacingBuffer","mediaRequest","checkPlaybackQuality","isReplacementRequest","setup","getLogger","resetInitialSettings","initialize","_hasVideoTrack","create","on","Events","DATA_UPDATE_STARTED","onDataUpdateStarted","FRAGMENT_LOADING_COMPLETED","onFragmentLoadingCompleted","STREAM_COMPLETED","onStreamCompleted","BUFFER_CLEARED","onBufferCleared","BYTES_APPENDED_END_FRAGMENT","onBytesAppended","QUOTA_EXCEEDED","onQuotaExceeded","PLAYBACK_SEEKING","onPlaybackSeeking","PLAYBACK_STARTED","onPlaybackStarted","PLAYBACK_RATE_CHANGED","onPlaybackRateChanged","PLAYBACK_TIME_UPDATED","onPlaybackTimeUpdated","URL_RESOLUTION_FAILED","onURLResolutionFailed","FRAGMENT_LOADING_ABANDONED","onFragmentLoadingAbandoned","BUFFERING_COMPLETED","onBufferingCompleted","getType","getStreamId","id","setCurrentRepresentation","representationInfo","isStarted","start","getIsBufferingCompleted","debug","createPlaylistTraceMetrics","getTime","getPlaybackRate","startScheduleTimer","stop","clearTimeout","hasTopQualityChanged","newTopQualityIndex","getTopQualityIndexFor","info","schedule","isPaused","get","streaming","scheduleWhilePaused","Constants","FRAGMENTED_TEXT","TEXT","isTextEnabled","validateExecutedFragmentRequest","isReplacement","length","lastInitializedQuality","quality","NaN","isNaN","execute","getNextFragment","getSwitchMode","TRACK_SWITCH_MODE_ALWAYS_REPLACE","replaceBuffer","trigger","INIT_FRAGMENT_NEEDED","representationId","sender","streamId","mediaType","replacement","shift","isInitializationRequest","MEDIA_FRAGMENT_NEEDED","setFragmentProcessState","time","safeBufferLevel","fragmentDuration","schedulingInfo","getCurrentSchedulingInfo","mediaInfo","duration","request","getRequests","state","FragmentModel","FRAGMENT_MODEL_EXECUTED","threshold","indexOf","getIsTextTrack","fastSwitchModeEnabled","fastSwitchEnabled","bufferLevel","getBufferLevel","abandonmentState","getAbandonmentStateFor","trackChanged","isCurrentTrack","TRACK_SWITCH_MODE_NEVER_REPLACE","qualityChanged","MetricsConstants","ABANDON_LOAD","replaceRequest","index","setSeekTarget","value","setTimeout","processInitRequest","executeRequest","processMediaRequest","url","getIsDynamic","lowLatencyEnabled","switchTrackAsked","push","completeQualityChange","item","startTime","TRACK_CHANGE_RENDERED","oldMediaInfo","newMediaInfo","adaptationIndex","QUALITY_CHANGE_RENDERED","oldQuality","newQuality","e","range","error","serviceLocation","addExecutedRequest","getRepresentationInfo","currentTime","fragEndTime","isSeeking","flushBufferAtTrackSwitch","seek","hasEnoughSpaceToAppend","quotaExceeded","abortRequests","seekTime","setTimeToLoadDelay","latency","DVRWindow","end","updateManifestUpdateInfo","updatePlayListTraceMetrics","playbackspeed","playbackRate","toString","getTimeToLoadDelay","getBufferTarget","undefined","reset","off","getPlaybackController","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"ScheduleController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport MetricsConstants from '../constants/MetricsConstants';\nimport BufferLevelRule from '../rules/scheduling/BufferLevelRule';\nimport FragmentModel from '../models/FragmentModel';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\n\nfunction ScheduleController(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n    const adapter = config.adapter;\n    const dashMetrics = config.dashMetrics;\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const fragmentModel = config.fragmentModel;\n    const abrController = config.abrController;\n    const playbackController = config.playbackController;\n    const textController = config.textController;\n    const type = config.type;\n    const mimeType = config.mimeType;\n    const mediaController = config.mediaController;\n    const bufferController = config.bufferController;\n    const settings = config.settings;\n\n    let instance,\n        streamInfo,\n        logger,\n        currentRepresentationInfo,\n        initialRequest,\n        isStopped,\n        isFragmentProcessingInProgress,\n        timeToLoadDelay,\n        scheduleTimeout,\n        seekTarget,\n        hasVideoTrack,\n        bufferLevelRule,\n        lastFragmentRequest,\n        topQualityIndex,\n        lastInitializedRepresentationInfo,\n        replaceRequestArray,\n        switchTrack,\n        replacingBuffer,\n        mediaRequest,\n        checkPlaybackQuality,\n        isReplacementRequest;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        resetInitialSettings();\n        streamInfo = config.streamInfo;\n    }\n\n    function initialize(_hasVideoTrack) {\n        hasVideoTrack = _hasVideoTrack;\n\n        bufferLevelRule = BufferLevelRule(context).create({\n            abrController: abrController,\n            dashMetrics: dashMetrics,\n            mediaPlayerModel: mediaPlayerModel,\n            textController: textController,\n            settings: settings\n        });\n\n        //eventBus.on(Events.LIVE_EDGE_SEARCH_COMPLETED, onLiveEdgeSearchCompleted, this);\n        eventBus.on(Events.DATA_UPDATE_STARTED, onDataUpdateStarted, this);\n        eventBus.on(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);\n        eventBus.on(Events.STREAM_COMPLETED, onStreamCompleted, this);\n        eventBus.on(Events.BUFFER_CLEARED, onBufferCleared, this);\n        eventBus.on(Events.BYTES_APPENDED_END_FRAGMENT, onBytesAppended, this);\n        eventBus.on(Events.QUOTA_EXCEEDED, onQuotaExceeded, this);\n        eventBus.on(Events.PLAYBACK_SEEKING, onPlaybackSeeking, this);\n        eventBus.on(Events.PLAYBACK_STARTED, onPlaybackStarted, this);\n        eventBus.on(Events.PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this);\n        eventBus.on(Events.PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this);\n        eventBus.on(Events.URL_RESOLUTION_FAILED, onURLResolutionFailed, this);\n        eventBus.on(Events.FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, this);\n        eventBus.on(Events.BUFFERING_COMPLETED, onBufferingCompleted, this);\n    }\n\n    function getType() {\n        return type;\n    }\n\n    function getStreamId() {\n        return streamInfo.id;\n    }\n\n    function setCurrentRepresentation(representationInfo) {\n        currentRepresentationInfo = representationInfo;\n    }\n\n    function isStarted() {\n        return (isStopped === false);\n    }\n\n    function start() {\n        if (!streamInfo) return;\n        if (isStarted()) return;\n        if (!currentRepresentationInfo || bufferController.getIsBufferingCompleted()) return;\n\n        logger.debug('Schedule Controller starts');\n        isStopped = false;\n        dashMetrics.createPlaylistTraceMetrics(currentRepresentationInfo.id, playbackController.getTime() * 1000, playbackController.getPlaybackRate());\n\n        if (initialRequest) {\n            initialRequest = false;\n        }\n\n        startScheduleTimer(0);\n    }\n\n    function stop() {\n        if (isStopped) return;\n\n        logger.debug('Schedule Controller stops');\n        logger.debug(type + ' Schedule Controller stops');\n        isStopped = true;\n        clearTimeout(scheduleTimeout);\n    }\n\n    function hasTopQualityChanged(type, id) {\n        topQualityIndex[id] = topQualityIndex[id] || {};\n        const newTopQualityIndex = abrController.getTopQualityIndexFor(type, id);\n\n        if (topQualityIndex[id][type] != newTopQualityIndex) {\n            logger.info('Top quality ' + type + ' index has changed from ' + topQualityIndex[id][type] + ' to ' + newTopQualityIndex);\n            topQualityIndex[id][type] = newTopQualityIndex;\n            return true;\n        }\n        return false;\n\n    }\n\n    function schedule() {\n        if (!streamInfo) return;\n        if (isStopped || isFragmentProcessingInProgress ||\n            (playbackController.isPaused() && !settings.get().streaming.scheduleWhilePaused) ||\n            ((type === Constants.FRAGMENTED_TEXT || type === Constants.TEXT) && !textController.isTextEnabled()) ||\n            bufferController.getIsBufferingCompleted()) {\n            stop();\n            return;\n        }\n\n        validateExecutedFragmentRequest();\n\n        const isReplacement = replaceRequestArray.length > 0;\n        const lastInitializedQuality = lastInitializedRepresentationInfo ? lastInitializedRepresentationInfo.quality : NaN;\n        if (replacingBuffer || isNaN(lastInitializedQuality) || switchTrack || isReplacement ||\n            hasTopQualityChanged(type, streamInfo.id) ||\n            bufferLevelRule.execute(type, currentRepresentationInfo, hasVideoTrack)) {\n            const getNextFragment = function () {\n                if ((currentRepresentationInfo.quality !== lastInitializedQuality || switchTrack) && (!replacingBuffer)) {\n                    if (switchTrack) {\n                        logger.debug('Switch track for ' + type + ', representation id = ' + currentRepresentationInfo.id);\n                        replacingBuffer = mediaController.getSwitchMode(type) === Constants.TRACK_SWITCH_MODE_ALWAYS_REPLACE;\n                        if (replacingBuffer && bufferController.replaceBuffer) {\n                            bufferController.replaceBuffer();\n                        }\n                        switchTrack = false;\n                    } else {\n                        logger.debug('Quality has changed, get init request for representationid = ' + currentRepresentationInfo.id);\n                    }\n                    eventBus.trigger(Events.INIT_FRAGMENT_NEEDED,\n                        { representationId: currentRepresentationInfo.id, sender: instance },\n                        { streamId: streamInfo.id, mediaType: type }\n                    );\n                    checkPlaybackQuality = false;\n                } else {\n                    const replacement = replaceRequestArray.shift();\n\n                    if (replacement && replacement.isInitializationRequest()) {\n                        // To be sure the specific init segment had not already been loaded\n                        eventBus.trigger(Events.INIT_FRAGMENT_NEEDED,\n                            { representationId: replacement.representationId, sender: instance },\n                            { streamId: streamInfo.id, mediaType: type }\n                        );\n                        checkPlaybackQuality = false;\n                    } else {\n                        eventBus.trigger(Events.MEDIA_FRAGMENT_NEEDED,\n                            { seekTarget: seekTarget, replacement: replacement },\n                            { streamId: streamInfo.id, mediaType: type }\n                        );\n                        checkPlaybackQuality = true;\n                    }\n                }\n            };\n\n            setFragmentProcessState(true);\n            if (!isReplacement && checkPlaybackQuality) {\n                abrController.checkPlaybackQuality(type);\n            }\n\n            getNextFragment();\n\n        } else {\n            startScheduleTimer(500);\n        }\n    }\n\n    function validateExecutedFragmentRequest() {\n        if (!isNaN(seekTarget)) return;\n        if (!lastInitializedRepresentationInfo) return;\n        // Validate that the fragment request executed and appended into the source buffer is as\n        // good of quality as the current quality and is the correct media track.\n        const time = playbackController.getTime();\n        let safeBufferLevel = 1.5;\n\n        if (isNaN(lastInitializedRepresentationInfo.fragmentDuration)) { //fragmentDuration of representationInfo is not defined,\n            // call metrics function to have data in the latest scheduling info...\n            // if no metric, returns 0. In this case, rule will return false.\n            const schedulingInfo = dashMetrics.getCurrentSchedulingInfo(currentRepresentationInfo.mediaInfo.type);\n            safeBufferLevel = schedulingInfo ? schedulingInfo.duration * 1.5 : 1.5;\n        }\n        const request = fragmentModel.getRequests({\n            state: FragmentModel.FRAGMENT_MODEL_EXECUTED,\n            time: time + safeBufferLevel,\n            threshold: 0\n        })[0];\n\n        if (request && replaceRequestArray.indexOf(request) === -1 && !adapter.getIsTextTrack(mimeType)) {\n            const fastSwitchModeEnabled = settings.get().streaming.fastSwitchEnabled;\n            const bufferLevel = bufferController.getBufferLevel();\n            const abandonmentState = abrController.getAbandonmentStateFor(type);\n\n            // Only replace on track switch when NEVER_REPLACE\n            const trackChanged = !mediaController.isCurrentTrack(request.mediaInfo) && mediaController.getSwitchMode(request.mediaInfo.type) === Constants.TRACK_SWITCH_MODE_NEVER_REPLACE;\n            const qualityChanged = request.quality < lastInitializedRepresentationInfo.quality;\n\n            if (fastSwitchModeEnabled && (trackChanged || qualityChanged) && bufferLevel >= safeBufferLevel && abandonmentState !== MetricsConstants.ABANDON_LOAD) {\n                replaceRequest(request);\n                isReplacementRequest = true;\n                logger.debug('Reloading outdated fragment at index: ', request.index);\n            } else if (request.quality > lastInitializedRepresentationInfo.quality && !replacingBuffer) {\n                // The buffer has better quality it in then what we would request so set append point to end of buffer!!\n                setSeekTarget(playbackController.getTime() + bufferLevel);\n            }\n        }\n    }\n\n    function startScheduleTimer(value) {\n        clearTimeout(scheduleTimeout);\n\n        scheduleTimeout = setTimeout(schedule, value);\n    }\n\n    function setFragmentProcessState (state) {\n        if (isFragmentProcessingInProgress !== state ) {\n            isFragmentProcessingInProgress = state;\n        } else {\n            logger.debug('isFragmentProcessingInProgress is already equal to', state);\n        }\n    }\n\n    function processInitRequest(request) {\n        if (request) {\n            setFragmentProcessState(true);\n            fragmentModel.executeRequest(request);\n        }\n    }\n\n    function processMediaRequest(request) {\n        if (request) {\n            logger.debug('Next fragment request url is ' + request.url);\n            fragmentModel.executeRequest(request);\n        } else { // Use case - Playing at the bleeding live edge and frag is not available yet. Cycle back around.\n            if (playbackController.getIsDynamic()) {\n                logger.debug('Next fragment seems to be at the bleeding live edge and is not available yet. Rescheduling.');\n            }\n            setFragmentProcessState(false);\n            startScheduleTimer(settings.get().streaming.lowLatencyEnabled ? 100 : 500);\n        }\n    }\n\n    function switchTrackAsked() {\n        switchTrack = true;\n    }\n\n    function replaceRequest(request) {\n        replaceRequestArray.push(request);\n    }\n\n    function completeQualityChange(trigger) {\n        if (playbackController && fragmentModel) {\n            const item = fragmentModel.getRequests({\n                state: FragmentModel.FRAGMENT_MODEL_EXECUTED,\n                time: playbackController.getTime(),\n                threshold: 0\n            })[0];\n            if (item && playbackController.getTime() >= item.startTime) {\n                if ((!lastFragmentRequest.mediaInfo || (item.mediaInfo.type === lastFragmentRequest.mediaInfo.type && item.mediaInfo.id !== lastFragmentRequest.mediaInfo.id)) && trigger) {\n                    eventBus.trigger(Events.TRACK_CHANGE_RENDERED, {\n                        mediaType: type,\n                        oldMediaInfo: lastFragmentRequest.mediaInfo,\n                        newMediaInfo: item.mediaInfo\n                    });\n                }\n                if ((item.quality !== lastFragmentRequest.quality || item.adaptationIndex !== lastFragmentRequest.adaptationIndex) && trigger) {\n                    eventBus.trigger(Events.QUALITY_CHANGE_RENDERED, {\n                        mediaType: type,\n                        oldQuality: lastFragmentRequest.quality,\n                        newQuality: item.quality\n                    });\n                }\n                lastFragmentRequest = {\n                    mediaInfo: item.mediaInfo,\n                    quality: item.quality,\n                    adaptationIndex: item.adaptationIndex\n                };\n            }\n        }\n    }\n\n    function onStreamCompleted() {\n        stop();\n        setFragmentProcessState(false);\n        logger.info(`Stream ${streamInfo.id} is complete`);\n    }\n\n    function onFragmentLoadingCompleted(e) {\n        if (e.request.mediaInfo.streamInfo.id !== streamInfo.id || e.request.mediaType !== type) return;\n\n        logger.info('OnFragmentLoadingCompleted - Url:', e.request ? e.request.url : 'undefined', e.request.range ? ', Range:' + e.request.range : '');\n\n        if (adapter.getIsTextTrack(mimeType)) {\n            setFragmentProcessState(false);\n        }\n\n        if (e.error && e.request.serviceLocation && !isStopped) {\n            replaceRequest(e.request);\n            setFragmentProcessState(false);\n            startScheduleTimer(0);\n        }\n\n        if (replacingBuffer) {\n            mediaRequest = e.request;\n        }\n    }\n\n    function onPlaybackTimeUpdated() {\n        completeQualityChange(true);\n    }\n\n    function onBytesAppended(e) {\n        if (replacingBuffer && !isNaN(e.startTime)) {\n            replacingBuffer = false;\n            fragmentModel.addExecutedRequest(mediaRequest);\n        }\n\n        setFragmentProcessState(false);\n        if (isNaN(e.index)) {\n            lastInitializedRepresentationInfo = bufferController.getRepresentationInfo(e.quality);\n            logger.info('[' + type + '] ' + 'lastInitializedRepresentationInfo changed to ' + e.quality);\n        }\n        if (isReplacementRequest && !isNaN(e.startTime)) {\n            //replace requests process is in progress, call schedule in n seconds.\n            //it is done in order to not add a fragment at the new quality at the end of the buffer before replace process is over.\n            //Indeed, if schedule is called too early, the executed request tested is the same that the one tested during previous schedule (at the new quality).\n            const currentTime = playbackController.getTime();\n            const fragEndTime = e.startTime + currentRepresentationInfo.fragmentDuration;\n            const safeBufferLevel = currentRepresentationInfo.fragmentDuration * 1.5;\n            if ((currentTime + safeBufferLevel) >= fragEndTime) {\n                startScheduleTimer(0);\n            } else {\n                startScheduleTimer((fragEndTime - (currentTime + safeBufferLevel)) * 1000);\n            }\n            isReplacementRequest = false;\n        } else {\n            startScheduleTimer(0);\n        }\n    }\n\n    function onFragmentLoadingAbandoned(e) {\n        logger.info('onFragmentLoadingAbandoned request: ' + e.request.url + ' has been aborted');\n        if (!playbackController.isSeeking() && !switchTrack) {\n            logger.info('onFragmentLoadingAbandoned request: ' + e.request.url + ' has to be downloaded again, origin is not seeking process or switch track call');\n            replaceRequest(e.request);\n        }\n        setFragmentProcessState(false);\n        startScheduleTimer(0);\n    }\n\n    function onDataUpdateStarted(/*e*/) {\n        // stop();\n    }\n\n    function onBufferingCompleted(/*e*/) {\n        stop();\n    }\n\n    function onBufferCleared(e) {\n        if (replacingBuffer && settings.get().streaming.flushBufferAtTrackSwitch) {\n            // For some devices (like chromecast) it is necessary to seek the video element to reset the internal decoding buffer,\n            // otherwise audio track switch will be effective only once after previous buffered track is consumed\n            playbackController.seek(playbackController.getTime() + 0.001, false, true);\n        }\n\n        // (Re)start schedule once buffer has been pruned after a QuotaExceededError\n        if (e.hasEnoughSpaceToAppend && e.quotaExceeded) {\n            start();\n        }\n    }\n\n    function onQuotaExceeded(/*e*/) {\n        // Stop scheduler (will be restarted once buffer is pruned)\n        stop();\n        setFragmentProcessState(false);\n    }\n\n    function onURLResolutionFailed() {\n        fragmentModel.abortRequests();\n        stop();\n    }\n\n    function onPlaybackStarted() {\n        if (isStopped || !settings.get().streaming.scheduleWhilePaused) {\n            start();\n        }\n    }\n\n    function onPlaybackSeeking(e) {\n        if (!streamInfo) return;\n        setSeekTarget(e.seekTime);\n        setTimeToLoadDelay(0);\n\n        if (isStopped) {\n            start();\n        }\n\n        const latency = currentRepresentationInfo && currentRepresentationInfo.DVRWindow && playbackController ? currentRepresentationInfo.DVRWindow.end - playbackController.getTime() : NaN;\n        dashMetrics.updateManifestUpdateInfo({\n            latency: latency\n        });\n\n        if (!isFragmentProcessingInProgress) {\n            // No pending request, request next segment at seek target\n            startScheduleTimer(0);\n        } else {\n            // Abort current request\n            fragmentModel.abortRequests();\n        }\n    }\n\n    function onPlaybackRateChanged(e) {\n        dashMetrics.updatePlayListTraceMetrics({playbackspeed: e.playbackRate.toString()});\n    }\n\n    function setSeekTarget(value) {\n        seekTarget = value;\n    }\n\n    function setTimeToLoadDelay(value) {\n        timeToLoadDelay = value;\n    }\n\n    function getTimeToLoadDelay() {\n        return timeToLoadDelay;\n    }\n\n    function getBufferTarget() {\n        return bufferLevelRule.getBufferTarget(type, currentRepresentationInfo, hasVideoTrack);\n    }\n\n    function resetInitialSettings() {\n        checkPlaybackQuality = true;\n        isFragmentProcessingInProgress = false;\n        timeToLoadDelay = 0;\n        seekTarget = NaN;\n        initialRequest = true;\n        lastInitializedRepresentationInfo = undefined;\n        lastFragmentRequest = {\n            mediaInfo: undefined,\n            quality: NaN,\n            adaptationIndex: NaN\n        };\n        topQualityIndex = {};\n        replaceRequestArray = [];\n        isStopped = true;\n        switchTrack = false;\n        replacingBuffer = false;\n        mediaRequest = null;\n        isReplacementRequest = false;\n    }\n\n    function reset() {\n        //eventBus.off(Events.LIVE_EDGE_SEARCH_COMPLETED, onLiveEdgeSearchCompleted, this);\n        eventBus.off(Events.DATA_UPDATE_STARTED, onDataUpdateStarted, this);\n        eventBus.off(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);\n        eventBus.off(Events.STREAM_COMPLETED, onStreamCompleted, this);\n        eventBus.off(Events.BUFFER_CLEARED, onBufferCleared, this);\n        eventBus.off(Events.BYTES_APPENDED_END_FRAGMENT, onBytesAppended, this);\n        eventBus.off(Events.QUOTA_EXCEEDED, onQuotaExceeded, this);\n        eventBus.off(Events.PLAYBACK_SEEKING, onPlaybackSeeking, this);\n        eventBus.off(Events.PLAYBACK_STARTED, onPlaybackStarted, this);\n        eventBus.off(Events.PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this);\n        eventBus.off(Events.PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this);\n        eventBus.off(Events.URL_RESOLUTION_FAILED, onURLResolutionFailed, this);\n        eventBus.off(Events.FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, this);\n        eventBus.off(Events.BUFFERING_COMPLETED, onBufferingCompleted, this);\n\n        stop();\n        completeQualityChange(false);\n        resetInitialSettings();\n        streamInfo = null;\n    }\n\n    function getPlaybackController() {\n        return playbackController;\n    }\n\n    instance = {\n        initialize: initialize,\n        getType: getType,\n        getStreamId: getStreamId,\n        setCurrentRepresentation: setCurrentRepresentation,\n        setSeekTarget: setSeekTarget,\n        setTimeToLoadDelay: setTimeToLoadDelay,\n        getTimeToLoadDelay: getTimeToLoadDelay,\n        switchTrackAsked: switchTrackAsked,\n        isStarted: isStarted,\n        start: start,\n        stop: stop,\n        reset: reset,\n        getBufferTarget: getBufferTarget,\n        processInitRequest: processInitRequest,\n        processMediaRequest: processMediaRequest,\n        getPlaybackController\n    };\n\n    setup();\n\n    return instance;\n}\n\nScheduleController.__dashjs_factory_name = 'ScheduleController';\nexport default FactoryMaker.getClassFactory(ScheduleController);\n"]}