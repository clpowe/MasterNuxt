{"version":3,"sources":["../../../../../../../src/streaming/rules/abr/lolp/LoLpQoEEvaluator.js"],"names":["LoLpQoeEvaluator","instance","voPerSegmentQoeInfo","segmentDuration","maxBitrateKbps","minBitrateKbps","_setup","_resetInitialSettings","setupPerSegmentQoe","sDuration","maxBrKbps","minBrKbps","_createQoeInfo","fragmentType","fragmentDuration","qoeInfo","QoeInfo","type","weights","bitrateReward","bitrateSwitchPenalty","rebufferPenalty","latencyPenalty","push","threshold","penalty","playbackSpeedPenalty","logSegmentMetrics","segmentBitrate","segmentRebufferTime","currentLatency","currentPlaybackSpeed","_logMetricsInQoeInfo","bitrate","rebufferTime","latency","playbackSpeed","bitrateWSum","lastBitrate","bitrateSwitchWSum","Math","abs","rebufferWSum","i","length","latencyRange","latencyWSum","playbackSpeedWSum","totalQoe","getPerSegmentQoe","calculateSingleUseQoe","singleUseQoeInfo","reset","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"LoLpQoEEvaluator.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Authors:\n * Abdelhak Bentaleb | National University of Singapore | bentaleb@comp.nus.edu.sg\n * Mehmet N. Akcay | Ozyegin University | necmettin.akcay@ozu.edu.tr\n * May Lim | National University of Singapore | maylim@comp.nus.edu.sg\n */\nimport FactoryMaker from '../../../../core/FactoryMaker';\nimport QoeInfo from './QoeInfo';\n\nfunction LoLpQoeEvaluator() {\n\n    let instance,\n        voPerSegmentQoeInfo,\n        segmentDuration,\n        maxBitrateKbps,\n        minBitrateKbps;\n\n    function _setup() {\n        _resetInitialSettings();\n    }\n\n    function _resetInitialSettings() {\n        voPerSegmentQoeInfo = null;\n        segmentDuration = null;\n        maxBitrateKbps = null;\n        minBitrateKbps = null;\n    }\n\n    function setupPerSegmentQoe(sDuration, maxBrKbps, minBrKbps) {\n        // Set up Per Segment QoeInfo\n        voPerSegmentQoeInfo = _createQoeInfo('segment', sDuration, maxBrKbps, minBrKbps);\n        segmentDuration = sDuration;\n        maxBitrateKbps = maxBrKbps;\n        minBitrateKbps = minBrKbps;\n    }\n\n    function _createQoeInfo(fragmentType, fragmentDuration, maxBitrateKbps, minBitrateKbps) {\n        /*\n         * [Weights][Source: Abdelhak Bentaleb, 2020 (last updated: 30 Mar 2020)]\n         * bitrateReward:           segment duration, e.g. 0.5s\n         * bitrateSwitchPenalty:    0.02s or 1s if the bitrate switch is too important\n         * rebufferPenalty:         max encoding bitrate, e.g. 1000kbps\n         * latencyPenalty:          if L â‰¤ 1.1 seconds then = min encoding bitrate * 0.05, otherwise = max encoding bitrate * 0.1\n         * playbackSpeedPenalty:    min encoding bitrate, e.g. 200kbps\n         */\n\n        // Create new QoeInfo object\n        let qoeInfo = new QoeInfo();\n        qoeInfo.type = fragmentType;\n\n        // Set weight: bitrateReward\n        // set some safe value, else consider throwing error\n        if (!fragmentDuration) {\n            qoeInfo.weights.bitrateReward = 1;\n        }\n        else {\n            qoeInfo.weights.bitrateReward = fragmentDuration;\n        }\n\n        // Set weight: bitrateSwitchPenalty\n        // qoeInfo.weights.bitrateSwitchPenalty = 0.02;\n        qoeInfo.weights.bitrateSwitchPenalty = 1;\n\n        // Set weight: rebufferPenalty\n        // set some safe value, else consider throwing error\n        if (!maxBitrateKbps) {\n            qoeInfo.weights.rebufferPenalty = 1000;\n        }\n        else {\n            qoeInfo.weights.rebufferPenalty = maxBitrateKbps;\n        }\n\n        // Set weight: latencyPenalty\n        qoeInfo.weights.latencyPenalty = [];\n        qoeInfo.weights.latencyPenalty.push({ threshold: 1.1, penalty: (minBitrateKbps * 0.05) });\n        qoeInfo.weights.latencyPenalty.push({ threshold: 100000000, penalty: (maxBitrateKbps * 0.1) });\n\n        // Set weight: playbackSpeedPenalty\n        if (!minBitrateKbps) qoeInfo.weights.playbackSpeedPenalty = 200;   // set some safe value, else consider throwing error\n        else qoeInfo.weights.playbackSpeedPenalty = minBitrateKbps;\n\n        return qoeInfo;\n    }\n\n    function logSegmentMetrics(segmentBitrate, segmentRebufferTime, currentLatency, currentPlaybackSpeed) {\n        if (voPerSegmentQoeInfo) {\n            _logMetricsInQoeInfo(segmentBitrate, segmentRebufferTime, currentLatency, currentPlaybackSpeed, voPerSegmentQoeInfo);\n        }\n    }\n\n    function _logMetricsInQoeInfo(bitrate, rebufferTime, latency, playbackSpeed, qoeInfo) {\n        // Update: bitrate Weighted Sum value\n        qoeInfo.bitrateWSum += (qoeInfo.weights.bitrateReward * bitrate);\n\n        // Update: bitrateSwitch Weighted Sum value\n        if (qoeInfo.lastBitrate) {\n            qoeInfo.bitrateSwitchWSum += (qoeInfo.weights.bitrateSwitchPenalty * Math.abs(bitrate - qoeInfo.lastBitrate));\n        }\n        qoeInfo.lastBitrate = bitrate;\n\n        // Update: rebuffer Weighted Sum value\n        qoeInfo.rebufferWSum += (qoeInfo.weights.rebufferPenalty * rebufferTime);\n\n        // Update: latency Weighted Sum value\n        for (let i = 0; i < qoeInfo.weights.latencyPenalty.length; i++) {\n            let latencyRange = qoeInfo.weights.latencyPenalty[i];\n            if (latency <= latencyRange.threshold) {\n                qoeInfo.latencyWSum += (latencyRange.penalty * latency);\n                break;\n            }\n        }\n\n        // Update: playbackSpeed Weighted Sum value\n        qoeInfo.playbackSpeedWSum += (qoeInfo.weights.playbackSpeedPenalty * Math.abs(1 - playbackSpeed));\n\n        // Update: Total Qoe value\n        qoeInfo.totalQoe = qoeInfo.bitrateWSum - qoeInfo.bitrateSwitchWSum - qoeInfo.rebufferWSum - qoeInfo.latencyWSum - qoeInfo.playbackSpeedWSum;\n    }\n\n    // Returns current Per Segment QoeInfo\n    function getPerSegmentQoe() {\n        return voPerSegmentQoeInfo;\n    }\n\n    // For one-time use only\n    // Returns totalQoe based on a single set of metrics.\n    function calculateSingleUseQoe(segmentBitrate, segmentRebufferTime, currentLatency, currentPlaybackSpeed) {\n        let singleUseQoeInfo = null;\n\n        if (segmentDuration && maxBitrateKbps && minBitrateKbps) {\n            singleUseQoeInfo = _createQoeInfo('segment', segmentDuration, maxBitrateKbps, minBitrateKbps);\n        }\n\n        if (singleUseQoeInfo) {\n            _logMetricsInQoeInfo(segmentBitrate, segmentRebufferTime, currentLatency, currentPlaybackSpeed, singleUseQoeInfo);\n            return singleUseQoeInfo.totalQoe;\n        } else {\n            // Something went wrong..\n            return 0;\n        }\n    }\n\n    function reset() {\n        _resetInitialSettings();\n    }\n\n    instance = {\n        setupPerSegmentQoe,\n        logSegmentMetrics,\n        getPerSegmentQoe,\n        calculateSingleUseQoe,\n        reset\n    };\n\n    _setup();\n\n    return instance;\n}\n\nLoLpQoeEvaluator.__dashjs_factory_name = 'LoLpQoeEvaluator';\nexport default FactoryMaker.getClassFactory(LoLpQoeEvaluator);\n\n"]}