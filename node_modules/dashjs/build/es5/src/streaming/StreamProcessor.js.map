{"version":3,"sources":["../../../../src/streaming/StreamProcessor.js"],"names":["StreamProcessor","config","context","eventBus","getInstance","streamInfo","type","errHandler","mimeType","timelineConverter","adapter","manifestModel","mediaPlayerModel","fragmentModel","abrController","playbackController","mediaController","textController","dashMetrics","settings","boxParser","instance","logger","isDynamic","mediaInfo","mediaInfoArr","bufferController","scheduleController","representationController","liveEdgeFinder","indexHandler","bufferingTime","bufferPruned","setup","getLogger","resetInitialSettings","on","Events","DATA_UPDATE_COMPLETED","onDataUpdateCompleted","priority","EventBus","EVENT_PRIORITY_HIGH","QUALITY_CHANGE_REQUESTED","onQualityChanged","INIT_FRAGMENT_NEEDED","onInitFragmentNeeded","MEDIA_FRAGMENT_NEEDED","onMediaFragmentNeeded","MEDIA_FRAGMENT_LOADED","onMediaFragmentLoaded","BUFFER_LEVEL_UPDATED","onBufferLevelUpdated","BUFFER_LEVEL_STATE_CHANGED","onBufferLevelStateChanged","BUFFER_CLEARED","onBufferCleared","QUOTA_EXCEEDED","onQuotaExceeded","SEEK_TARGET","onSeekTarget","initialize","mediaSource","hasVideoTrack","create","baseURLController","events","errors","Errors","debug","requestModifier","dashConstants","DashConstants","constants","Constants","urlUtils","manifestInfo","registerStreamType","createBufferControllerForType","getStreamId","id","getType","reset","errored","keepBuffers","unRegisterStreamType","off","isUpdating","e","error","setCurrentRepresentation","convertDataToRepresentationInfo","currentRepresentation","code","SEGMENTS_UPDATE_FAILED_ERROR_CODE","activeStreamId","getStreamController","getActiveStreamInfo","addDVRMetric","representationInfo","getRepresentationInfo","newQuality","pushPlayListTraceMetrics","Date","PlayListTrace","REPRESENTATION_SWITCH_STOP_REASON","createPlaylistTraceMetrics","getTime","getPlaybackRate","addBufferLevel","bufferLevel","getValue","doNotUpdateDVRWindowOnBufferUpdated","addBufferState","state","getBufferTarget","MetricsConstants","BUFFER_EMPTY","isSeeking","REBUFFERING_REASON","syncExecutedRequestsWithBufferedRange","getBuffer","getAllBufferRanges","duration","from","quotaExceededTime","range","calcSegmentAvailabilityRange","getCurrentRepresentation","addDVRInfo","getRepresentationController","setBuffer","buffer","getBufferController","getFragmentModel","updateStreamInfo","newStreamInfo","get","streaming","useAppendWindow","updateAppendWindow","getStreamInfo","selectMediaInfo","newMediaInfo","newRealAdaptation","getRealAdaptation","voRepresentations","getVoRepresentations","realAdaptation","getData","maxQuality","getTopQualityIndexFor","minIdx","getMinAllowedIndexFor","quality","averageThroughput","bitrate","FRAGMENTED_TEXT","getThroughputHistory","getAverageThroughput","getInitialBitrateFor","getQualityForBitrate","getQualityFor","undefined","setMimeType","updateData","addMediaInfo","selectNewMediaInfo","indexOf","push","getMediaInfoArr","getMediaInfo","getMediaSource","setMediaSource","dischargePreBuffer","getScheduleController","voRepresentation","getRepresentationForQuality","isBufferingCompleted","getIsBufferingCompleted","getBufferLevel","sender","getIsTextTrack","isTextEnabled","representationId","appendInitSegment","request","getInitRequest","processInitRequest","getIsPruningInProgress","findNextRequest","seekTarget","replacement","setSeekTarget","NaN","isNaN","startTime","delayLoadingTime","getTimeToLoadDelay","setTimeToLoadDelay","processMediaRequest","probeNextRequest","representation","getNextSegmentRequestIdempotent","requestToReplace","hasSeekTarget","currentTime","getNormalizedTime","time","bufferIsDivided","getRangeAt","playingRange","start","end","hasDiscontinuities","hasDiscontinuitiesAfter","removeExecutedRequestsAfterTime","getFragmentRequest","timeThreshold","ignoreIsFinished","useTime","keepIdx","action","FragmentRequest","ACTION_COMPLETE","isFragmentLoaded","chunk","bytes","eventStreamMedia","getEventsFor","eventStreamTrack","length","getRequests","FragmentModel","FRAGMENT_MODEL_EXECUTED","index","handleInbandEvents","trigger","INBAND_EVENTS","streamId","data","mediaInbandEvents","trackInbandEvents","eventStreams","inbandEvents","concat","i","ln","schemeIdUri","value","isoFile","parse","eventBoxes","getBoxes","sidx","getBox","mediaAnchorTime","earliest_presentation_time","timescale","mediaStartTime","fragmentMediaStartTime","Math","max","event","getEvent","createBuffer","previousBuffers","switchTrackAsked","controller","DashJSError","MEDIASOURCE_TYPE_UNSUPPORTED_CODE","MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE","VIDEO","AUDIO","getLiveStartTime","liveStartTime","currentRepresentationInfo","liveEdge","getLiveEdge","findRequestForLiveEdge","lowLatencyEnabled","getLiveDelay","liveDelay","dvrWindowSize","DVRWindowSize","dvrWindowSafetyMargin","isFinite","setLiveDelay","setBufferingTime","resetIndexHandler","resetIndex","options","fragRequest","getSegmentRequestForTime","getNextSegmentRequest","finalisePlayList","reason","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"StreamProcessor.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from './constants/Constants';\nimport DashConstants from '../dash/constants/DashConstants';\nimport MetricsConstants from './constants/MetricsConstants';\nimport FragmentModel from './models/FragmentModel';\nimport BufferController from './controllers/BufferController';\nimport TextBufferController from './text/TextBufferController';\nimport ScheduleController from './controllers/ScheduleController';\nimport RepresentationController from '../dash/controllers/RepresentationController';\nimport LiveEdgeFinder from './utils/LiveEdgeFinder';\nimport FactoryMaker from '../core/FactoryMaker';\nimport {checkInteger} from './utils/SupervisorTools';\nimport EventBus from '../core/EventBus';\nimport Events from '../core/events/Events';\nimport DashHandler from '../dash/DashHandler';\nimport Errors from '../core/errors/Errors';\nimport DashJSError from './vo/DashJSError';\nimport Debug from '../core/Debug';\nimport RequestModifier from './utils/RequestModifier';\nimport URLUtils from '../streaming/utils/URLUtils';\nimport BoxParser from './utils/BoxParser';\nimport FragmentRequest from './vo/FragmentRequest';\nimport {PlayListTrace} from './vo/metrics/PlayList';\n\nfunction StreamProcessor(config) {\n\n    config = config || {};\n    let context = this.context;\n    let eventBus = EventBus(context).getInstance();\n\n    let streamInfo = config.streamInfo;\n    let type = config.type;\n    let errHandler = config.errHandler;\n    let mimeType = config.mimeType;\n    let timelineConverter = config.timelineConverter;\n    let adapter = config.adapter;\n    let manifestModel = config.manifestModel;\n    let mediaPlayerModel = config.mediaPlayerModel;\n    let fragmentModel = config.fragmentModel;\n    let abrController = config.abrController;\n    let playbackController = config.playbackController;\n    let mediaController = config.mediaController;\n    let textController = config.textController;\n    let dashMetrics = config.dashMetrics;\n    let settings = config.settings;\n    let boxParser = config.boxParser;\n\n    let instance,\n        logger,\n        isDynamic,\n        mediaInfo,\n        mediaInfoArr,\n        bufferController,\n        scheduleController,\n        representationController,\n        liveEdgeFinder,\n        indexHandler,\n        bufferingTime,\n        bufferPruned;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        resetInitialSettings();\n\n        eventBus.on(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance, { priority: EventBus.EVENT_PRIORITY_HIGH }); // High priority to be notified before Stream\n        eventBus.on(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);\n        eventBus.on(Events.INIT_FRAGMENT_NEEDED, onInitFragmentNeeded, instance);\n        eventBus.on(Events.MEDIA_FRAGMENT_NEEDED, onMediaFragmentNeeded, instance);\n        eventBus.on(Events.MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, instance);\n        eventBus.on(Events.BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance);\n        eventBus.on(Events.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, instance);\n        eventBus.on(Events.BUFFER_CLEARED, onBufferCleared, instance);\n        eventBus.on(Events.QUOTA_EXCEEDED, onQuotaExceeded, instance);\n        eventBus.on(Events.SEEK_TARGET, onSeekTarget, instance);\n    }\n\n    function initialize(mediaSource, hasVideoTrack) {\n        indexHandler = DashHandler(context).create({\n            streamInfo: streamInfo,\n            type: type,\n            timelineConverter: timelineConverter,\n            dashMetrics: dashMetrics,\n            mediaPlayerModel: mediaPlayerModel,\n            baseURLController: config.baseURLController,\n            errHandler: errHandler,\n            settings: settings,\n            boxParser: boxParser,\n            events: Events,\n            eventBus: eventBus,\n            errors: Errors,\n            debug: Debug(context).getInstance(),\n            requestModifier: RequestModifier(context).getInstance(),\n            dashConstants: DashConstants,\n            constants: Constants,\n            urlUtils: URLUtils(context).getInstance()\n        });\n\n        // Create live edge finder for dynamic streams\n        isDynamic = streamInfo.manifestInfo.isDynamic;\n        if (isDynamic) {\n            liveEdgeFinder = LiveEdgeFinder(context).create({\n                timelineConverter: timelineConverter\n            });\n        }\n\n        // Create/initialize controllers\n        indexHandler.initialize(isDynamic);\n        abrController.registerStreamType(type, instance);\n\n        representationController = RepresentationController(context).create({\n            streamInfo: streamInfo,\n            type: type,\n            abrController: abrController,\n            dashMetrics: dashMetrics,\n            playbackController: playbackController,\n            timelineConverter: timelineConverter,\n            dashConstants: DashConstants,\n            events: Events,\n            eventBus: eventBus,\n            errors: Errors\n        });\n\n        bufferController = createBufferControllerForType(type);\n        if (bufferController) {\n            bufferController.initialize(mediaSource);\n        }\n\n        scheduleController = ScheduleController(context).create({\n            streamInfo: streamInfo,\n            type: type,\n            mimeType: mimeType,\n            adapter: adapter,\n            dashMetrics: dashMetrics,\n            mediaPlayerModel: mediaPlayerModel,\n            fragmentModel: fragmentModel,\n            abrController: abrController,\n            playbackController: playbackController,\n            textController: textController,\n            mediaController: mediaController,\n            bufferController: bufferController,\n            settings: settings\n        });\n\n        scheduleController.initialize(hasVideoTrack);\n\n        bufferingTime = 0;\n        bufferPruned = false;\n    }\n\n    function getStreamId() {\n        return streamInfo.id;\n    }\n\n    function getType() {\n        return type;\n    }\n\n    function resetInitialSettings() {\n        mediaInfoArr = [];\n        mediaInfo = null;\n        bufferingTime = 0;\n    }\n\n    function reset(errored, keepBuffers) {\n        if (indexHandler) {\n            indexHandler.reset();\n        }\n\n        if (bufferController) {\n            bufferController.reset(errored, keepBuffers);\n            bufferController = null;\n        }\n\n        if (scheduleController) {\n            scheduleController.reset();\n            scheduleController = null;\n        }\n\n        if (representationController) {\n            representationController.reset();\n            representationController = null;\n        }\n\n        if (liveEdgeFinder) {\n            liveEdgeFinder.reset();\n            liveEdgeFinder = null;\n        }\n\n        if (abrController && !keepBuffers) {\n            abrController.unRegisterStreamType(type);\n        }\n\n        eventBus.off(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);\n        eventBus.off(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);\n        eventBus.off(Events.INIT_FRAGMENT_NEEDED, onInitFragmentNeeded, instance);\n        eventBus.off(Events.MEDIA_FRAGMENT_NEEDED, onMediaFragmentNeeded, instance);\n        eventBus.off(Events.MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, instance);\n        eventBus.off(Events.BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance);\n        eventBus.off(Events.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, instance);\n        eventBus.off(Events.BUFFER_CLEARED, onBufferCleared, instance);\n        eventBus.off(Events.SEEK_TARGET, onSeekTarget, instance);\n\n        resetInitialSettings();\n        type = null;\n        streamInfo = null;\n    }\n\n    function isUpdating() {\n        return representationController ? representationController.isUpdating() : false;\n    }\n\n\n    function onDataUpdateCompleted(e) {\n        if (!e.error) {\n            // Update representation if no error\n            scheduleController.setCurrentRepresentation(adapter.convertDataToRepresentationInfo(e.currentRepresentation));\n        }\n        if (!e.error || e.error.code === Errors.SEGMENTS_UPDATE_FAILED_ERROR_CODE) {\n            // Update has been postponed, update nevertheless DVR info\n            const activeStreamId = playbackController.getStreamController().getActiveStreamInfo().id;\n            if (activeStreamId === streamInfo.id) {\n                addDVRMetric();\n            }\n        }\n    }\n\n    function onQualityChanged(e) {\n        let representationInfo = getRepresentationInfo(e.newQuality);\n        scheduleController.setCurrentRepresentation(representationInfo);\n        dashMetrics.pushPlayListTraceMetrics(new Date(), PlayListTrace.REPRESENTATION_SWITCH_STOP_REASON);\n        dashMetrics.createPlaylistTraceMetrics(representationInfo.id, playbackController.getTime() * 1000, playbackController.getPlaybackRate());\n    }\n\n    function onBufferLevelUpdated(e) {\n        dashMetrics.addBufferLevel(type, new Date(), e.bufferLevel * 1000);\n        const activeStreamId = playbackController.getStreamController().getActiveStreamInfo().id;\n        if (!manifestModel.getValue().doNotUpdateDVRWindowOnBufferUpdated && streamInfo.id === activeStreamId) {\n            addDVRMetric();\n        }\n    }\n\n    function onBufferLevelStateChanged(e) {\n        dashMetrics.addBufferState(type, e.state, scheduleController.getBufferTarget());\n        if (e.state === MetricsConstants.BUFFER_EMPTY && !playbackController.isSeeking()) {\n            // logger.info('Buffer is empty! Stalling!');\n            dashMetrics.pushPlayListTraceMetrics(new Date(), PlayListTrace.REBUFFERING_REASON);\n        }\n    }\n\n    function onBufferCleared(e) {\n        // Remove executed requests not buffered anymore\n        fragmentModel.syncExecutedRequestsWithBufferedRange(\n            bufferController.getBuffer().getAllBufferRanges(),\n            streamInfo.duration);\n\n        // If buffer removed ahead current time (QuotaExceededError or automatic buffer pruning) then adjust current index handler time\n        if (e.from > playbackController.getTime()) {\n            bufferingTime = e.from;\n            bufferPruned = true;\n        }\n    }\n\n    function onQuotaExceeded(e) {\n        bufferingTime = e.quotaExceededTime;\n        bufferPruned = true;\n    }\n\n    function addDVRMetric() {\n        const manifestInfo = streamInfo.manifestInfo;\n        const isDynamic = manifestInfo.isDynamic;\n        const range = timelineConverter.calcSegmentAvailabilityRange(representationController.getCurrentRepresentation(), isDynamic);\n        dashMetrics.addDVRInfo(getType(), playbackController.getTime(), manifestInfo, range);\n    }\n\n    function getRepresentationController() {\n        return representationController;\n    }\n\n    function getBuffer() {\n        return bufferController ? bufferController.getBuffer() : null;\n    }\n\n    function setBuffer(buffer) {\n        bufferController.setBuffer(buffer);\n    }\n\n    function getBufferController() {\n        return bufferController;\n    }\n\n    function getFragmentModel() {\n        return fragmentModel;\n    }\n\n    function updateStreamInfo(newStreamInfo) {\n        streamInfo = newStreamInfo;\n        if (settings.get().streaming.useAppendWindow) {\n            bufferController.updateAppendWindow();\n        }\n    }\n\n    function getStreamInfo() {\n        return streamInfo;\n    }\n\n    function selectMediaInfo(newMediaInfo) {\n        if (newMediaInfo !== mediaInfo && (!newMediaInfo || !mediaInfo || (newMediaInfo.type === mediaInfo.type))) {\n            mediaInfo = newMediaInfo;\n        }\n\n        const newRealAdaptation = adapter.getRealAdaptation(streamInfo, mediaInfo);\n        const voRepresentations = adapter.getVoRepresentations(mediaInfo);\n\n        if (representationController) {\n            const realAdaptation = representationController.getData();\n            const maxQuality = abrController.getTopQualityIndexFor(type, streamInfo.id);\n            const minIdx = abrController.getMinAllowedIndexFor(type);\n\n            let quality,\n                averageThroughput;\n            let bitrate = null;\n\n            if ((realAdaptation === null || (realAdaptation.id != newRealAdaptation.id)) && type !== Constants.FRAGMENTED_TEXT) {\n                averageThroughput = abrController.getThroughputHistory().getAverageThroughput(type);\n                bitrate = averageThroughput || abrController.getInitialBitrateFor(type);\n                quality = abrController.getQualityForBitrate(mediaInfo, bitrate);\n            } else {\n                quality = abrController.getQualityFor(type);\n            }\n\n            if (minIdx !== undefined && quality < minIdx) {\n                quality = minIdx;\n            }\n            if (quality > maxQuality) {\n                quality = maxQuality;\n            }\n            indexHandler.setMimeType(mediaInfo ? mediaInfo.mimeType : null);\n            representationController.updateData(newRealAdaptation, voRepresentations, type, quality);\n        }\n    }\n\n    function addMediaInfo(newMediaInfo, selectNewMediaInfo) {\n        if (mediaInfoArr.indexOf(newMediaInfo) === -1) {\n            mediaInfoArr.push(newMediaInfo);\n        }\n\n        if (selectNewMediaInfo) {\n            this.selectMediaInfo(newMediaInfo);\n        }\n    }\n\n    function getMediaInfoArr() {\n        return mediaInfoArr;\n    }\n\n    function getMediaInfo() {\n        return mediaInfo;\n    }\n\n    function getMediaSource() {\n        return bufferController.getMediaSource();\n    }\n\n    function setMediaSource(mediaSource) {\n        bufferController.setMediaSource(mediaSource, getMediaInfoArr());\n    }\n\n    function dischargePreBuffer() {\n        bufferController.dischargePreBuffer();\n    }\n\n    function getScheduleController() {\n        return scheduleController;\n    }\n\n    /**\n     * Get a specific voRepresentation. If quality parameter is defined, this function will return the voRepresentation for this quality.\n     * Otherwise, this function will return the current voRepresentation used by the representationController.\n     * @param {number} quality - quality index of the voRepresentaion expected.\n     */\n    function getRepresentationInfo(quality) {\n        let voRepresentation;\n\n        if (quality !== undefined) {\n            checkInteger(quality);\n            voRepresentation = representationController ? representationController.getRepresentationForQuality(quality) : null;\n        } else {\n            voRepresentation = representationController ? representationController.getCurrentRepresentation() : null;\n        }\n\n        return adapter.convertDataToRepresentationInfo(voRepresentation);\n    }\n\n    function isBufferingCompleted() {\n        return bufferController ? bufferController.getIsBufferingCompleted() : false;\n    }\n\n    function getBufferLevel() {\n        return bufferController ? bufferController.getBufferLevel() : 0;\n    }\n\n    function onInitFragmentNeeded(e) {\n        // Event propagation may have been stopped (see MssHandler)\n        if (!e.sender) return;\n\n        if (adapter.getIsTextTrack(mimeType) && !textController.isTextEnabled()) return;\n\n        if (bufferController && e.representationId) {\n            if (!bufferController.appendInitSegment(e.representationId)) {\n                // Init segment not in cache, send new request\n                const request = indexHandler ? indexHandler.getInitRequest(getMediaInfo(), representationController.getCurrentRepresentation()) : null;\n                scheduleController.processInitRequest(request);\n            }\n        }\n    }\n\n    function onMediaFragmentNeeded(e) {\n        let request;\n\n        // Don't schedule next fragments while pruning to avoid buffer inconsistencies\n        if (!bufferController.getIsPruningInProgress()) {\n            request = findNextRequest(e.seekTarget, e.replacement);\n            if (request) {\n                scheduleController.setSeekTarget(NaN);\n                if (!e.replacement) {\n                    if (!isNaN(request.startTime + request.duration)) {\n                        bufferingTime = request.startTime + request.duration;\n                    }\n                    request.delayLoadingTime = new Date().getTime() + scheduleController.getTimeToLoadDelay();\n                    scheduleController.setTimeToLoadDelay(0);\n                }\n            }\n        }\n\n        scheduleController.processMediaRequest(request);\n    }\n\n    /**\n     * Probe the next request. This is used in the CMCD model to get information about the upcoming request. Note: No actual request is performed here.\n     * @return {FragmentRequest|null}\n     */\n    function probeNextRequest() {\n        const representationInfo = getRepresentationInfo();\n\n        const representation = representationController && representationInfo ?\n            representationController.getRepresentationForQuality(representationInfo.quality) : null;\n\n        let request = indexHandler.getNextSegmentRequestIdempotent(\n            getMediaInfo(),\n            representation\n        );\n\n        return request;\n    }\n\n    function findNextRequest(seekTarget, requestToReplace) {\n        const representationInfo = getRepresentationInfo();\n        const hasSeekTarget = !isNaN(seekTarget);\n        const currentTime = playbackController.getNormalizedTime();\n        let time = hasSeekTarget ? seekTarget : bufferingTime;\n        let bufferIsDivided = false;\n        let request;\n\n        if (isNaN(time) || (getType() === Constants.FRAGMENTED_TEXT && !textController.isTextEnabled())) {\n            return null;\n        }\n        /**\n         * This is critical for IE/Safari/EDGE\n         * */\n        if (bufferController) {\n            let range = bufferController.getRangeAt(time);\n            const playingRange = bufferController.getRangeAt(currentTime);\n            if ((range !== null || playingRange !== null) && !hasSeekTarget) {\n                if (!range || (playingRange && playingRange.start != range.start && playingRange.end != range.end)) {\n                    const hasDiscontinuities = bufferController.getBuffer().hasDiscontinuitiesAfter(currentTime);\n                    if (hasDiscontinuities && getType() !== Constants.FRAGMENTED_TEXT) {\n                        fragmentModel.removeExecutedRequestsAfterTime(playingRange.end);\n                        bufferIsDivided = true;\n                    }\n                }\n            }\n        }\n\n        if (requestToReplace) {\n            time = requestToReplace.startTime + (requestToReplace.duration / 2);\n            request = getFragmentRequest(representationInfo, time, {\n                timeThreshold: 0,\n                ignoreIsFinished: true\n            });\n        } else {\n            // Use time just whenever is strictly needed\n            const useTime = hasSeekTarget || bufferPruned || bufferIsDivided;\n            request = getFragmentRequest(representationInfo,\n                useTime ? time : undefined, {\n                    keepIdx: !useTime\n                });\n            bufferPruned = false;\n\n            // Then, check if this request was downloaded or not\n            while (request && request.action !== FragmentRequest.ACTION_COMPLETE && fragmentModel.isFragmentLoaded(request)) {\n                // loop until we found not loaded fragment, or no fragment\n                request = getFragmentRequest(representationInfo);\n            }\n        }\n\n        return request;\n    }\n\n    function onMediaFragmentLoaded(e) {\n        const chunk = e.chunk;\n\n        const bytes = chunk.bytes;\n        const quality = chunk.quality;\n        const currentRepresentation = getRepresentationInfo(quality);\n\n        const voRepresentation = representationController && currentRepresentation ? representationController.getRepresentationForQuality(currentRepresentation.quality) : null;\n        const eventStreamMedia = adapter.getEventsFor(currentRepresentation.mediaInfo);\n        const eventStreamTrack = adapter.getEventsFor(currentRepresentation, voRepresentation);\n\n        if (eventStreamMedia && eventStreamMedia.length > 0 || eventStreamTrack && eventStreamTrack.length > 0) {\n            const request = fragmentModel.getRequests({\n                state: FragmentModel.FRAGMENT_MODEL_EXECUTED,\n                quality: quality,\n                index: chunk.index\n            })[0];\n\n            const events = handleInbandEvents(bytes, request, eventStreamMedia, eventStreamTrack);\n            eventBus.trigger(Events.INBAND_EVENTS,\n                { events: events },\n                { streamId: streamInfo.id }\n            );\n        }\n    }\n\n    function handleInbandEvents(data, request, mediaInbandEvents, trackInbandEvents) {\n        try {\n            const eventStreams = {};\n            const events = [];\n\n            /* Extract the possible schemeIdUri : If a DASH client detects an event message box with a scheme that is not defined in MPD, the client is expected to ignore it */\n            const inbandEvents = mediaInbandEvents.concat(trackInbandEvents);\n            for (let i = 0, ln = inbandEvents.length; i < ln; i++) {\n                eventStreams[inbandEvents[i].schemeIdUri + '/' + inbandEvents[i].value] = inbandEvents[i];\n            }\n\n            const isoFile = BoxParser(context).getInstance().parse(data);\n            const eventBoxes = isoFile.getBoxes('emsg');\n\n            if (!eventBoxes || eventBoxes.length === 0) {\n                return events;\n            }\n\n            const sidx = isoFile.getBox('sidx');\n            const mediaAnchorTime = sidx && !isNaN(sidx.earliest_presentation_time) && !isNaN(sidx.timescale) ? sidx.earliest_presentation_time / sidx.timescale : request && !isNaN(request.mediaStartTime) ? request.mediaStartTime : 0;\n            const fragmentMediaStartTime = Math.max(mediaAnchorTime, 0);\n            const voRepresentation = representationController.getCurrentRepresentation();\n\n            for (let i = 0, ln = eventBoxes.length; i < ln; i++) {\n                const event = adapter.getEvent(eventBoxes[i], eventStreams, fragmentMediaStartTime, voRepresentation);\n\n                if (event) {\n                    events.push(event);\n                }\n            }\n\n            return events;\n        } catch (e) {\n            return [];\n        }\n    }\n\n    function createBuffer(previousBuffers) {\n        return (getBuffer() || bufferController ? bufferController.createBuffer(mediaInfoArr, previousBuffers) : null);\n    }\n\n    function switchTrackAsked() {\n        scheduleController.switchTrackAsked();\n    }\n\n    function createBufferControllerForType(type) {\n        let controller = null;\n\n        if (!type) {\n            errHandler.error(new DashJSError(Errors.MEDIASOURCE_TYPE_UNSUPPORTED_CODE, Errors.MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE + 'not properly defined'));\n            return null;\n        }\n\n        if (type === Constants.VIDEO || type === Constants.AUDIO) {\n            controller = BufferController(context).create({\n                streamInfo: streamInfo,\n                type: type,\n                mediaPlayerModel: mediaPlayerModel,\n                manifestModel: manifestModel,\n                fragmentModel: fragmentModel,\n                errHandler: errHandler,\n                mediaController: mediaController,\n                representationController: representationController,\n                adapter: adapter,\n                textController: textController,\n                abrController: abrController,\n                playbackController: playbackController,\n                settings: settings\n            });\n        } else {\n            controller = TextBufferController(context).create({\n                streamInfo: streamInfo,\n                type: type,\n                mimeType: mimeType,\n                mediaPlayerModel: mediaPlayerModel,\n                manifestModel: manifestModel,\n                fragmentModel: fragmentModel,\n                errHandler: errHandler,\n                mediaController: mediaController,\n                representationController: representationController,\n                adapter: adapter,\n                textController: textController,\n                abrController: abrController,\n                playbackController: playbackController,\n                settings: settings\n            });\n        }\n\n        return controller;\n    }\n\n\n    function getLiveStartTime() {\n        if (!isDynamic) return NaN;\n        if (!liveEdgeFinder) return NaN;\n\n        let liveStartTime = NaN;\n        const currentRepresentationInfo = getRepresentationInfo();\n        const liveEdge = liveEdgeFinder.getLiveEdge(currentRepresentationInfo);\n\n        if (isNaN(liveEdge)) {\n            return NaN;\n        }\n\n        const request = findRequestForLiveEdge(liveEdge, currentRepresentationInfo);\n\n        if (request) {\n            // When low latency mode is selected but browser doesn't support fetch\n            // start at the beginning of the segment to avoid consuming the whole buffer\n            if (settings.get().streaming.lowLatencyEnabled) {\n                liveStartTime = request.duration < mediaPlayerModel.getLiveDelay() ? request.startTime : request.startTime + request.duration - mediaPlayerModel.getLiveDelay();\n            } else {\n                liveStartTime = request.startTime;\n            }\n        }\n\n        return liveStartTime;\n    }\n\n    function findRequestForLiveEdge(liveEdge, currentRepresentationInfo) {\n        try {\n            let request = null;\n            let liveDelay = playbackController.getLiveDelay();\n            const dvrWindowSize = !isNaN(streamInfo.manifestInfo.DVRWindowSize) ? streamInfo.manifestInfo.DVRWindowSize : liveDelay;\n            const dvrWindowSafetyMargin = 0.1 * dvrWindowSize;\n            let startTime;\n\n            // Make sure that we have at least a valid request for the end of the DVR window, otherwise we might try forever\n            if (!isFinite(dvrWindowSize) || getFragmentRequest(currentRepresentationInfo, liveEdge - dvrWindowSize + dvrWindowSafetyMargin, {\n                ignoreIsFinished: true\n            })) {\n\n                // Try to find a request as close as possible to the targeted live edge\n                while (!request && liveDelay <= dvrWindowSize) {\n                    startTime = liveEdge - liveDelay;\n                    request = getFragmentRequest(currentRepresentationInfo, startTime, {\n                        ignoreIsFinished: true\n                    });\n                    if (!request) {\n                        liveDelay += 1; // Increase by one second for each iteration\n                    }\n                }\n            }\n\n            if (request) {\n                playbackController.setLiveDelay(liveDelay, true);\n            }\n            logger.debug('live edge: ' + liveEdge + ', live delay: ' + liveDelay + ', live target: ' + startTime);\n            return request;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function onSeekTarget(e) {\n        bufferingTime = e.time;\n        scheduleController.setSeekTarget(e.time);\n    }\n\n    function setBufferingTime(value) {\n        bufferingTime = value;\n    }\n\n    function resetIndexHandler() {\n        if (indexHandler) {\n            indexHandler.resetIndex();\n        }\n    }\n\n    function getInitRequest(quality) {\n        checkInteger(quality);\n        const representation = representationController ? representationController.getRepresentationForQuality(quality) : null;\n        return indexHandler ? indexHandler.getInitRequest(getMediaInfo(), representation) : null;\n    }\n\n    function getFragmentRequest(representationInfo, time, options) {\n        let fragRequest = null;\n\n        if (indexHandler) {\n            const representation = representationController && representationInfo ? representationController.getRepresentationForQuality(representationInfo.quality) : null;\n\n            // if time and options are undefined, it means the next segment is requested\n            // otherwise, the segment at this specific time is requested.\n            if (time !== undefined && options !== undefined) {\n                fragRequest = indexHandler.getSegmentRequestForTime(getMediaInfo(), representation, time, options);\n            } else {\n                fragRequest = indexHandler.getNextSegmentRequest(getMediaInfo(), representation);\n            }\n        }\n\n        return fragRequest;\n    }\n\n    function finalisePlayList(time, reason) {\n        dashMetrics.pushPlayListTraceMetrics(time, reason);\n    }\n\n    instance = {\n        initialize: initialize,\n        getStreamId: getStreamId,\n        getType: getType,\n        isUpdating: isUpdating,\n        getBufferController: getBufferController,\n        getFragmentModel: getFragmentModel,\n        getScheduleController: getScheduleController,\n        getRepresentationController: getRepresentationController,\n        getRepresentationInfo: getRepresentationInfo,\n        getBufferLevel: getBufferLevel,\n        isBufferingCompleted: isBufferingCompleted,\n        createBuffer: createBuffer,\n        updateStreamInfo: updateStreamInfo,\n        getStreamInfo: getStreamInfo,\n        selectMediaInfo: selectMediaInfo,\n        addMediaInfo: addMediaInfo,\n        getLiveStartTime: getLiveStartTime,\n        switchTrackAsked: switchTrackAsked,\n        getMediaInfoArr: getMediaInfoArr,\n        getMediaInfo: getMediaInfo,\n        getMediaSource: getMediaSource,\n        setMediaSource: setMediaSource,\n        dischargePreBuffer: dischargePreBuffer,\n        getBuffer: getBuffer,\n        setBuffer: setBuffer,\n        setBufferingTime: setBufferingTime,\n        resetIndexHandler: resetIndexHandler,\n        getInitRequest: getInitRequest,\n        getFragmentRequest: getFragmentRequest,\n        finalisePlayList: finalisePlayList,\n        probeNextRequest: probeNextRequest,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nStreamProcessor.__dashjs_factory_name = 'StreamProcessor';\nexport default FactoryMaker.getClassFactory(StreamProcessor);\n"]}