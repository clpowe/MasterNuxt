{"version":3,"sources":["../../../../../src/streaming/models/FragmentModel.js"],"names":["FRAGMENT_MODEL_LOADING","FRAGMENT_MODEL_EXECUTED","FRAGMENT_MODEL_CANCELED","FRAGMENT_MODEL_FAILED","FragmentModel","config","eventBus","events","dashMetrics","fragmentLoader","debug","streamInfo","type","instance","logger","executedRequests","loadingRequests","setup","getLogger","resetInitialSettings","on","LOADING_COMPLETED","onLoadingCompleted","LOADING_DATA_PROGRESS","onLoadingInProgress","LOADING_ABANDONED","onLoadingAborted","getStreamId","id","getType","isFragmentLoaded","request","isEqualComplete","req1","req2","action","FragmentRequest","ACTION_COMPLETE","isEqualMedia","isNaN","index","startTime","adaptationIndex","isEqualInit","quality","check","requests","isLoaded","some","req","isFragmentLoadedOrPending","i","length","url","getRequests","filter","states","state","Array","filteredRequests","forEach","getRequestsForState","concat","filterRequests","getRequestThreshold","duration","Math","min","removeExecutedRequestsBeforeTime","time","threshold","undefined","removeExecutedRequestsAfterTime","removeExecutedRequestsInTimeRange","start","end","syncExecutedRequestsWithBufferedRange","bufferedRanges","streamDuration","ln","abortRequests","abort","executeRequest","push","addSchedulingInfoMetrics","trigger","STREAM_COMPLETED","streamId","mediaInfo","mediaType","ACTION_DOWNLOAD","loadCurrentFragment","warn","FRAGMENT_LOADING_STARTED","load","getRequestForTime","arr","lastIdx","hasOwnProperty","prop","addSchedulingInfo","addRequestsQueue","e","sender","splice","indexOf","response","error","FRAGMENT_LOADING_COMPLETED","FRAGMENT_LOADING_PROGRESS","FRAGMENT_LOADING_ABANDONED","reset","off","addExecutedRequest","__dashjs_factory_name","factory","FactoryMaker","getClassFactory","updateClassFactory"],"mappings":"sEA+BA,qD,yDACA,sD,kJAhCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkCA,GAAMA,wBAAyB,SAA/B,CACA,GAAMC,yBAA0B,UAAhC,CACA,GAAMC,yBAA0B,UAAhC,CACA,GAAMC,uBAAwB,QAA9B,CAEA,QAASC,cAAT,CAAuBC,MAAvB,CAA+B,CAE3BA,OAASA,QAAU,EAAnB,CACA,GAAMC,UAAWD,OAAOC,QAAxB,CACA,GAAMC,QAASF,OAAOE,MAAtB,CACA,GAAMC,aAAcH,OAAOG,WAA3B,CACA,GAAMC,gBAAiBJ,OAAOI,cAA9B,CACA,GAAMC,OAAQL,OAAOK,KAArB,CACA,GAAMC,YAAaN,OAAOM,UAA1B,CACA,GAAMC,MAAOP,OAAOO,IAApB,CAEA,GAAIC,gBAAJ,CACIC,aADJ,CAEIC,uBAFJ,CAGIC,sBAHJ,CAKA,QAASC,MAAT,EAAiB,CACbH,OAASJ,MAAMQ,SAAN,CAAgBL,QAAhB,CAAT,CACAM,uBACAb,SAASc,EAAT,CAAYb,OAAOc,iBAAnB,CAAsCC,kBAAtC,CAA0DT,QAA1D,EACAP,SAASc,EAAT,CAAYb,OAAOgB,qBAAnB,CAA0CC,mBAA1C,CAA+DX,QAA/D,EACAP,SAASc,EAAT,CAAYb,OAAOkB,iBAAnB,CAAsCC,gBAAtC,CAAwDb,QAAxD,EACH,CAED,QAASc,YAAT,EAAuB,CACnB,MAAOhB,YAAWiB,EAAlB,CACH,CAED,QAASC,QAAT,EAAmB,CACf,MAAOjB,KAAP,CACH,CAED,QAASkB,iBAAT,CAA0BC,OAA1B,CAAmC,CAC/B,GAAMC,iBAAkB,QAAlBA,gBAAkB,CAAUC,IAAV,CAAgBC,IAAhB,CAAsB,CAC1C,MAASD,MAAKE,MAAL,GAAgBC,0BAAgBC,eAAjC,EAAsDJ,KAAKE,MAAL,GAAgBD,KAAKC,MAAnF,CACH,CAFD,CAIA,GAAMG,cAAe,QAAfA,aAAe,CAAUL,IAAV,CAAgBC,IAAhB,CAAsB,CACvC,MAAO,CAACK,MAAMN,KAAKO,KAAX,CAAD,EAAuBP,KAAKQ,SAAL,GAAmBP,KAAKO,SAA/C,EAA8DR,KAAKS,eAAL,GAAyBR,KAAKQ,eAA5F,EAAiHT,KAAKrB,IAAL,GAAcsB,KAAKtB,IAA3I,CACH,CAFD,CAIA,GAAM+B,aAAc,QAAdA,YAAc,CAAUV,IAAV,CAAgBC,IAAhB,CAAsB,CACtC,MAAOK,OAAMN,KAAKO,KAAX,GAAqBD,MAAML,KAAKM,KAAX,CAArB,EAA2CP,KAAKW,OAAL,GAAiBV,KAAKU,OAAxE,CACH,CAFD,CAIA,GAAMC,OAAQ,QAARA,MAAQ,CAAUC,QAAV,CAAoB,CAC9B,GAAIC,UAAW,KAAf,CAEAD,SAASE,IAAT,CAAc,aAAO,CACjB,GAAIV,aAAaP,OAAb,CAAsBkB,GAAtB,GAA8BN,YAAYZ,OAAZ,CAAqBkB,GAArB,CAA9B,EAA2DjB,gBAAgBD,OAAhB,CAAyBkB,GAAzB,CAA/D,CAA8F,CAC1FF,SAAW,IAAX,CACA,MAAOA,SAAP,CACH,CACJ,CALD,EAMA,MAAOA,SAAP,CACH,CAVD,CAYA,GAAI,CAAChB,OAAL,CAAc,CACV,MAAO,MAAP,CACH,CAED,MAAOc,OAAM9B,gBAAN,CAAP,CACH,CAED,QAASmC,0BAAT,CAAmCnB,OAAnC,CAA4C,CACxC,GAAIgB,UAAW,KAAf,CACA,GAAII,GAAI,CAAR,CACA,GAAIF,WAAJ,CAEA;AACAF,SAAWjB,iBAAiBC,OAAjB,CAAX,CAEA;AACA,GAAI,CAACgB,QAAL,CAAe,CACX,IAAKI,EAAI,CAAT,CAAYA,EAAInC,gBAAgBoC,MAAhC,CAAwCD,GAAxC,CAA6C,CACzCF,IAAMjC,gBAAgBmC,CAAhB,CAAN,CACA,GAAKpB,QAAQsB,GAAR,GAAgBJ,IAAII,GAArB,EAA8BtB,QAAQU,SAAR,GAAsBQ,IAAIR,SAA5D,CAAwE,CACpEM,SAAW,IAAX,CACH,CACJ,CACJ,CAED,MAAOA,SAAP,CACH,CAED;;;;;;;;;;;;OAaA,QAASO,YAAT,CAAqBC,MAArB,CAA6B,CACzB,GAAMC,QAASD,OAASA,OAAOE,KAAP,WAAwBC,MAAxB,CAAgCH,OAAOE,KAAvC,CAA+C,CAACF,OAAOE,KAAR,CAAxD,CAAyE,EAAxF,CAEA,GAAIE,kBAAmB,EAAvB,CACAH,OAAOI,OAAP,CAAe,eAAS,CACpB,GAAMd,UAAWe,oBAAoBJ,KAApB,CAAjB,CACAE,iBAAmBA,iBAAiBG,MAAjB,CAAwBC,eAAejB,QAAf,CAAyBS,MAAzB,CAAxB,CAAnB,CACH,CAHD,EAKA,MAAOI,iBAAP,CACH,CAED,QAASK,oBAAT,CAA6Bf,GAA7B,CAAkC,CAC9B,MAAOV,OAAMU,IAAIgB,QAAV,EAAsB,IAAtB,CAA6BC,KAAKC,GAAL,CAASlB,IAAIgB,QAAJ,CAAe,CAAxB,CAA2B,GAA3B,CAApC,CACH,CAED,QAASG,iCAAT,CAA0CC,IAA1C,CAAgD,CAC5CtD,iBAAmBA,iBAAiBwC,MAAjB,CAAwB,aAAO,CAC9C,GAAMe,WAAYN,oBAAoBf,GAApB,CAAlB,CACA,MAAOV,OAAMU,IAAIR,SAAV,IAAyB4B,OAASE,SAAT,CAAqBtB,IAAIR,SAAJ,EAAiB4B,KAAOC,SAA7C,CAAyD,KAAlF,CAAP,CACH,CAHkB,CAAnB,CAIH,CAED,QAASE,gCAAT,CAAyCH,IAAzC,CAA+C,CAC3CtD,iBAAmBA,iBAAiBwC,MAAjB,CAAwB,aAAO,CAC9C,MAAOhB,OAAMU,IAAIR,SAAV,IAAyB4B,OAASE,SAAT,CAAqBtB,IAAIR,SAAJ,CAAgB4B,IAArC,CAA4C,KAArE,CAAP,CACH,CAFkB,CAAnB,CAGH,CAED,QAASI,kCAAT,CAA2CC,KAA3C,CAAkDC,GAAlD,CAAuD,CACnD,GAAIA,KAAOD,MAAQ,GAAnB,CAAwB,CACpB,OACH,CAED3D,iBAAmBA,iBAAiBwC,MAAjB,CAAwB,aAAO,CAC9C,GAAMe,WAAYN,oBAAoBf,GAApB,CAAlB,CACA,MAAQV,OAAMU,IAAIR,SAAV,GAAwBQ,IAAIR,SAAJ,EAAkBkC,IAAML,SAAjD,EACF/B,MAAMU,IAAIgB,QAAV,GAAwBhB,IAAIR,SAAJ,CAAgBQ,IAAIgB,QAArB,EAAmCS,MAAQJ,SADvE,CAEH,CAJkB,CAAnB,CAKH,CAED;AACA,QAASM,sCAAT,CAA+CC,cAA/C,CAA+DC,cAA/D,CAA+E,CAC3E,GAAI,CAACD,cAAD,EAAmBA,eAAezB,MAAf,GAA0B,CAAjD,CAAoD,CAChDgB,mCACA,OACH,CAED,GAAIM,OAAQ,CAAZ,CACA,IAAK,GAAIvB,GAAI,CAAR,CAAW4B,GAAKF,eAAezB,MAApC,CAA4CD,EAAI4B,EAAhD,CAAoD5B,GAApD,CAAyD,CACrDsB,kCAAkCC,KAAlC,CAAyCG,eAAeH,KAAf,CAAqBvB,CAArB,CAAzC,EACAuB,MAAQG,eAAeF,GAAf,CAAmBxB,CAAnB,CAAR,CACH,CACD,GAAI2B,eAAiB,CAArB,CAAwB,CACpBL,kCAAkCC,KAAlC,CAAyCI,cAAzC,EACH,CACJ,CAED,QAASE,cAAT,EAAyB,CACrBlE,OAAOJ,KAAP,CAAa,gBAAb,EACAD,eAAewE,KAAf,GACAjE,gBAAkB,EAAlB,CACH,CAED,QAASkE,eAAT,CAAwBnD,OAAxB,CAAiC,CAC7B,OAAQA,QAAQI,MAAhB,EACI,IAAKC,2BAAgBC,eAArB,CACItB,iBAAiBoE,IAAjB,CAAsBpD,OAAtB,EACAqD,yBAAyBrD,OAAzB,CAAkC9B,uBAAlC,EACAa,OAAOJ,KAAP,CAAa,kBAAb,EACAJ,SAAS+E,OAAT,CAAiB9E,OAAO+E,gBAAxB,CACI,CAAEvD,QAASA,OAAX,CADJ,CAEI,CAAEwD,SAAUxD,QAAQyD,SAAR,CAAkB7E,UAAlB,CAA6BiB,EAAzC,CAA6C6D,UAAW1D,QAAQ0D,SAAhE,CAFJ,EAIA,MACJ,IAAKrD,2BAAgBsD,eAArB,CACIN,yBAAyBrD,OAAzB,CAAkC/B,sBAAlC,EACAgB,gBAAgBmE,IAAhB,CAAqBpD,OAArB,EACA4D,oBAAoB5D,OAApB,EACA,MACJ,QACIjB,OAAO8E,IAAP,CAAY,yBAAZ,EAhBR,CAkBH,CAED,QAASD,oBAAT,CAA6B5D,OAA7B,CAAsC,CAClCzB,SAAS+E,OAAT,CAAiB9E,OAAOsF,wBAAxB,CACI,CAAE9D,QAASA,OAAX,CADJ,CAEI,CAAEwD,SAAU5E,WAAWiB,EAAvB,CAA2B6D,UAAW7E,IAAtC,CAFJ,EAIAH,eAAeqF,IAAf,CAAoB/D,OAApB,EACH,CAED,QAASgE,kBAAT,CAA2BC,GAA3B,CAAgC3B,IAAhC,CAAsCC,SAAtC,CAAiD,CAC7C;AACA,GAAM2B,SAAUD,IAAI5C,MAAJ,CAAa,CAA7B,CACA,IAAK,GAAID,GAAI8C,OAAb,CAAsB9C,GAAK,CAA3B,CAA8BA,GAA9B,CAAmC,CAC/B,GAAMF,KAAM+C,IAAI7C,CAAJ,CAAZ,CACA,GAAMuB,OAAQzB,IAAIR,SAAlB,CACA,GAAMkC,KAAMD,MAAQzB,IAAIgB,QAAxB,CACAK,UAAY,CAAC/B,MAAM+B,SAAN,CAAD,CAAoBA,SAApB,CAAgCN,oBAAoBf,GAApB,CAA5C,CACA,GAAK,CAACV,MAAMmC,KAAN,CAAD,EAAiB,CAACnC,MAAMoC,GAAN,CAAlB,EAAkCN,KAAOC,SAAR,EAAsBI,KAAvD,EAAmEL,KAAOC,SAAR,CAAqBK,GAAxF,EAAkGpC,MAAMmC,KAAN,GAAgBnC,MAAM8B,IAAN,CAAtH,CAAoI,CAChI,MAAOpB,IAAP,CACH,CACJ,CACD,MAAO,KAAP,CACH,CAED,QAASc,eAAT,CAAwBiC,GAAxB,CAA6BzC,MAA7B,CAAqC,CACjC;AACA,GAAIA,OAAO2C,cAAP,CAAsB,MAAtB,CAAJ,CAAmC,CAC/B,MAAO,CAACH,kBAAkBC,GAAlB,CAAuBzC,OAAOc,IAA9B,CAAoCd,OAAOe,SAA3C,CAAD,CAAP,CACH,CAED,MAAO0B,KAAIzC,MAAJ,CAAW,iBAAW,CACzB,IAAK,GAAM4C,KAAX,GAAmB5C,OAAnB,CAA2B,CACvB,GAAI4C,OAAS,OAAb,CAAsB,SACtB,GAAI5C,OAAO2C,cAAP,CAAsBC,IAAtB,GAA+BpE,QAAQoE,IAAR,GAAiB5C,OAAO4C,IAAP,CAApD,CAAkE,MAAO,MAAP,CACrE,CAED,MAAO,KAAP,CACH,CAPM,CAAP,CAQH,CAED,QAAStC,oBAAT,CAA6BJ,KAA7B,CAAoC,CAChC,GAAIX,gBAAJ,CACA,OAAQW,KAAR,EACI,IAAKzD,uBAAL,CACI8C,SAAW9B,eAAX,CACA,MACJ,IAAKf,wBAAL,CACI6C,SAAW/B,gBAAX,CACA,MACJ,QACI+B,SAAW,EAAX,CARR,CAUA,MAAOA,SAAP,CACH,CAED,QAASsC,yBAAT,CAAkCrD,OAAlC,CAA2C0B,KAA3C,CAAkD,CAC9CjD,YAAY4F,iBAAZ,CAA8BrE,OAA9B,CAAuC0B,KAAvC,EACAjD,YAAY6F,gBAAZ,CAA6BtE,QAAQ0D,SAArC,CAAgDzE,eAAhD,CAAiED,gBAAjE,EACH,CAED,QAASO,mBAAT,CAA4BgF,CAA5B,CAA+B,CAC3B,GAAIA,EAAEC,MAAF,GAAa9F,cAAjB,CAAiC,OAEjCO,gBAAgBwF,MAAhB,CAAuBxF,gBAAgByF,OAAhB,CAAwBH,EAAEvE,OAA1B,CAAvB,CAA2D,CAA3D,EAEA,GAAIuE,EAAEI,QAAF,EAAc,CAACJ,EAAEK,KAArB,CAA4B,CACxB5F,iBAAiBoE,IAAjB,CAAsBmB,EAAEvE,OAAxB,EACH,CAEDqD,yBAAyBkB,EAAEvE,OAA3B,CAAoCuE,EAAEK,KAAF,CAAUxG,qBAAV,CAAkCF,uBAAtE,EAEAK,SAAS+E,OAAT,CAAiB9E,OAAOqG,0BAAxB,CACI,CACI7E,QAASuE,EAAEvE,OADf,CAEI2E,SAAUJ,EAAEI,QAFhB,CAGIC,MAAOL,EAAEK,KAHb,CAIIJ,OAAQ,IAJZ,CADJ,CAOI,CAAEhB,SAAU5E,WAAWiB,EAAvB,CAA2B6D,UAAW7E,IAAtC,CAPJ,EASH,CAED,QAASY,oBAAT,CAA6B8E,CAA7B,CAAgC,CAC5B,GAAIA,EAAEC,MAAF,GAAa9F,cAAjB,CAAiC,OAEjCH,SAAS+E,OAAT,CAAiB9E,OAAOsG,yBAAxB,CACI,CACI9E,QAASuE,EAAEvE,OADf,CAEI2E,SAAUJ,EAAEI,QAFhB,CAGIC,MAAOL,EAAEK,KAHb,CAIIJ,OAAQ,IAJZ,CADJ,CAOI,CAAEhB,SAAU5E,WAAWiB,EAAvB,CAA2B6D,UAAW7E,IAAtC,CAPJ,EASH,CAED,QAASc,iBAAT,CAA0B4E,CAA1B,CAA6B,CACzB,GAAIA,EAAEC,MAAF,GAAa9F,cAAjB,CAAiC,OAEjCH,SAAS+E,OAAT,CAAiB9E,OAAOuG,0BAAxB,CACI,CAAE/E,QAASuE,EAAEvE,OAAb,CADJ,CAEI,CAAEwD,SAAU5E,WAAWiB,EAAvB,CAA2B6D,UAAW7E,IAAtC,CAFJ,EAIH,CAED,QAASO,qBAAT,EAAgC,CAC5BJ,iBAAmB,EAAnB,CACAC,gBAAkB,EAAlB,CACH,CAED,QAAS+F,MAAT,EAAiB,CACbzG,SAAS0G,GAAT,CAAazG,OAAOc,iBAApB,CAAuCC,kBAAvC,CAA2D,IAA3D,EACAhB,SAAS0G,GAAT,CAAazG,OAAOgB,qBAApB,CAA2CC,mBAA3C,CAAgE,IAAhE,EACAlB,SAAS0G,GAAT,CAAazG,OAAOkB,iBAApB,CAAuCC,gBAAvC,CAAyD,IAAzD,EAEA,GAAIjB,cAAJ,CAAoB,CAChBA,eAAesG,KAAf,GACH,CACD5F,uBACH,CAED,QAAS8F,mBAAT,CAA4BlF,OAA5B,CAAqC,CACjChB,iBAAiBoE,IAAjB,CAAsBpD,OAAtB,EACH,CAEDlB,SAAW,CACPc,YAAaA,WADN,CAEPE,QAASA,OAFF,CAGPyB,YAAaA,WAHN,CAIPxB,iBAAkBA,gBAJX,CAKPoB,0BAA2BA,yBALpB,CAMPkB,iCAAkCA,gCAN3B,CAOPI,gCAAiCA,+BAP1B,CAQPI,sCAAuCA,qCARhC,CASPI,cAAeA,aATR,CAUPE,eAAgBA,cAVT,CAWP6B,MAAOA,KAXA,CAYPE,mBAAoBA,kBAZb,CAAX,CAeAhG,QACA,MAAOJ,SAAP,CACH,CAEDT,cAAc8G,qBAAd,CAAsC,eAAtC,CACA,GAAMC,SAAUC,uBAAaC,eAAb,CAA6BjH,aAA7B,CAAhB,CACA+G,QAAQnH,sBAAR,CAAiCA,sBAAjC,CACAmH,QAAQlH,uBAAR,CAAkCA,uBAAlC,CACAkH,QAAQjH,uBAAR,CAAkCA,uBAAlC,CACAiH,QAAQhH,qBAAR,CAAgCA,qBAAhC,CACAiH,uBAAaE,kBAAb,CAAgClH,cAAc8G,qBAA9C,CAAqEC,OAArE,E,gBACeA,O","file":"FragmentModel.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\nimport FragmentRequest from '../vo/FragmentRequest';\n\nconst FRAGMENT_MODEL_LOADING = 'loading';\nconst FRAGMENT_MODEL_EXECUTED = 'executed';\nconst FRAGMENT_MODEL_CANCELED = 'canceled';\nconst FRAGMENT_MODEL_FAILED = 'failed';\n\nfunction FragmentModel(config) {\n\n    config = config || {};\n    const eventBus = config.eventBus;\n    const events = config.events;\n    const dashMetrics = config.dashMetrics;\n    const fragmentLoader = config.fragmentLoader;\n    const debug = config.debug;\n    const streamInfo = config.streamInfo;\n    const type = config.type;\n\n    let instance,\n        logger,\n        executedRequests,\n        loadingRequests;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        resetInitialSettings();\n        eventBus.on(events.LOADING_COMPLETED, onLoadingCompleted, instance);\n        eventBus.on(events.LOADING_DATA_PROGRESS, onLoadingInProgress, instance);\n        eventBus.on(events.LOADING_ABANDONED, onLoadingAborted, instance);\n    }\n\n    function getStreamId() {\n        return streamInfo.id;\n    }\n\n    function getType() {\n        return type;\n    }\n\n    function isFragmentLoaded(request) {\n        const isEqualComplete = function (req1, req2) {\n            return ((req1.action === FragmentRequest.ACTION_COMPLETE) && (req1.action === req2.action));\n        };\n\n        const isEqualMedia = function (req1, req2) {\n            return !isNaN(req1.index) && (req1.startTime === req2.startTime) && (req1.adaptationIndex === req2.adaptationIndex) && (req1.type === req2.type);\n        };\n\n        const isEqualInit = function (req1, req2) {\n            return isNaN(req1.index) && isNaN(req2.index) && (req1.quality === req2.quality);\n        };\n\n        const check = function (requests) {\n            let isLoaded = false;\n\n            requests.some(req => {\n                if (isEqualMedia(request, req) || isEqualInit(request, req) || isEqualComplete(request, req)) {\n                    isLoaded = true;\n                    return isLoaded;\n                }\n            });\n            return isLoaded;\n        };\n\n        if (!request) {\n            return false;\n        }\n\n        return check(executedRequests);\n    }\n\n    function isFragmentLoadedOrPending(request) {\n        let isLoaded = false;\n        let i = 0;\n        let req;\n\n        // First, check if the fragment has already been loaded\n        isLoaded = isFragmentLoaded(request);\n\n        // Then, check if the fragment is about to be loeaded\n        if (!isLoaded) {\n            for (i = 0; i < loadingRequests.length; i++) {\n                req = loadingRequests[i];\n                if ((request.url === req.url) && (request.startTime === req.startTime)) {\n                    isLoaded = true;\n                }\n            }\n        }\n\n        return isLoaded;\n    }\n\n    /**\n     *\n     * Gets an array of {@link FragmentRequest} objects\n     *\n     * @param {Object} filter The object with properties by which the method filters the requests to be returned.\n     *  the only mandatory property is state, which must be a value from\n     *  other properties should match the properties of {@link FragmentRequest}. E.g.:\n     *  getRequests({state: FragmentModel.FRAGMENT_MODEL_EXECUTED, quality: 0}) - returns\n     *  all the requests from executedRequests array where requests.quality = filter.quality\n     *\n     * @returns {Array}\n     * @memberof FragmentModel#\n     */\n    function getRequests(filter) {\n        const states = filter ? filter.state instanceof Array ? filter.state : [filter.state] : [];\n\n        let filteredRequests = [];\n        states.forEach(state => {\n            const requests = getRequestsForState(state);\n            filteredRequests = filteredRequests.concat(filterRequests(requests, filter));\n        });\n\n        return filteredRequests;\n    }\n\n    function getRequestThreshold(req) {\n        return isNaN(req.duration) ? 0.25 : Math.min(req.duration / 8, 0.5);\n    }\n\n    function removeExecutedRequestsBeforeTime(time) {\n        executedRequests = executedRequests.filter(req => {\n            const threshold = getRequestThreshold(req);\n            return isNaN(req.startTime) || (time !== undefined ? req.startTime >= time - threshold : false);\n        });\n    }\n\n    function removeExecutedRequestsAfterTime(time) {\n        executedRequests = executedRequests.filter(req => {\n            return isNaN(req.startTime) || (time !== undefined ? req.startTime < time : false);\n        });\n    }\n\n    function removeExecutedRequestsInTimeRange(start, end) {\n        if (end <= start + 0.5) {\n            return;\n        }\n\n        executedRequests = executedRequests.filter(req => {\n            const threshold = getRequestThreshold(req);\n            return (isNaN(req.startTime) || req.startTime >= (end - threshold)) ||\n                (isNaN(req.duration) || (req.startTime + req.duration) <= (start + threshold));\n        });\n    }\n\n    // Remove requests that are not \"represented\" by any of buffered ranges\n    function syncExecutedRequestsWithBufferedRange(bufferedRanges, streamDuration) {\n        if (!bufferedRanges || bufferedRanges.length === 0) {\n            removeExecutedRequestsBeforeTime();\n            return;\n        }\n\n        let start = 0;\n        for (let i = 0, ln = bufferedRanges.length; i < ln; i++) {\n            removeExecutedRequestsInTimeRange(start, bufferedRanges.start(i));\n            start = bufferedRanges.end(i);\n        }\n        if (streamDuration > 0) {\n            removeExecutedRequestsInTimeRange(start, streamDuration);\n        }\n    }\n\n    function abortRequests() {\n        logger.debug('abort requests');\n        fragmentLoader.abort();\n        loadingRequests = [];\n    }\n\n    function executeRequest(request) {\n        switch (request.action) {\n            case FragmentRequest.ACTION_COMPLETE:\n                executedRequests.push(request);\n                addSchedulingInfoMetrics(request, FRAGMENT_MODEL_EXECUTED);\n                logger.debug('STREAM_COMPLETED');\n                eventBus.trigger(events.STREAM_COMPLETED,\n                    { request: request },\n                    { streamId: request.mediaInfo.streamInfo.id, mediaType: request.mediaType }\n                );\n                break;\n            case FragmentRequest.ACTION_DOWNLOAD:\n                addSchedulingInfoMetrics(request, FRAGMENT_MODEL_LOADING);\n                loadingRequests.push(request);\n                loadCurrentFragment(request);\n                break;\n            default:\n                logger.warn('Unknown request action.');\n        }\n    }\n\n    function loadCurrentFragment(request) {\n        eventBus.trigger(events.FRAGMENT_LOADING_STARTED,\n            { request: request },\n            { streamId: streamInfo.id, mediaType: type }\n        );\n        fragmentLoader.load(request);\n    }\n\n    function getRequestForTime(arr, time, threshold) {\n        // loop through the executed requests and pick the one for which the playback interval matches the given time\n        const lastIdx = arr.length - 1;\n        for (let i = lastIdx; i >= 0; i--) {\n            const req = arr[i];\n            const start = req.startTime;\n            const end = start + req.duration;\n            threshold = !isNaN(threshold) ? threshold : getRequestThreshold(req);\n            if ((!isNaN(start) && !isNaN(end) && ((time + threshold) >= start) && ((time - threshold) < end)) || (isNaN(start) && isNaN(time))) {\n                return req;\n            }\n        }\n        return null;\n    }\n\n    function filterRequests(arr, filter) {\n        // for time use a specific filtration function\n        if (filter.hasOwnProperty('time')) {\n            return [getRequestForTime(arr, filter.time, filter.threshold)];\n        }\n\n        return arr.filter(request => {\n            for (const prop in filter) {\n                if (prop === 'state') continue;\n                if (filter.hasOwnProperty(prop) && request[prop] != filter[prop]) return false;\n            }\n\n            return true;\n        });\n    }\n\n    function getRequestsForState(state) {\n        let requests;\n        switch (state) {\n            case FRAGMENT_MODEL_LOADING:\n                requests = loadingRequests;\n                break;\n            case FRAGMENT_MODEL_EXECUTED:\n                requests = executedRequests;\n                break;\n            default:\n                requests = [];\n        }\n        return requests;\n    }\n\n    function addSchedulingInfoMetrics(request, state) {\n        dashMetrics.addSchedulingInfo(request, state);\n        dashMetrics.addRequestsQueue(request.mediaType, loadingRequests, executedRequests);\n    }\n\n    function onLoadingCompleted(e) {\n        if (e.sender !== fragmentLoader) return;\n\n        loadingRequests.splice(loadingRequests.indexOf(e.request), 1);\n\n        if (e.response && !e.error) {\n            executedRequests.push(e.request);\n        }\n\n        addSchedulingInfoMetrics(e.request, e.error ? FRAGMENT_MODEL_FAILED : FRAGMENT_MODEL_EXECUTED);\n\n        eventBus.trigger(events.FRAGMENT_LOADING_COMPLETED,\n            {\n                request: e.request,\n                response: e.response,\n                error: e.error,\n                sender: this\n            },\n            { streamId: streamInfo.id, mediaType: type }\n        );\n    }\n\n    function onLoadingInProgress(e) {\n        if (e.sender !== fragmentLoader) return;\n\n        eventBus.trigger(events.FRAGMENT_LOADING_PROGRESS,\n            {\n                request: e.request,\n                response: e.response,\n                error: e.error,\n                sender: this\n            },\n            { streamId: streamInfo.id, mediaType: type }\n        );\n    }\n\n    function onLoadingAborted(e) {\n        if (e.sender !== fragmentLoader) return;\n\n        eventBus.trigger(events.FRAGMENT_LOADING_ABANDONED,\n            { request: e.request },\n            { streamId: streamInfo.id, mediaType: type }\n        );\n    }\n\n    function resetInitialSettings() {\n        executedRequests = [];\n        loadingRequests = [];\n    }\n\n    function reset() {\n        eventBus.off(events.LOADING_COMPLETED, onLoadingCompleted, this);\n        eventBus.off(events.LOADING_DATA_PROGRESS, onLoadingInProgress, this);\n        eventBus.off(events.LOADING_ABANDONED, onLoadingAborted, this);\n\n        if (fragmentLoader) {\n            fragmentLoader.reset();\n        }\n        resetInitialSettings();\n    }\n\n    function addExecutedRequest(request) {\n        executedRequests.push(request);\n    }\n\n    instance = {\n        getStreamId: getStreamId,\n        getType: getType,\n        getRequests: getRequests,\n        isFragmentLoaded: isFragmentLoaded,\n        isFragmentLoadedOrPending: isFragmentLoadedOrPending,\n        removeExecutedRequestsBeforeTime: removeExecutedRequestsBeforeTime,\n        removeExecutedRequestsAfterTime: removeExecutedRequestsAfterTime,\n        syncExecutedRequestsWithBufferedRange: syncExecutedRequestsWithBufferedRange,\n        abortRequests: abortRequests,\n        executeRequest: executeRequest,\n        reset: reset,\n        addExecutedRequest: addExecutedRequest\n    };\n\n    setup();\n    return instance;\n}\n\nFragmentModel.__dashjs_factory_name = 'FragmentModel';\nconst factory = FactoryMaker.getClassFactory(FragmentModel);\nfactory.FRAGMENT_MODEL_LOADING = FRAGMENT_MODEL_LOADING;\nfactory.FRAGMENT_MODEL_EXECUTED = FRAGMENT_MODEL_EXECUTED;\nfactory.FRAGMENT_MODEL_CANCELED = FRAGMENT_MODEL_CANCELED;\nfactory.FRAGMENT_MODEL_FAILED = FRAGMENT_MODEL_FAILED;\nFactoryMaker.updateClassFactory(FragmentModel.__dashjs_factory_name, factory);\nexport default factory;\n"]}