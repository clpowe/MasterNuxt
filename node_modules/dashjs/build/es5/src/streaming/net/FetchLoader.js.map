{"version":3,"sources":["../../../../../src/streaming/net/FetchLoader.js"],"names":["FetchLoader","cfg","context","requestModifier","boxParser","settings","getInstance","instance","load","httpRequest","requestStartTime","Date","request","headers","Headers","range","append","header","value","requestStartDate","modifyRequestHeader","setRequestHeader","abortController","window","AbortController","signal","onabort","reqOptions","method","credentials","withCredentials","undefined","fetch","url","then","response","status","statusText","responseURL","ok","onerror","responseHeaders","keys","key","get","body","arrayBuffer","buffer","event","loaded","byteLength","total","stream","progress","onload","onend","totalBytes","parseInt","bytesReceived","signaledFirstByte","remaining","Uint8Array","offset","reader","getReader","downloadedData","startTimeData","endTimeData","lastChunkWasFinished","calculationMode","streaming","abr","fetchThroughputCalculationMode","processResult","done","isNaN","lengthComputable","time","calculateDownloadedTime","length","concatTypedArray","push","ts","now","bytes","Constants","ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING","boxesInfo","findLastTopIsoBoxCompleted","found","performance","end","lastCompletedOffset","size","data","subarray","noTrace","read","catch","e","result","set","abort","cancel","_calculateDownloadedTimeByMoofParsing","ABR_FETCH_THROUGHPUT_CALCULATION_DOWNLOADED_DATA","_calculateDownloadedTimeByBytesReceived","datum","datumE","filter","i","dataE","segDownloadTime","chunkDownladTime","avgTimeDistance","forEach","index","next","distance","__dashjs_factory_name","factory","FactoryMaker","getClassFactory"],"mappings":"sEA+BA,qD,yDACA,6C,iDACA,iD,sIAEA;;;;;GAMA,QAASA,YAAT,CAAqBC,GAArB,CAA0B,CAEtBA,IAAMA,KAAO,EAAb,CACA,GAAMC,SAAU,KAAKA,OAArB,CACA,GAAMC,iBAAkBF,IAAIE,eAA5B,CACA,GAAMC,WAAYH,IAAIG,SAAtB,CACA,GAAMC,UAAW,uBAASH,OAAT,EAAkBI,WAAlB,EAAjB,CACA,GAAIC,gBAAJ,CAEA,QAASC,KAAT,CAAcC,WAAd,CAA2B,CAEvB;AACA,GAAMC,kBAAmB,GAAIC,KAAJ,EAAzB,CACA,GAAMC,SAAUH,YAAYG,OAA5B,CAEA,GAAMC,SAAU,GAAIC,QAAJ,EAAhB,CAA+B,sBAC/B,GAAIF,QAAQG,KAAZ,CAAmB,CACfF,QAAQG,MAAR,CAAe,OAAf,CAAwB,SAAWJ,QAAQG,KAA3C,EACH,CAED,GAAIN,YAAYI,OAAhB,CAAyB,CACrB,IAAK,GAAII,OAAT,GAAmBR,aAAYI,OAA/B,CAAwC,CACpC,GAAIK,OAAQT,YAAYI,OAAZ,CAAoBI,MAApB,CAAZ,CACA,GAAIC,KAAJ,CAAW,CACPL,QAAQG,MAAR,CAAeC,MAAf,CAAuBC,KAAvB,EACH,CACJ,CACJ,CAED,GAAI,CAACN,QAAQO,gBAAb,CAA+B,CAC3BP,QAAQO,gBAAR,CAA2BT,gBAA3B,CACH,CAED,GAAIP,eAAJ,CAAqB,CACjB;AACA;AACA;AACA;AACAA,gBAAgBiB,mBAAhB,CAAoC,CAChCC,iBAAkB,0BAAUJ,MAAV,CAAkBC,KAAlB,CAAyB,CACvCL,QAAQG,MAAR,CAAeC,MAAf,CAAuBC,KAAvB,EACH,CAH+B,CAApC,EAKH,CAED,GAAII,uBAAJ,CACA,GAAI,MAAOC,QAAOC,eAAd,GAAkC,UAAtC,CAAkD,CAC9CF,gBAAkB,GAAIE,gBAAJ,EAAlB,CAAyC,sBACzCf,YAAYa,eAAZ,CAA8BA,eAA9B,CACAA,gBAAgBG,MAAhB,CAAuBC,OAAvB,CAAiCjB,YAAYiB,OAA7C,CACH,CAED,GAAMC,YAAa,CACfC,OAAQnB,YAAYmB,MADL,CAEff,QAASA,OAFM,CAGfgB,YAAapB,YAAYqB,eAAZ,CAA8B,SAA9B,CAA0CC,SAHxC,CAIfN,OAAQH,gBAAkBA,gBAAgBG,MAAlC,CAA2CM,SAJpC,CAAnB,CAOAC,MAAMvB,YAAYwB,GAAlB,CAAuBN,UAAvB,EAAmCO,IAAnC,CAAwC,SAAUC,QAAV,CAAoB,CACxD,GAAI,CAAC1B,YAAY0B,QAAjB,CAA2B,CACvB1B,YAAY0B,QAAZ,CAAuB,EAAvB,CACH,CACD1B,YAAY0B,QAAZ,CAAqBC,MAArB,CAA8BD,SAASC,MAAvC,CACA3B,YAAY0B,QAAZ,CAAqBE,UAArB,CAAkCF,SAASE,UAA3C,CACA5B,YAAY0B,QAAZ,CAAqBG,WAArB,CAAmCH,SAASF,GAA5C,CAEA,GAAI,CAACE,SAASI,EAAd,CAAkB,CACd9B,YAAY+B,OAAZ,GACH,CAED,GAAIC,iBAAkB,EAAtB,CAZwD,gGAaxD,kBAAkBN,SAAStB,OAAT,CAAiB6B,IAAjB,EAAlB,oHAA2C,IAAhCC,IAAgC,aACvCF,iBAAmBE,IAAM,IAAN,CAAaR,SAAStB,OAAT,CAAiB+B,GAAjB,CAAqBD,GAArB,CAAb,CAAyC,MAA5D,CACH,CAfuD,+LAgBxDlC,YAAY0B,QAAZ,CAAqBM,eAArB,CAAuCA,eAAvC,CAEA,GAAI,CAACN,SAASU,IAAd,CAAoB,CAChB;AACA;AACA;AACA,MAAOV,UAASW,WAAT,GAAuBZ,IAAvB,CAA4B,SAAUa,MAAV,CAAkB,CACjDtC,YAAY0B,QAAZ,CAAqBA,QAArB,CAAgCY,MAAhC,CACA,GAAMC,OAAQ,CACVC,OAAQF,OAAOG,UADL,CAEVC,MAAOJ,OAAOG,UAFJ,CAGVE,OAAQ,KAHE,CAAd,CAKA3C,YAAY4C,QAAZ,CAAqBL,KAArB,EACAvC,YAAY6C,MAAZ,GACA7C,YAAY8C,KAAZ,GACA,OACH,CAXM,CAAP,CAYH,CAED,GAAMC,YAAaC,SAAStB,SAAStB,OAAT,CAAiB+B,GAAjB,CAAqB,gBAArB,CAAT,CAAiD,EAAjD,CAAnB,CACA,GAAIc,eAAgB,CAApB,CACA,GAAIC,mBAAoB,KAAxB,CACA,GAAIC,WAAY,GAAIC,WAAJ,EAAhB,CACA,GAAIC,QAAS,CAAb,CAEArD,YAAYsD,MAAZ,CAAqB5B,SAASU,IAAT,CAAcmB,SAAd,EAArB,CACA,GAAIC,gBAAiB,EAArB,CACA,GAAIC,eAAgB,EAApB,CACA,GAAIC,aAAc,EAAlB,CACA,GAAIC,sBAAuB,IAA3B,CACA,GAAMC,iBAAkBhE,SAASuC,GAAT,GAAe0B,SAAf,CAAyBC,GAAzB,CAA6BC,8BAArD,CAEA,GAAMC,eAAgB,QAAhBA,cAAgB,MAA2B,IAAfvD,MAAe,MAAfA,KAAe,CAARwD,IAAQ,MAARA,IAAQ,CAAE;AAC/C,GAAIA,IAAJ,CAAU,CACN,GAAId,SAAJ,CAAe,CACX;AACA;AACA;AACAnD,YAAY4C,QAAZ,CAAqB,CACjBJ,OAAQS,aADS,CAEjBP,MAAOwB,MAAMnB,UAAN,EAAoBE,aAApB,CAAoCF,UAF1B,CAGjBoB,iBAAkB,IAHD,CAIjBC,KAAMC,wBAAwBT,eAAxB,CAAyCH,aAAzC,CAAwDC,WAAxD,CAAqEF,cAArE,CAAqFP,aAArF,CAJW,CAKjBN,OAAQ,IALS,CAArB,EAQA3C,YAAY0B,QAAZ,CAAqBA,QAArB,CAAgCyB,UAAUb,MAA1C,CACH,CACDtC,YAAY6C,MAAZ,GACA7C,YAAY8C,KAAZ,GACA,OACH,CAED,GAAIrC,OAASA,MAAM6D,MAAN,CAAe,CAA5B,CAA+B,CAC3BnB,UAAYoB,iBAAiBpB,SAAjB,CAA4B1C,KAA5B,CAAZ,CACAwC,eAAiBxC,MAAM6D,MAAvB,CAEAd,eAAegB,IAAf,CAAoB,CAChBC,GAAIvE,KAAKwE,GAAL,EADY,CAEhBC,MAAOlE,MAAM6D,MAFG,CAApB,EAKA,GAAIV,kBAAoBgB,oBAAUC,6CAA9B,EAA+ElB,oBAAnF,CAAyG,CACrG;AACA,GAAMmB,YAAYnF,UAAUoF,0BAAV,CAAqC,CAAC,MAAD,CAArC,CAA+C5B,SAA/C,CAA0DE,MAA1D,CAAlB,CACA,GAAIyB,WAAUE,KAAd,CAAqB,CACjB;AACArB,qBAAuB,KAAvB,CACAF,cAAce,IAAd,CAAmB,CACfC,GAAIQ,YAAYP,GAAZ,EADW,CACQ,wBACvBC,MAAOlE,MAAM6D,MAFE,CAAnB,EAIH,CACJ,CAED,GAAMQ,WAAYnF,UAAUoF,0BAAV,CAAqC,CAAC,MAAD,CAAS,MAAT,CAArC,CAAuD5B,SAAvD,CAAkEE,MAAlE,CAAlB,CACA,GAAIyB,UAAUE,KAAd,CAAqB,CACjB,GAAME,KAAMJ,UAAUK,mBAAV,CAAgCL,UAAUM,IAAtD,CAEA;AACA,GAAIxB,kBAAoBgB,oBAAUC,6CAAlC,CAAiF,CAC7ElB,qBAAuB,IAAvB,CACAD,YAAYc,IAAZ,CAAiB,CACbC,GAAIQ,YAAYP,GAAZ,EADS,CACU,wBACvBC,MAAOxB,UAAUmB,MAFJ,CAAjB,EAIH,CAED;AACA;AACA;AACA;AACA,GAAIe,YAAJ,CACA,GAAIH,MAAQ/B,UAAUmB,MAAtB,CAA8B,CAC1Be,KAAOlC,SAAP,CACAA,UAAY,GAAIC,WAAJ,EAAZ,CACH,CAHD,IAGO,CACHiC,KAAO,GAAIjC,WAAJ,CAAeD,UAAUmC,QAAV,CAAmB,CAAnB,CAAsBJ,GAAtB,CAAf,CAAP,CACA/B,UAAYA,UAAUmC,QAAV,CAAmBJ,GAAnB,CAAZ,CACH,CACD;AACA;AACAlF,YAAY4C,QAAZ,CAAqB,CACjByC,KAAMA,KAAK/C,MADM,CAEjB6B,iBAAkB,KAFD,CAGjBoB,QAAS,IAHQ,CAArB,EAMAlC,OAAS,CAAT,CACH,CAjCD,IAiCO,CACHA,OAASyB,UAAUK,mBAAnB,CACA;AACA;AACA,GAAI,CAACjC,iBAAL,CAAwB,CACpBlD,YAAY4C,QAAZ,CAAqB,CACjBuB,iBAAkB,KADD,CAEjBoB,QAAS,IAFQ,CAArB,EAIArC,kBAAoB,IAApB,CACH,CACJ,CACJ,CACDsC,KAAKxF,WAAL,CAAkBgE,aAAlB,EACH,CA3FD,CA4FAwB,KAAKxF,WAAL,CAAkBgE,aAAlB,EACH,CA9ID,EA+IKyB,KA/IL,CA+IW,SAAUC,CAAV,CAAa,CAChB,GAAI1F,YAAY+B,OAAhB,CAAyB,CACrB/B,YAAY+B,OAAZ,CAAoB2D,CAApB,EACH,CACJ,CAnJL,EAoJH,CAED,QAASF,KAAT,CAAcxF,WAAd,CAA2BgE,aAA3B,CAA0C,CACtChE,YAAYsD,MAAZ,CAAmBkC,IAAnB,GACK/D,IADL,CACUuC,aADV,EAEKyB,KAFL,CAEW,SAAUC,CAAV,CAAa,CAChB,GAAI1F,YAAY+B,OAAZ,EAAuB/B,YAAY0B,QAAZ,CAAqBC,MAArB,GAAgC,GAA3D,CAAgE,CAC5D;AACA3B,YAAY+B,OAAZ,CAAoB2D,CAApB,EACH,CACJ,CAPL,EAQH,CAED,QAASnB,iBAAT,CAA0BpB,SAA1B,CAAqCkC,IAArC,CAA2C,CACvC,GAAIlC,UAAUmB,MAAV,GAAqB,CAAzB,CAA4B,CACxB,MAAOe,KAAP,CACH,CACD,GAAMM,QAAS,GAAIvC,WAAJ,CAAeD,UAAUmB,MAAV,CAAmBe,KAAKf,MAAvC,CAAf,CACAqB,OAAOC,GAAP,CAAWzC,SAAX,EACAwC,OAAOC,GAAP,CAAWP,IAAX,CAAiBlC,UAAUmB,MAA3B,EACA,MAAOqB,OAAP,CACH,CAED,QAASE,MAAT,CAAe1F,OAAf,CAAwB,CACpB,GAAIA,QAAQU,eAAZ,CAA6B,CACzB;AACAV,QAAQU,eAAR,CAAwBgF,KAAxB,GACH,CAHD,IAGO,IAAI1F,QAAQmD,MAAZ,CAAoB,CACvB;AACA,GAAI,CACAnD,QAAQmD,MAAR,CAAewC,MAAf,GACA3F,QAAQc,OAAR,GACH,CAAC,MAAOyE,CAAP,CAAU,CACR;AACA;AACH,CACJ,CACJ,CAED;AACA,QAASrB,wBAAT,CAAiCT,eAAjC,CAAkDH,aAAlD,CAAiEC,WAAjE,CAA8EF,cAA9E,CAA8FP,aAA9F,CAA6G,CACzG,OAAQW,eAAR,EACI,IAAKgB,qBAAUC,6CAAf,CACI,MAAOkB,uCAAsCtC,aAAtC,CAAqDC,WAArD,CAAP,CACJ,IAAKkB,qBAAUoB,gDAAf,CACI,MAAOC,yCAAwCzC,cAAxC,CAAwDP,aAAxD,CAAP,CACJ,QACI,MAAOgD,yCAAwCzC,cAAxC,CAAwDP,aAAxD,CAAP,CANR,CAQH,CAED,QAAS8C,sCAAT,CAA+CtC,aAA/C,CAA8DC,WAA9D,CAA2E,CACvE,GAAI,CACA,GAAIwC,aAAJ,CAAWC,aAAX,CACA;AACAD,MAAQzC,cAAc2C,MAAd,CAAqB,SAACf,IAAD,CAAOgB,CAAP,QAAaA,GAAI,CAAJ,EAASA,EAAI5C,cAAca,MAAd,CAAuB,CAAjD,EAArB,CAAR,CACA6B,OAASzC,YAAY0C,MAAZ,CAAmB,SAACE,KAAD,CAAQD,CAAR,QAAcA,GAAI,CAAJ,EAASA,EAAI3C,YAAYY,MAAZ,CAAqB,CAAhD,EAAnB,CAAT,CACA;AACA,GAAIiC,iBAAkB,CAAtB,CACA,GAAIL,MAAM5B,MAAN,CAAe,CAAnB,CAAsB,CAClB,IAAK,GAAI+B,GAAI,CAAb,CAAgBA,EAAIH,MAAM5B,MAA1B,CAAkC+B,GAAlC,CAAuC,CACnC,GAAIH,MAAMG,CAAN,GAAYF,OAAOE,CAAP,CAAhB,CAA2B,CACvB,GAAIG,kBAAmBL,OAAOE,CAAP,EAAU5B,EAAV,CAAeyB,MAAMG,CAAN,EAAS5B,EAA/C,CACA8B,iBAAmBC,gBAAnB,CACH,CACJ,CAED,MAAOD,gBAAP,CACH,CACD,MAAO,KAAP,CACH,CAAC,MAAOb,CAAP,CAAU,CACR,MAAO,KAAP,CACH,CACJ,CAED,QAASO,wCAAT,CAAiDzC,cAAjD,CAAiEP,aAAjE,CAAgF,CAC5E,GAAI,CACAO,eAAiBA,eAAe4C,MAAf,CAAsB,qBAAQf,MAAKV,KAAL,CAAe1B,cAAgB,CAAjB,CAAsBO,eAAec,MAA3D,EAAtB,CAAjB,CACA,GAAId,eAAec,MAAf,CAAwB,CAA5B,CAA+B,CAC3B,GAAIF,MAAO,CAAX,CACA,GAAMqC,iBAAkB,CAACjD,eAAeA,eAAec,MAAf,CAAwB,CAAvC,EAA0CG,EAA1C,CAA+CjB,eAAe,CAAf,EAAkBiB,EAAlE,EAAwEjB,eAAec,MAA/G,CACAd,eAAekD,OAAf,CAAuB,SAACrB,IAAD,CAAOsB,KAAP,CAAiB,CACpC;AACA,GAAMC,MAAOpD,eAAemD,MAAQ,CAAvB,CAAb,CACA,GAAIC,IAAJ,CAAU,CACN,GAAMC,UAAWD,KAAKnC,EAAL,CAAUY,KAAKZ,EAAhC,CACAL,MAAQyC,SAAWJ,eAAX,CAA6BI,QAA7B,CAAwC,CAAhD,CACH,CACJ,CAPD,EAQA,MAAOzC,KAAP,CACH,CACD,MAAO,KAAP,CACH,CAAC,MAAOsB,CAAP,CAAU,CACR,MAAO,KAAP,CACH,CACJ,CAED5F,SAAW,CACPC,KAAMA,IADC,CAEP8F,MAAOA,KAFA,CAGPxB,wBAAyBA,uBAHlB,CAAX,CAMA,MAAOvE,SAAP,CACH,CAhWD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkWAP,YAAYuH,qBAAZ,CAAoC,aAApC,CAEA,GAAMC,SAAUC,uBAAaC,eAAb,CAA6B1H,WAA7B,CAAhB,C,gBACewH,O","file":"FetchLoader.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Settings from '../../core/Settings';\nimport Constants from '../constants/Constants';\n\n/**\n * @module FetchLoader\n * @ignore\n * @description Manages download of resources via HTTP using fetch.\n * @param {Object} cfg - dependencies from parent\n */\nfunction FetchLoader(cfg) {\n\n    cfg = cfg || {};\n    const context = this.context;\n    const requestModifier = cfg.requestModifier;\n    const boxParser = cfg.boxParser;\n    const settings = Settings(context).getInstance();\n    let instance;\n\n    function load(httpRequest) {\n\n        // Variables will be used in the callback functions\n        const requestStartTime = new Date();\n        const request = httpRequest.request;\n\n        const headers = new Headers(); /*jshint ignore:line*/\n        if (request.range) {\n            headers.append('Range', 'bytes=' + request.range);\n        }\n\n        if (httpRequest.headers) {\n            for (let header in httpRequest.headers) {\n                let value = httpRequest.headers[header];\n                if (value) {\n                    headers.append(header, value);\n                }\n            }\n        }\n\n        if (!request.requestStartDate) {\n            request.requestStartDate = requestStartTime;\n        }\n\n        if (requestModifier) {\n            // modifyRequestHeader expects a XMLHttpRequest object so,\n            // to keep backward compatibility, we should expose a setRequestHeader method\n            // TODO: Remove RequestModifier dependency on XMLHttpRequest object and define\n            // a more generic way to intercept/modify requests\n            requestModifier.modifyRequestHeader({\n                setRequestHeader: function (header, value) {\n                    headers.append(header, value);\n                }\n            });\n        }\n\n        let abortController;\n        if (typeof window.AbortController === 'function') {\n            abortController = new AbortController(); /*jshint ignore:line*/\n            httpRequest.abortController = abortController;\n            abortController.signal.onabort = httpRequest.onabort;\n        }\n\n        const reqOptions = {\n            method: httpRequest.method,\n            headers: headers,\n            credentials: httpRequest.withCredentials ? 'include' : undefined,\n            signal: abortController ? abortController.signal : undefined\n        };\n\n        fetch(httpRequest.url, reqOptions).then(function (response) {\n            if (!httpRequest.response) {\n                httpRequest.response = {};\n            }\n            httpRequest.response.status = response.status;\n            httpRequest.response.statusText = response.statusText;\n            httpRequest.response.responseURL = response.url;\n\n            if (!response.ok) {\n                httpRequest.onerror();\n            }\n\n            let responseHeaders = '';\n            for (const key of response.headers.keys()) {\n                responseHeaders += key + ': ' + response.headers.get(key) + '\\r\\n';\n            }\n            httpRequest.response.responseHeaders = responseHeaders;\n\n            if (!response.body) {\n                // Fetch returning a ReadableStream response body is not currently supported by all browsers.\n                // Browser compatibility: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n                // If it is not supported, returning the whole segment when it's ready (as xhr)\n                return response.arrayBuffer().then(function (buffer) {\n                    httpRequest.response.response = buffer;\n                    const event = {\n                        loaded: buffer.byteLength,\n                        total: buffer.byteLength,\n                        stream: false\n                    };\n                    httpRequest.progress(event);\n                    httpRequest.onload();\n                    httpRequest.onend();\n                    return;\n                });\n            }\n\n            const totalBytes = parseInt(response.headers.get('Content-Length'), 10);\n            let bytesReceived = 0;\n            let signaledFirstByte = false;\n            let remaining = new Uint8Array();\n            let offset = 0;\n\n            httpRequest.reader = response.body.getReader();\n            let downloadedData = [];\n            let startTimeData = [];\n            let endTimeData = [];\n            let lastChunkWasFinished = true;\n            const calculationMode = settings.get().streaming.abr.fetchThroughputCalculationMode;\n\n            const processResult = function ({ value, done }) { // Bug fix Parse whenever data is coming [value] better than 1ms looking that increase CPU\n                if (done) {\n                    if (remaining) {\n                        // If there is pending data, call progress so network metrics\n                        // are correctly generated\n                        // Same structure as https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/\n                        httpRequest.progress({\n                            loaded: bytesReceived,\n                            total: isNaN(totalBytes) ? bytesReceived : totalBytes,\n                            lengthComputable: true,\n                            time: calculateDownloadedTime(calculationMode, startTimeData, endTimeData, downloadedData, bytesReceived),\n                            stream: true\n                        });\n\n                        httpRequest.response.response = remaining.buffer;\n                    }\n                    httpRequest.onload();\n                    httpRequest.onend();\n                    return;\n                }\n\n                if (value && value.length > 0) {\n                    remaining = concatTypedArray(remaining, value);\n                    bytesReceived += value.length;\n\n                    downloadedData.push({\n                        ts: Date.now(),\n                        bytes: value.length\n                    });\n\n                    if (calculationMode === Constants.ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING && lastChunkWasFinished) {\n                        // Parse the payload and capture the the 'moof' box\n                        const boxesInfo = boxParser.findLastTopIsoBoxCompleted(['moof'], remaining, offset);\n                        if (boxesInfo.found) {\n                            // Store the beginning time of each chunk download in array StartTimeData\n                            lastChunkWasFinished = false;\n                            startTimeData.push({\n                                ts: performance.now(), /* jshint ignore:line */\n                                bytes: value.length\n                            });\n                        }\n                    }\n\n                    const boxesInfo = boxParser.findLastTopIsoBoxCompleted(['moov', 'mdat'], remaining, offset);\n                    if (boxesInfo.found) {\n                        const end = boxesInfo.lastCompletedOffset + boxesInfo.size;\n\n                        // Store the end time of each chunk download  with its size in array EndTimeData\n                        if (calculationMode === Constants.ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING) {\n                            lastChunkWasFinished = true;\n                            endTimeData.push({\n                                ts: performance.now(), /* jshint ignore:line */\n                                bytes: remaining.length\n                            });\n                        }\n\n                        // If we are going to pass full buffer, avoid copying it and pass\n                        // complete buffer. Otherwise clone the part of the buffer that is completed\n                        // and adjust remaining buffer. A clone is needed because ArrayBuffer of a typed-array\n                        // keeps a reference to the original data\n                        let data;\n                        if (end === remaining.length) {\n                            data = remaining;\n                            remaining = new Uint8Array();\n                        } else {\n                            data = new Uint8Array(remaining.subarray(0, end));\n                            remaining = remaining.subarray(end);\n                        }\n                        // Announce progress but don't track traces. Throughput measures are quite unstable\n                        // when they are based in small amount of data\n                        httpRequest.progress({\n                            data: data.buffer,\n                            lengthComputable: false,\n                            noTrace: true\n                        });\n\n                        offset = 0;\n                    } else {\n                        offset = boxesInfo.lastCompletedOffset;\n                        // Call progress so it generates traces that will be later used to know when the first byte\n                        // were received\n                        if (!signaledFirstByte) {\n                            httpRequest.progress({\n                                lengthComputable: false,\n                                noTrace: true\n                            });\n                            signaledFirstByte = true;\n                        }\n                    }\n                }\n                read(httpRequest, processResult);\n            };\n            read(httpRequest, processResult);\n        })\n            .catch(function (e) {\n                if (httpRequest.onerror) {\n                    httpRequest.onerror(e);\n                }\n            });\n    }\n\n    function read(httpRequest, processResult) {\n        httpRequest.reader.read()\n            .then(processResult)\n            .catch(function (e) {\n                if (httpRequest.onerror && httpRequest.response.status === 200) {\n                    // Error, but response code is 200, trigger error\n                    httpRequest.onerror(e);\n                }\n            });\n    }\n\n    function concatTypedArray(remaining, data) {\n        if (remaining.length === 0) {\n            return data;\n        }\n        const result = new Uint8Array(remaining.length + data.length);\n        result.set(remaining);\n        result.set(data, remaining.length);\n        return result;\n    }\n\n    function abort(request) {\n        if (request.abortController) {\n            // For firefox and edge\n            request.abortController.abort();\n        } else if (request.reader) {\n            // For Chrome\n            try {\n                request.reader.cancel();\n                request.onabort();\n            } catch (e) {\n                // throw exceptions (TypeError) when reader was previously closed,\n                // for example, because a network issue\n            }\n        }\n    }\n\n    // Compute the download time of a segment\n    function calculateDownloadedTime(calculationMode, startTimeData, endTimeData, downloadedData, bytesReceived) {\n        switch (calculationMode) {\n            case Constants.ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING:\n                return _calculateDownloadedTimeByMoofParsing(startTimeData, endTimeData);\n            case Constants.ABR_FETCH_THROUGHPUT_CALCULATION_DOWNLOADED_DATA:\n                return _calculateDownloadedTimeByBytesReceived(downloadedData, bytesReceived);\n            default:\n                return _calculateDownloadedTimeByBytesReceived(downloadedData, bytesReceived);\n        }\n    }\n\n    function _calculateDownloadedTimeByMoofParsing(startTimeData, endTimeData) {\n        try {\n            let datum, datumE;\n            // Filter the first and last chunks in a segment in both arrays [StartTimeData and EndTimeData]\n            datum = startTimeData.filter((data, i) => i > 0 && i < startTimeData.length - 1);\n            datumE = endTimeData.filter((dataE, i) => i > 0 && i < endTimeData.length - 1);\n            // Compute the download time of a segment based on the filtered data [last chunk end time - first chunk beginning time]\n            let segDownloadTime = 0;\n            if (datum.length > 1) {\n                for (let i = 0; i < datum.length; i++) {\n                    if (datum[i] && datumE[i]) {\n                        let chunkDownladTime = datumE[i].ts - datum[i].ts;\n                        segDownloadTime += chunkDownladTime;\n                    }\n                }\n\n                return segDownloadTime;\n            }\n            return null;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _calculateDownloadedTimeByBytesReceived(downloadedData, bytesReceived) {\n        try {\n            downloadedData = downloadedData.filter(data => data.bytes > ((bytesReceived / 4) / downloadedData.length));\n            if (downloadedData.length > 1) {\n                let time = 0;\n                const avgTimeDistance = (downloadedData[downloadedData.length - 1].ts - downloadedData[0].ts) / downloadedData.length;\n                downloadedData.forEach((data, index) => {\n                    // To be counted the data has to be over a threshold\n                    const next = downloadedData[index + 1];\n                    if (next) {\n                        const distance = next.ts - data.ts;\n                        time += distance < avgTimeDistance ? distance : 0;\n                    }\n                });\n                return time;\n            }\n            return null;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    instance = {\n        load: load,\n        abort: abort,\n        calculateDownloadedTime: calculateDownloadedTime\n    };\n\n    return instance;\n}\n\nFetchLoader.__dashjs_factory_name = 'FetchLoader';\n\nconst factory = FactoryMaker.getClassFactory(FetchLoader);\nexport default factory;\n\n"]}