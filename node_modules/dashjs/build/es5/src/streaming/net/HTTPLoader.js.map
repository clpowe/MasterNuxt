{"version":3,"sources":["../../../../../src/streaming/net/HTTPLoader.js"],"names":["HTTPLoader","cfg","context","errHandler","dashMetrics","mediaPlayerModel","requestModifier","boxParser","useFetch","errors","requestTimeout","eventBus","getInstance","settings","instance","requests","delayedRequests","retryRequests","downloadErrorToRequestTypeMap","cmcdModel","logger","setup","getLogger","HTTPRequest","MPD_TYPE","DOWNLOAD_ERROR_ID_MANIFEST_CODE","XLINK_EXPANSION_TYPE","DOWNLOAD_ERROR_ID_XLINK_CODE","INIT_SEGMENT_TYPE","DOWNLOAD_ERROR_ID_INITIALIZATION_CODE","MEDIA_SEGMENT_TYPE","DOWNLOAD_ERROR_ID_CONTENT_CODE","INDEX_SEGMENT_TYPE","BITSTREAM_SWITCHING_SEGMENT_TYPE","OTHER_TYPE","internalLoad","config","remainingAttempts","request","traces","firstProgress","needFailureReport","requestStartTime","Date","lastTraceTime","lastTraceReceivedCount","httpRequest","Error","handleLoaded","success","requestStartDate","requestEndDate","firstByteDate","checkExistenceOnly","addHttpRequest","response","responseURL","status","getAllResponseHeaders","responseHeaders","type","addManifestUpdate","onloadend","indexOf","splice","get","streaming","utcSynchronization","enableBackgroundSyncAfterSegmentDownloadError","initialNumberOfAttempts","getRetryAttemptsForType","trigger","Events","ATTEMPT_BACKGROUND_SYNC","e","retryRequest","push","timeout","setTimeout","getRetryIntervalsForType","MSS_FRAGMENT_INFO_SEGMENT_TYPE","error","DashJSError","url","statusText","complete","progress","event","currentTime","lengthComputable","total","loaded","bytesLoaded","bytesTotal","noTrace","s","d","time","getTime","b","onload","onabort","abort","ontimeout","timeoutMessage","percentageComplete","toFixed","warn","loader","window","fetch","responseType","create","headers","modifiedUrl","modifyRequestURL","cmcd","enabled","cmcdMode","mode","Constants","CMCD_MODE_QUERY","additionalQueryParameter","_getAdditionalQueryParameter","Utils","addAditionalQueryParameterToUrl","CMCD_MODE_HEADER","getHeaderParameters","verb","HEAD","GET","withCredentials","getXHRWithCredentialsForType","method","onend","onerror","now","isNaN","delayLoadingTime","load","delayedRequest","delayTimeout","cmcdQueryParameter","getQueryParameter","forEach","clearTimeout","t","x","onprogress","undefined","__dashjs_factory_name","factory","FactoryMaker","getClassFactory"],"mappings":"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","file":"HTTPLoader.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport XHRLoader from './XHRLoader';\nimport FetchLoader from './FetchLoader';\nimport {HTTPRequest} from '../vo/metrics/HTTPRequest';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport DashJSError from '../vo/DashJSError';\nimport CmcdModel from '../models/CmcdModel';\nimport Utils from '../../core/Utils';\nimport Debug from '../../core/Debug';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport Settings from '../../core/Settings';\nimport Constants from '../constants/Constants';\n\n/**\n * @module HTTPLoader\n * @ignore\n * @description Manages download of resources via HTTP.\n * @param {Object} cfg - dependancies from parent\n */\nfunction HTTPLoader(cfg) {\n\n    cfg = cfg || {};\n\n    const context = this.context;\n    const errHandler = cfg.errHandler;\n    const dashMetrics = cfg.dashMetrics;\n    const mediaPlayerModel = cfg.mediaPlayerModel;\n    const requestModifier = cfg.requestModifier;\n    const boxParser = cfg.boxParser;\n    const useFetch = cfg.useFetch || false;\n    const errors = cfg.errors;\n    const requestTimeout = cfg.requestTimeout || 0;\n    const eventBus = EventBus(context).getInstance();\n    const settings = Settings(context).getInstance();\n\n    let instance,\n        requests,\n        delayedRequests,\n        retryRequests,\n        downloadErrorToRequestTypeMap,\n        cmcdModel,\n        logger;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        requests = [];\n        delayedRequests = [];\n        retryRequests = [];\n        cmcdModel = CmcdModel(context).getInstance();\n\n        downloadErrorToRequestTypeMap = {\n            [HTTPRequest.MPD_TYPE]: errors.DOWNLOAD_ERROR_ID_MANIFEST_CODE,\n            [HTTPRequest.XLINK_EXPANSION_TYPE]: errors.DOWNLOAD_ERROR_ID_XLINK_CODE,\n            [HTTPRequest.INIT_SEGMENT_TYPE]: errors.DOWNLOAD_ERROR_ID_INITIALIZATION_CODE,\n            [HTTPRequest.MEDIA_SEGMENT_TYPE]: errors.DOWNLOAD_ERROR_ID_CONTENT_CODE,\n            [HTTPRequest.INDEX_SEGMENT_TYPE]: errors.DOWNLOAD_ERROR_ID_CONTENT_CODE,\n            [HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE]: errors.DOWNLOAD_ERROR_ID_CONTENT_CODE,\n            [HTTPRequest.OTHER_TYPE]: errors.DOWNLOAD_ERROR_ID_CONTENT_CODE\n        };\n    }\n\n    function internalLoad(config, remainingAttempts) {\n        const request = config.request;\n        const traces = [];\n        let firstProgress = true;\n        let needFailureReport = true;\n        let requestStartTime = new Date();\n        let lastTraceTime = requestStartTime;\n        let lastTraceReceivedCount = 0;\n        let httpRequest;\n\n        if (!requestModifier || !dashMetrics || !errHandler) {\n            throw new Error('config object is not correct or missing');\n        }\n\n        const handleLoaded = function (success) {\n            needFailureReport = false;\n\n            request.requestStartDate = requestStartTime;\n            request.requestEndDate = new Date();\n            request.firstByteDate = request.firstByteDate || requestStartTime;\n\n            if (!request.checkExistenceOnly) {\n                dashMetrics.addHttpRequest(request, httpRequest.response ? httpRequest.response.responseURL : null,\n                    httpRequest.response ? httpRequest.response.status : null,\n                    httpRequest.response && httpRequest.response.getAllResponseHeaders ? httpRequest.response.getAllResponseHeaders() :\n                        httpRequest.response ? httpRequest.response.responseHeaders : [],\n                    success ? traces : null);\n\n                if (request.type === HTTPRequest.MPD_TYPE) {\n                    dashMetrics.addManifestUpdate(request);\n                }\n            }\n        };\n\n        const onloadend = function () {\n            if (requests.indexOf(httpRequest) === -1) {\n                return;\n            } else {\n                requests.splice(requests.indexOf(httpRequest), 1);\n            }\n\n            if (needFailureReport) {\n                handleLoaded(false);\n\n                if (remainingAttempts > 0) {\n\n                    // If we get a 404 to a media segment we should check the client clock again and perform a UTC sync in the background.\n                    try {\n                        if (settings.get().streaming.utcSynchronization.enableBackgroundSyncAfterSegmentDownloadError && request.type === HTTPRequest.MEDIA_SEGMENT_TYPE) {\n                            // Only trigger a sync if the loading failed for the first time\n                            const initialNumberOfAttempts = mediaPlayerModel.getRetryAttemptsForType(HTTPRequest.MEDIA_SEGMENT_TYPE);\n                            if (initialNumberOfAttempts === remainingAttempts) {\n                                eventBus.trigger(Events.ATTEMPT_BACKGROUND_SYNC);\n                            }\n                        }\n                    } catch (e) {\n\n                    }\n\n                    remainingAttempts--;\n                    let retryRequest = { config: config };\n                    retryRequests.push(retryRequest);\n                    retryRequest.timeout = setTimeout(function () {\n                        if (retryRequests.indexOf(retryRequest) === -1) {\n                            return;\n                        } else {\n                            retryRequests.splice(retryRequests.indexOf(retryRequest), 1);\n                        }\n                        internalLoad(config, remainingAttempts);\n                    }, mediaPlayerModel.getRetryIntervalsForType(request.type));\n                } else {\n                    if (request.type === HTTPRequest.MSS_FRAGMENT_INFO_SEGMENT_TYPE) {\n                        return;\n                    }\n\n                    errHandler.error(new DashJSError(downloadErrorToRequestTypeMap[request.type], request.url + ' is not available', {\n                        request: request,\n                        response: httpRequest.response\n                    }));\n\n                    if (config.error) {\n                        config.error(request, 'error', httpRequest.response.statusText);\n                    }\n\n                    if (config.complete) {\n                        config.complete(request, httpRequest.response.statusText);\n                    }\n                }\n            }\n        };\n\n        const progress = function (event) {\n            const currentTime = new Date();\n\n            if (firstProgress) {\n                firstProgress = false;\n                if (!event.lengthComputable ||\n                    (event.lengthComputable && event.total !== event.loaded)) {\n                    request.firstByteDate = currentTime;\n                }\n            }\n\n            if (event.lengthComputable) {\n                request.bytesLoaded = event.loaded;\n                request.bytesTotal = event.total;\n            }\n\n            if (!event.noTrace) {\n                traces.push({\n                    s: lastTraceTime,\n                    d: event.time ? event.time : currentTime.getTime() - lastTraceTime.getTime(),\n                    b: [event.loaded ? event.loaded - lastTraceReceivedCount : 0]\n                });\n\n                lastTraceTime = currentTime;\n                lastTraceReceivedCount = event.loaded;\n            }\n\n            if (config.progress && event) {\n                config.progress(event);\n            }\n        };\n\n        const onload = function () {\n            if (httpRequest.response.status >= 200 && httpRequest.response.status <= 299) {\n                handleLoaded(true);\n\n                if (config.success) {\n                    config.success(httpRequest.response.response, httpRequest.response.statusText, httpRequest.response.responseURL);\n                }\n\n                if (config.complete) {\n                    config.complete(request, httpRequest.response.statusText);\n                }\n            }\n        };\n\n        const onabort = function () {\n            if (config.abort) {\n                config.abort(request);\n            }\n        };\n\n        const ontimeout = function (event) {\n            let timeoutMessage;\n            if (event.lengthComputable) {\n                let percentageComplete = (event.loaded / event.total) * 100;\n                timeoutMessage = 'Request timeout: loaded: ' + event.loaded + ', out of: ' + event.total + ' : ' + percentageComplete.toFixed(3) + '% Completed';\n            } else {\n                timeoutMessage = 'Request timeout: non-computable download size';\n            }\n            logger.warn(timeoutMessage);\n        };\n\n        let loader;\n        if (useFetch && window.fetch && request.responseType === 'arraybuffer' && request.type === HTTPRequest.MEDIA_SEGMENT_TYPE) {\n            loader = FetchLoader(context).create({\n                requestModifier: requestModifier,\n                boxParser: boxParser\n            });\n        } else {\n            loader = XHRLoader(context).create({\n                requestModifier: requestModifier\n            });\n        }\n\n        let headers = null;\n        let modifiedUrl = requestModifier.modifyRequestURL(request.url);\n        if (settings.get().streaming.cmcd && settings.get().streaming.cmcd.enabled) {\n            const cmcdMode = settings.get().streaming.cmcd.mode;\n            if (cmcdMode === Constants.CMCD_MODE_QUERY) {\n                const additionalQueryParameter = _getAdditionalQueryParameter(request);\n                modifiedUrl = Utils.addAditionalQueryParameterToUrl(modifiedUrl, additionalQueryParameter);\n            }\n            else if (cmcdMode === Constants.CMCD_MODE_HEADER) {\n                headers = cmcdModel.getHeaderParameters(request);\n            }\n        }\n        const verb = request.checkExistenceOnly ? HTTPRequest.HEAD : HTTPRequest.GET;\n        const withCredentials = mediaPlayerModel.getXHRWithCredentialsForType(request.type);\n\n\n        httpRequest = {\n            url: modifiedUrl,\n            method: verb,\n            withCredentials: withCredentials,\n            request: request,\n            onload: onload,\n            onend: onloadend,\n            onerror: onloadend,\n            progress: progress,\n            onabort: onabort,\n            ontimeout: ontimeout,\n            loader: loader,\n            timeout: requestTimeout,\n            headers: headers\n        };\n\n        // Adds the ability to delay single fragment loading time to control buffer.\n        let now = new Date().getTime();\n        if (isNaN(request.delayLoadingTime) || now >= request.delayLoadingTime) {\n            // no delay - just send\n            requests.push(httpRequest);\n            loader.load(httpRequest);\n        } else {\n            // delay\n            let delayedRequest = { httpRequest: httpRequest };\n            delayedRequests.push(delayedRequest);\n            delayedRequest.delayTimeout = setTimeout(function () {\n                if (delayedRequests.indexOf(delayedRequest) === -1) {\n                    return;\n                } else {\n                    delayedRequests.splice(delayedRequests.indexOf(delayedRequest), 1);\n                }\n                try {\n                    requestStartTime = new Date();\n                    lastTraceTime = requestStartTime;\n                    requests.push(delayedRequest.httpRequest);\n                    loader.load(delayedRequest.httpRequest);\n                } catch (e) {\n                    delayedRequest.httpRequest.onerror();\n                }\n            }, (request.delayLoadingTime - now));\n        }\n    }\n\n    function _getAdditionalQueryParameter(request) {\n        try {\n            const additionalQueryParameter = [];\n            const cmcdQueryParameter = cmcdModel.getQueryParameter(request);\n\n            if (cmcdQueryParameter) {\n                additionalQueryParameter.push(cmcdQueryParameter);\n            }\n\n            return additionalQueryParameter;\n        } catch (e) {\n            return [];\n        }\n    }\n\n    /**\n     * Initiates a download of the resource described by config.request\n     * @param {Object} config - contains request (FragmentRequest or derived type), and callbacks\n     * @memberof module:HTTPLoader\n     * @instance\n     */\n    function load(config) {\n        if (config.request) {\n            internalLoad(\n                config,\n                mediaPlayerModel.getRetryAttemptsForType(\n                    config.request.type\n                )\n            );\n        } else {\n            if (config.error) {\n                config.error(config.request, 'error');\n            }\n        }\n    }\n\n    /**\n     * Aborts any inflight downloads\n     * @memberof module:HTTPLoader\n     * @instance\n     */\n    function abort() {\n        retryRequests.forEach(t => {\n            clearTimeout(t.timeout);\n            // abort request in order to trigger LOADING_ABANDONED event\n            if (t.config.request && t.config.abort) {\n                t.config.abort(t.config.request);\n            }\n        });\n        retryRequests = [];\n\n        delayedRequests.forEach(x => clearTimeout(x.delayTimeout));\n        delayedRequests = [];\n\n        requests.forEach(x => {\n            // MSS patch: ignore FragmentInfo requests\n            if (x.request.type === HTTPRequest.MSS_FRAGMENT_INFO_SEGMENT_TYPE) {\n                return;\n            }\n\n            // abort will trigger onloadend which we don't want\n            // when deliberately aborting inflight requests -\n            // set them to undefined so they are not called\n            x.onloadend = x.onerror = x.onprogress = undefined;\n            x.loader.abort(x);\n        });\n        requests = [];\n    }\n\n    instance = {\n        load: load,\n        abort: abort\n    };\n\n    setup();\n\n    return instance;\n}\n\nHTTPLoader.__dashjs_factory_name = 'HTTPLoader';\n\nconst factory = FactoryMaker.getClassFactory(HTTPLoader);\nexport default factory;\n"]}