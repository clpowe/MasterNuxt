{"version":3,"sources":["../../../../../../src/streaming/protection/controllers/ProtectionController.js"],"names":["NEEDKEY_BEFORE_INITIALIZE_RETRIES","NEEDKEY_BEFORE_INITIALIZE_TIMEOUT","LICENSE_SERVER_REQUEST_RETRIES","LICENSE_SERVER_REQUEST_RETRY_INTERVAL","LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT","ProtectionController","config","protectionKeyController","protectionModel","eventBus","events","debug","BASE64","constants","needkeyRetries","cmcdModel","settings","instance","logger","pendingNeedKeyData","mediaInfoArr","protDataSet","sessionType","robustnessLevel","keySystem","licenseRequestFilters","licenseResponseFilters","setup","getLogger","checkConfig","hasOwnProperty","Error","initializeForMedia","mediaInfo","on","INTERNAL_KEY_MESSAGE","onKeyMessage","INTERNAL_KEY_STATUS_CHANGED","onKeyStatusChanged","push","supportedKS","getSupportedKeySystemsFromContentProtection","contentProtection","length","selectKeySystem","clearMediaInfoArrayByStreamId","streamId","filter","streamInfo","id","cps","createKeySession","initData","cdmData","initDataForKS","CommonEncryption","getPSSHForKeySystem","protData","getProtData","_isInitDataDuplicate","getSessionType","error","trigger","KEY_SESSION_CREATED","data","DashJSError","ProtectionErrors","KEY_SESSION_CREATED_ERROR_CODE","KEY_SESSION_CREATED_ERROR_MESSAGE","message","systemString","currentInitData","getAllInitData","i","initDataEquals","e","loadKeySession","sessionID","removeKeySession","sessionToken","closeKeySession","setServerCertificate","serverCertificate","setMediaElement","element","NEED_KEY","onNeedKey","off","setSessionType","value","setRobustnessLevel","level","setProtectionData","stop","reset","undefined","forEach","clearTimeout","retryTimeout","keySystemString","getKeySystemConfiguration","audioCapabilities","videoCapabilities","audioRobustness","videoRobustness","ksSessionType","distinctiveIdentifier","persistentState","media","type","AUDIO","MediaCapability","codec","VIDEO","KeySystemConfiguration","fromManifest","sort","ksA","ksB","indexA","ks","priority","indexB","_selectInitialKeySystem","_selectWithExistingKeySystem","self","requestedKeySystems","ksIdx","findIndex","entry","initDataForKs","configs","onKeySystemAccessComplete","event","KEY_SYSTEM_ACCESS_COMPLETE","KEY_SYSTEM_SELECTED","KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE","KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE","info","isClearKey","kids","Object","keys","clearkeys","TextEncoder","encode","JSON","stringify","sessionId","requestKeySystemAccess","keySystemAccess","INTERNAL_KEY_SYSTEM_SELECTED","onKeySystemSelected","getKeySystem","decodeArray","buffer","sendLicenseRequestCompleteEvent","LICENSE_REQUEST_COMPLETE","KEY_STATUSES_CHANGED","status","keyMessage","KEY_MESSAGE","messageType","licenseServerData","getLicenseServer","eventData","byteLength","MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE","MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE","getSessionID","processClearKeyLicenseRequest","updateKeySession","url","serverURL","laURL","getLicenseServerUrlFromMediaInfo","psshData","getPSSHData","getLicenseServerURLFromInitData","getServerURLFromMessage","MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE","MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE","reqHeaders","withCredentials","updateHeaders","headers","key","toLowerCase","httpRequestHeaders","getRequestHeadersFromMessage","reportError","xhr","errorMsg","response","getErrorResponse","MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE","MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE","statusText","readyState","onLoad","licenseResponse","LicenseResponse","responseURL","Utils","parseHttpHeaders","getAllResponseHeaders","applyFilters","then","licenseMessage","getLicenseMessage","onAbort","onError","reqPayload","getLicenseRequestFromMessage","reqMethod","getHTTPMethod","responseType","getResponseType","timeout","isNaN","httpTimeout","licenseRequest","LicenseRequest","doLicenseRequest","request","retriesCount","XMLHttpRequest","get","streaming","cmcd","enabled","cmcdMode","mode","Constants","CMCD_MODE_QUERY","cmcdParams","getQueryParameter","HTTPRequest","LICENSE","addAditionalQueryParameterToUrl","open","method","setRequestHeader","CMCD_MODE_HEADER","cmcdHeaders","getHeaderParameters","header","retryRequest","setTimeout","onload","warn","ontimeout","onerror","onabort","LICENSE_REQUEST_SENDING","payload","send","retry","initDataType","abInitData","ArrayBuffer","isView","String","fromCharCode","apply","Uint8Array","getSupportedKeySystems","getKeySystems","setKeySystems","keySystems","setLicenseRequestFilters","filters","setLicenseResponseFilters","param","Promise","resolve","reduce","prev","next","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"mappings":"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","file":"ProtectionController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport CommonEncryption from '../CommonEncryption';\nimport MediaCapability from '../vo/MediaCapability';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport ProtectionErrors from '../errors/ProtectionErrors';\nimport DashJSError from '../../vo/DashJSError';\nimport LicenseRequest from '../vo/LicenseRequest';\nimport LicenseResponse from '../vo/LicenseResponse';\nimport { HTTPRequest } from '../../vo/metrics/HTTPRequest';\nimport Utils from '../../../core/Utils';\nimport Constants from '../../constants/Constants';\n\nconst NEEDKEY_BEFORE_INITIALIZE_RETRIES = 5;\nconst NEEDKEY_BEFORE_INITIALIZE_TIMEOUT = 500;\n\nconst LICENSE_SERVER_REQUEST_RETRIES = 3;\nconst LICENSE_SERVER_REQUEST_RETRY_INTERVAL = 1000;\nconst LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT = 8000;\n\n/**\n * @module ProtectionController\n * @description Provides access to media protection information and functionality.  Each\n * ProtectionController manages a single {@link MediaPlayer.models.ProtectionModel}\n * which encapsulates a set of protection information (EME APIs, selected key system,\n * key sessions).  The APIs of ProtectionController mostly align with the latest EME\n * APIs.  Key system selection is mostly automated when combined with app-overrideable\n * functionality provided in {@link ProtectionKeyController}.\n * @todo ProtectionController does almost all of its tasks automatically after init() is\n * called.  Applications might want more control over this process and want to go through\n * each step manually (key system selection, session creation, session maintenance).\n * @param {Object} config\n */\n\nfunction ProtectionController(config) {\n\n    config = config || {};\n    const protectionKeyController = config.protectionKeyController;\n    let protectionModel = config.protectionModel;\n    const eventBus = config.eventBus;\n    const events = config.events;\n    const debug = config.debug;\n    const BASE64 = config.BASE64;\n    const constants = config.constants;\n    let needkeyRetries = [];\n    const cmcdModel = config.cmcdModel;\n    const settings = config.settings;\n\n    let instance,\n        logger,\n        pendingNeedKeyData,\n        mediaInfoArr,\n        protDataSet,\n        sessionType,\n        robustnessLevel,\n        keySystem,\n        licenseRequestFilters,\n        licenseResponseFilters;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        pendingNeedKeyData = [];\n        mediaInfoArr = [];\n        sessionType = 'temporary';\n        robustnessLevel = '';\n        licenseRequestFilters = [];\n        licenseResponseFilters = [];\n    }\n\n    function checkConfig() {\n        if (!eventBus || !eventBus.hasOwnProperty('on') || !protectionKeyController || !protectionKeyController.hasOwnProperty('getSupportedKeySystemsFromContentProtection')) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    /**\n     * Initialize this protection system with a given audio\n     * or video stream information.\n     *\n     * @param {StreamInfo} [mediaInfo] Media information\n     * @memberof module:ProtectionController\n     * @instance\n     * @todo This API will change when we have better support for allowing applications\n     * to select different adaptation sets for playback.  Right now it is clunky for\n     * applications to create {@link StreamInfo} with the right information,\n     * @ignore\n     */\n    function initializeForMedia(mediaInfo) {\n        // Not checking here if a session for similar KS/KID combination is already created\n        // because still don't know which keysystem will be selected.\n        // Once Keysystem is selected and before creating the session, we will do that check\n        // so we create the strictly necessary DRM sessions\n        if (!mediaInfo) {\n            throw new Error('mediaInfo can not be null or undefined');\n        }\n\n        checkConfig();\n\n        eventBus.on(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n        eventBus.on(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);\n        mediaInfoArr.push(mediaInfo);\n\n        // ContentProtection elements are specified at the AdaptationSet level, so the CP for audio\n        // and video will be the same.  Just use one valid MediaInfo object\n        const supportedKS = protectionKeyController.getSupportedKeySystemsFromContentProtection(mediaInfo.contentProtection);\n        if (supportedKS && supportedKS.length > 0) {\n            selectKeySystem(supportedKS, true);\n        }\n    }\n\n    /**\n     * Removes all entries from the mediaInfoArr array for a specific stream id\n     * @param {String} streamId\n     */\n    function clearMediaInfoArrayByStreamId(streamId) {\n        mediaInfoArr = mediaInfoArr.filter((mediaInfo) => {\n            return mediaInfo.streamInfo.id !== streamId;\n        });\n    }\n\n    /**\n     * Returns a set of supported key systems and CENC initialization data\n     * from the given array of ContentProtection elements.  Only\n     * key systems that are supported by this player will be returned.\n     * Key systems are returned in priority order (highest first).\n     *\n     * @param {Array.<Object>} cps - array of content protection elements parsed\n     * from the manifest\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     * @ignore\n     */\n    function getSupportedKeySystemsFromContentProtection(cps) {\n        checkConfig();\n        return protectionKeyController.getSupportedKeySystemsFromContentProtection(cps);\n    }\n\n    /**\n     * Create a new key session associated with the given initialization data from\n     * the MPD or from the PSSH box in the media\n     *\n     * @param {ArrayBuffer} initData the initialization data\n     * @param {Uint8Array} cdmData the custom data to provide to licenser\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionCreated\n     * @todo In older versions of the EME spec, there was a one-to-one relationship between\n     * initialization data and key sessions.  That is no longer true in the latest APIs.  This\n     * API will need to modified (and a new \"generateRequest(keySession, initData)\" API created)\n     * to come up to speed with the latest EME standard\n     * @ignore\n     */\n    function createKeySession(initData, cdmData) {\n        const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, initData);\n        const protData = getProtData(keySystem);\n        if (initDataForKS) {\n\n            // Check for duplicate initData\n            if (_isInitDataDuplicate(initDataForKS)) {\n                return;\n            }\n\n            try {\n                protectionModel.createKeySession(initDataForKS, protData, getSessionType(keySystem), cdmData);\n            } catch (error) {\n                eventBus.trigger(events.KEY_SESSION_CREATED, {\n                    data: null,\n                    error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + error.message)\n                });\n            }\n        } else if (initData) {\n            protectionModel.createKeySession(initData, protData, getSessionType(keySystem), cdmData);\n        } else {\n            eventBus.trigger(events.KEY_SESSION_CREATED, {\n                data: null,\n                error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Selected key system is ' + (keySystem ? keySystem.systemString : null) + '.  needkey/encrypted event contains no initData corresponding to that key system!')\n            });\n        }\n    }\n\n    /**\n     * Checks if the provided init data is equal to one of the existing init data values\n     * @param {any} initDataForKS\n     * @return {boolean}\n     * @private\n     */\n    function _isInitDataDuplicate(initDataForKS) {\n\n        if (!initDataForKS) {\n            return false;\n        }\n\n        try {\n            const currentInitData = protectionModel.getAllInitData();\n            for (let i = 0; i < currentInitData.length; i++) {\n                if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\n                    logger.debug('DRM: Ignoring initData because we have already seen it!');\n                    return true;\n                }\n            }\n\n            return false;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * Loads a key session with the given session ID from persistent storage.  This\n     * essentially creates a new key session\n     *\n     * @param {string} sessionID\n     * @param {string} initData\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionCreated\n     * @ignore\n     */\n    function loadKeySession(sessionID, initData) {\n        checkConfig();\n        protectionModel.loadKeySession(sessionID, initData, getSessionType(keySystem));\n    }\n\n    /**\n     * Removes the given key session from persistent storage and closes the session\n     * as if {@link ProtectionController#closeKeySession}\n     * was called\n     *\n     * @param {SessionToken} sessionToken the session\n     * token\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionRemoved\n     * @fires ProtectionController#KeySessionClosed\n     * @ignore\n     */\n    function removeKeySession(sessionToken) {\n        checkConfig();\n        protectionModel.removeKeySession(sessionToken);\n    }\n\n    /**\n     * Closes the key session and releases all associated decryption keys.  These\n     * keys will no longer be available for decrypting media\n     *\n     * @param {SessionToken} sessionToken the session\n     * token\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionClosed\n     * @ignore\n     */\n    function closeKeySession(sessionToken) {\n        checkConfig();\n        protectionModel.closeKeySession(sessionToken);\n    }\n\n    /**\n     * Sets a server certificate for use by the CDM when signing key messages\n     * intended for a particular license server.  This will fire\n     * an error event if a key system has not yet been selected.\n     *\n     * @param {ArrayBuffer} serverCertificate a CDM-specific license server\n     * certificate\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#ServerCertificateUpdated\n     */\n    function setServerCertificate(serverCertificate) {\n        checkConfig();\n        protectionModel.setServerCertificate(serverCertificate);\n    }\n\n    /**\n     * Associate this protection system with the given HTMLMediaElement.  This\n     * causes the system to register for needkey/encrypted events from the given\n     * element and provides a destination for setting of MediaKeys\n     *\n     * @param {HTMLMediaElement} element the media element to which the protection\n     * system should be associated\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setMediaElement(element) {\n        checkConfig();\n        if (element) {\n            protectionModel.setMediaElement(element);\n            eventBus.on(events.NEED_KEY, onNeedKey, this);\n        } else if (element === null) {\n            protectionModel.setMediaElement(element);\n            eventBus.off(events.NEED_KEY, onNeedKey, this);\n        }\n    }\n\n    /**\n     * Sets the session type to use when creating key sessions.  Either \"temporary\" or\n     * \"persistent-license\".  Default is \"temporary\".\n     *\n     * @param {string} value the session type\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setSessionType(value) {\n        sessionType = value;\n    }\n\n    /**\n     * Sets the robustness level for video and audio capabilities. Optional to remove Chrome warnings.\n     * Possible values are SW_SECURE_CRYPTO, SW_SECURE_DECODE, HW_SECURE_CRYPTO, HW_SECURE_CRYPTO, HW_SECURE_DECODE, HW_SECURE_ALL.\n     *\n     * @param {string} level the robustness level\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setRobustnessLevel(level) {\n        robustnessLevel = level;\n    }\n\n    /**\n     * Attach KeySystem-specific data to use for license acquisition with EME\n     *\n     * @param {Object} data an object containing property names corresponding to\n     * key system name strings (e.g. \"org.w3.clearkey\") and associated values\n     * being instances of {@link ProtectionData}\n     * @memberof module:ProtectionController\n     * @instance\n     * @ignore\n     */\n    function setProtectionData(data) {\n        protDataSet = data;\n        protectionKeyController.setProtectionData(data);\n    }\n\n    /**\n     * Stop method is called when current playback is stopped/resetted.\n     *\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function stop() {\n        if (protectionModel) {\n            protectionModel.stop();\n        }\n    }\n\n\n    /**\n     * Destroys all protection data associated with this protection set.  This includes\n     * deleting all key sessions. In the case of persistent key sessions, the sessions\n     * will simply be unloaded and not deleted.  Additionally, if this protection set is\n     * associated with a HTMLMediaElement, it will be detached from that element.\n     *\n     * @memberof module:ProtectionController\n     * @instance\n     * @ignore\n     */\n    function reset() {\n        checkConfig();\n\n        licenseRequestFilters = [];\n        licenseResponseFilters = [];\n\n        eventBus.off(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n        eventBus.off(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);\n\n        setMediaElement(null);\n\n        keySystem = undefined;\n\n        if (protectionModel) {\n            protectionModel.reset();\n            protectionModel = null;\n        }\n\n        needkeyRetries.forEach(retryTimeout => clearTimeout(retryTimeout));\n        needkeyRetries = [];\n\n        mediaInfoArr = [];\n    }\n\n    ///////////////\n    // Private\n    ///////////////\n\n    function getProtData(keySystem) {\n        let protData = null;\n        if (keySystem) {\n            const keySystemString = keySystem.systemString;\n\n            if (protDataSet) {\n                protData = (keySystemString in protDataSet) ? protDataSet[keySystemString] : null;\n            }\n        }\n        return protData;\n    }\n\n    function getKeySystemConfiguration(keySystem) {\n        const protData = getProtData(keySystem);\n        const audioCapabilities = [];\n        const videoCapabilities = [];\n        const audioRobustness = (protData && protData.audioRobustness && protData.audioRobustness.length > 0) ? protData.audioRobustness : robustnessLevel;\n        const videoRobustness = (protData && protData.videoRobustness && protData.videoRobustness.length > 0) ? protData.videoRobustness : robustnessLevel;\n        const ksSessionType = getSessionType(keySystem);\n        const distinctiveIdentifier = (protData && protData.distinctiveIdentifier) ? protData.distinctiveIdentifier : 'optional';\n        const persistentState = (protData && protData.persistentState) ? protData.persistentState : (ksSessionType === 'temporary') ? 'optional' : 'required';\n\n        mediaInfoArr.forEach((media) => {\n            if (media.type === constants.AUDIO) {\n                audioCapabilities.push(new MediaCapability(media.codec, audioRobustness));\n            } else if (media.type === constants.VIDEO) {\n                videoCapabilities.push(new MediaCapability(media.codec, videoRobustness));\n            }\n        });\n\n        return new KeySystemConfiguration(\n            audioCapabilities, videoCapabilities, distinctiveIdentifier,\n            persistentState,\n            [ksSessionType]);\n    }\n\n    function getSessionType(keySystem) {\n        const protData = getProtData(keySystem);\n        const ksSessionType = (protData && protData.sessionType) ? protData.sessionType : sessionType;\n        return ksSessionType;\n    }\n\n    function selectKeySystem(supportedKS, fromManifest) {\n\n        // Reorder key systems according to priority order provided in protectionData\n        supportedKS = supportedKS.sort((ksA, ksB) => {\n            let indexA = (protDataSet && protDataSet[ksA.ks.systemString] && protDataSet[ksA.ks.systemString].priority >= 0) ? protDataSet[ksA.ks.systemString].priority : supportedKS.length;\n            let indexB = (protDataSet && protDataSet[ksB.ks.systemString] && protDataSet[ksB.ks.systemString].priority >= 0) ? protDataSet[ksB.ks.systemString].priority : supportedKS.length;\n            return indexA - indexB;\n        });\n\n\n        // First time, so we need to select a key system\n        if (keySystem === undefined) {\n            _selectInitialKeySystem(supportedKS, fromManifest);\n        }\n\n        // We already selected a key system. we only need to trigger a new license exchange if the init data has changed\n        else if (keySystem) {\n            _selectWithExistingKeySystem(supportedKS, fromManifest);\n        }\n\n        // We are in the process of selecting a key system, so just save the data which might be coming from additional AdaptationSets.\n        else {\n            pendingNeedKeyData.push(supportedKS);\n        }\n    }\n\n    function _selectWithExistingKeySystem(supportedKS, fromManifest) {\n        const self = this;\n        const requestedKeySystems = [];\n\n        const ksIdx = supportedKS.findIndex((entry) => {\n            return entry.ks === keySystem;\n        });\n\n        if (ksIdx === -1 || !supportedKS[ksIdx].initData) {\n            return;\n        }\n\n        //  we only need to call this if the init data has changed\n        const initDataForKs = CommonEncryption.getPSSHForKeySystem(keySystem, supportedKS[ksIdx].initData);\n        if (_isInitDataDuplicate(initDataForKs)) {\n            return;\n        }\n\n        requestedKeySystems.push({\n            ks: supportedKS[ksIdx].ks,\n            configs: [getKeySystemConfiguration(keySystem)]\n        });\n\n        // Ensure that we would be granted key system access using the key\n        // system and codec information\n        const onKeySystemAccessComplete = function (event) {\n            eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n            if (event.error) {\n                if (!fromManifest) {\n                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, { error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error) });\n                }\n            } else {\n                logger.info('DRM: KeySystem Access Granted');\n                eventBus.trigger(events.KEY_SYSTEM_SELECTED, { data: event.data });\n                const protData = getProtData(keySystem);\n                if (protectionKeyController.isClearKey(keySystem)) {\n                    // For Clearkey: if parameters for generating init data was provided by the user, use them for generating\n                    // initData and overwrite possible initData indicated in encrypted event (EME)\n                    if (protData && protData.hasOwnProperty('clearkeys')) {\n                        const initData = { kids: Object.keys(protData.clearkeys) };\n                        supportedKS[ksIdx].initData = new TextEncoder().encode(JSON.stringify(initData));\n                    }\n                }\n                if (supportedKS[ksIdx].sessionId) {\n                    // Load MediaKeySession with sessionId\n                    loadKeySession(supportedKS[ksIdx].sessionId, supportedKS[ksIdx].initData);\n                } else if (supportedKS[ksIdx].initData) {\n                    // Create new MediaKeySession with initData\n                    createKeySession(supportedKS[ksIdx].initData, supportedKS[ksIdx].cdmData);\n                }\n            }\n        };\n\n        eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n        protectionModel.requestKeySystemAccess(requestedKeySystems);\n    }\n\n    function _selectInitialKeySystem(supportedKS, fromManifest) {\n        const self = this;\n        const requestedKeySystems = [];\n        let ksIdx;\n\n        // First time through, so we need to select a key system\n        keySystem = null;\n        pendingNeedKeyData.push(supportedKS);\n\n        // Add all key systems to our request list since we have yet to select a key system\n        for (let i = 0; i < supportedKS.length; i++) {\n            requestedKeySystems.push({\n                ks: supportedKS[i].ks,\n                configs: [getKeySystemConfiguration(supportedKS[i].ks)]\n            });\n        }\n\n        let keySystemAccess;\n        const onKeySystemAccessComplete = function (event) {\n            eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n            if (event.error) {\n                keySystem = undefined;\n                eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n                if (!fromManifest) {\n                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, {\n                        data: null,\n                        error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error)\n                    });\n                }\n            } else {\n                keySystemAccess = event.data;\n                logger.info('DRM: KeySystem Access Granted (' + keySystemAccess.keySystem.systemString + ')!  Selecting key system...');\n                protectionModel.selectKeySystem(keySystemAccess);\n            }\n        };\n        var onKeySystemSelected = function (event) {\n            eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n            eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n            if (!event.error) {\n                if (!protectionModel) {\n                    return;\n                }\n                keySystem = protectionModel.getKeySystem();\n                eventBus.trigger(events.KEY_SYSTEM_SELECTED, { data: keySystemAccess });\n                // Set server certificate from protData\n                const protData = getProtData(keySystem);\n                if (protData && protData.serverCertificate && protData.serverCertificate.length > 0) {\n                    protectionModel.setServerCertificate(BASE64.decodeArray(protData.serverCertificate).buffer);\n                }\n\n                // Create key session for the remaining AdaptationSets which have been added to pendingNeedKeyData\n                for (let i = 0; i < pendingNeedKeyData.length; i++) {\n                    for (ksIdx = 0; ksIdx < pendingNeedKeyData[i].length; ksIdx++) {\n                        if (keySystem === pendingNeedKeyData[i][ksIdx].ks) {\n                            if (protectionKeyController.isClearKey(keySystem)) {\n                                // For Clearkey: if parameters for generating init data was provided by the user, use them for generating\n                                // initData and overwrite possible initData indicated in encrypted event (EME)\n                                if (protData && protData.hasOwnProperty('clearkeys')) {\n                                    const initData = { kids: Object.keys(protData.clearkeys) };\n                                    pendingNeedKeyData[i][ksIdx].initData = new TextEncoder().encode(JSON.stringify(initData));\n                                }\n                            }\n                            if (pendingNeedKeyData[i][ksIdx].sessionId) {\n                                // Load MediaKeySession with sessionId\n                                loadKeySession(pendingNeedKeyData[i][ksIdx].sessionId, pendingNeedKeyData[i][ksIdx].initData);\n                            } else if (pendingNeedKeyData[i][ksIdx].initData !== null) {\n                                // Create new MediaKeySession with initData\n                                createKeySession(pendingNeedKeyData[i][ksIdx].initData, pendingNeedKeyData[i][ksIdx].cdmData);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } else {\n                keySystem = undefined;\n                if (!fromManifest) {\n                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, {\n                        data: null,\n                        error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + 'Error selecting key system! -- ' + event.error)\n                    });\n                }\n            }\n        };\n\n        eventBus.on(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n        eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n        protectionModel.requestKeySystemAccess(requestedKeySystems);\n    }\n\n    function sendLicenseRequestCompleteEvent(data, error) {\n        eventBus.trigger(events.LICENSE_REQUEST_COMPLETE, { data: data, error: error });\n    }\n\n    function onKeyStatusChanged(e) {\n        if (e.error) {\n            eventBus.trigger(events.KEY_STATUSES_CHANGED, { data: null, error: e.error });\n        } else {\n            logger.debug('DRM: key status = ' + e.status);\n        }\n    }\n\n    function onKeyMessage(e) {\n        logger.debug('DRM: onKeyMessage');\n\n        // Dispatch event to applications indicating we received a key message\n        const keyMessage = e.data;\n        eventBus.trigger(events.KEY_MESSAGE, { data: keyMessage });\n        const messageType = (keyMessage.messageType) ? keyMessage.messageType : 'license-request';\n        const message = keyMessage.message;\n        const sessionToken = keyMessage.sessionToken;\n        const protData = getProtData(keySystem);\n        const keySystemString = keySystem ? keySystem.systemString : null;\n        const licenseServerData = protectionKeyController.getLicenseServer(keySystem, protData, messageType);\n        const eventData = { sessionToken: sessionToken, messageType: messageType };\n\n        // Ensure message from CDM is not empty\n        if (!message || message.byteLength === 0) {\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE));\n            return;\n        }\n\n        // Message not destined for license server\n        if (!licenseServerData) {\n            logger.debug('DRM: License server request not required for this message (type = ' + e.data.messageType + ').  Session ID = ' + sessionToken.getSessionID());\n            sendLicenseRequestCompleteEvent(eventData);\n            return;\n        }\n\n        // Perform any special handling for ClearKey\n        if (protectionKeyController.isClearKey(keySystem)) {\n            const clearkeys = protectionKeyController.processClearKeyLicenseRequest(keySystem, protData, message);\n            if (clearkeys) {\n                logger.debug('DRM: ClearKey license request handled by application!');\n                sendLicenseRequestCompleteEvent(eventData);\n                protectionModel.updateKeySession(sessionToken, clearkeys);\n                return;\n            }\n        }\n\n        // All remaining key system scenarios require a request to a remote license server\n        // Determine license server URL\n        let url = null;\n        if (protData && protData.serverURL) {\n            const serverURL = protData.serverURL;\n            if (typeof serverURL === 'string' && serverURL !== '') {\n                url = serverURL;\n            } else if (typeof serverURL === 'object' && serverURL.hasOwnProperty(messageType)) {\n                url = serverURL[messageType];\n            }\n        } else if (protData && protData.laURL && protData.laURL !== '') {\n            // TODO: Deprecated!\n            url = protData.laURL;\n        } else {\n            // For clearkey use the url defined in the manifest\n            if (protectionKeyController.isClearKey(keySystem)) {\n                url = keySystem.getLicenseServerUrlFromMediaInfo(mediaInfoArr);\n            } else {\n                const psshData = CommonEncryption.getPSSHData(sessionToken.initData);\n                url = keySystem.getLicenseServerURLFromInitData(psshData);\n                if (!url) {\n                    url = e.data.laURL;\n                }\n            }\n        }\n        // Possibly update or override the URL based on the message\n        url = licenseServerData.getServerURLFromMessage(url, message, messageType);\n\n        // Ensure valid license server URL\n        if (!url) {\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE));\n            return;\n        }\n\n        // Set optional XMLHttpRequest headers from protection data and message\n        const reqHeaders = {};\n        let withCredentials = false;\n        const updateHeaders = function (headers) {\n            if (headers) {\n                for (const key in headers) {\n                    if ('authorization' === key.toLowerCase()) {\n                        withCredentials = true;\n                    }\n                    reqHeaders[key] = headers[key];\n                }\n            }\n        };\n        if (protData) {\n            updateHeaders(protData.httpRequestHeaders);\n        }\n        updateHeaders(keySystem.getRequestHeadersFromMessage(message));\n\n        // Overwrite withCredentials property from protData if present\n        if (protData && typeof protData.withCredentials == 'boolean') {\n            withCredentials = protData.withCredentials;\n        }\n\n        const reportError = function (xhr, eventData, keySystemString, messageType) {\n            const errorMsg = ((xhr.response) ? licenseServerData.getErrorResponse(xhr.response, keySystemString, messageType) : 'NONE');\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR complete. status is \"' +\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState + '.  Response is ' + errorMsg));\n        };\n\n        const onLoad = function (xhr) {\n            if (!protectionModel) {\n                return;\n            }\n\n            if (xhr.status === 200) {\n                let licenseResponse = new LicenseResponse(xhr.responseURL, Utils.parseHttpHeaders(xhr.getAllResponseHeaders ? xhr.getAllResponseHeaders() : null), xhr.response);\n                applyFilters(licenseResponseFilters, licenseResponse).then(() => {\n                    const licenseMessage = licenseServerData.getLicenseMessage(licenseResponse.data, keySystemString, messageType);\n                    if (licenseMessage !== null) {\n                        sendLicenseRequestCompleteEvent(eventData);\n                        protectionModel.updateKeySession(sessionToken, licenseMessage);\n                    } else {\n                        reportError(xhr, eventData, keySystemString, messageType);\n                    }\n                });\n            } else {\n                reportError(xhr, eventData, keySystemString, messageType);\n            }\n        };\n\n        const onAbort = function (xhr) {\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR aborted. status is \"' +\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState));\n        };\n\n        const onError = function (xhr) {\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR error. status is \"' +\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState));\n        };\n\n        const reqPayload = keySystem.getLicenseRequestFromMessage(message);\n        const reqMethod = licenseServerData.getHTTPMethod(messageType);\n        const responseType = licenseServerData.getResponseType(keySystemString, messageType);\n        const timeout = protData && !isNaN(protData.httpTimeout) ? protData.httpTimeout : LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT;\n        const sessionId = sessionToken.getSessionID() || null;\n\n        let licenseRequest = new LicenseRequest(url, reqMethod, responseType, reqHeaders, withCredentials, messageType, sessionId, reqPayload);\n        applyFilters(licenseRequestFilters, licenseRequest).then(() => {\n            doLicenseRequest(licenseRequest, LICENSE_SERVER_REQUEST_RETRIES, timeout, onLoad, onAbort, onError);\n        });\n    }\n\n    // Implement license requests with a retry mechanism to avoid temporary network issues to affect playback experience\n    function doLicenseRequest(request, retriesCount, timeout, onLoad, onAbort, onError) {\n        const xhr = new XMLHttpRequest();\n\n        if (settings.get().streaming.cmcd && settings.get().streaming.cmcd.enabled) {\n            const cmcdMode = settings.get().streaming.cmcd.mode;\n            if (cmcdMode === Constants.CMCD_MODE_QUERY) {\n                const cmcdParams = cmcdModel.getQueryParameter({\n                    url: request.url,\n                    type: HTTPRequest.LICENSE\n                });\n\n                if (cmcdParams) {\n                    request.url = Utils.addAditionalQueryParameterToUrl(request.url, [cmcdParams]);\n                }\n            }\n        }\n\n        xhr.open(request.method, request.url, true);\n        xhr.responseType = request.responseType;\n        xhr.withCredentials = request.withCredentials;\n        if (timeout > 0) {\n            xhr.timeout = timeout;\n        }\n        for (const key in request.headers) {\n            xhr.setRequestHeader(key, request.headers[key]);\n        }\n\n        if (settings.get().streaming.cmcd && settings.get().streaming.cmcd.enabled) {\n            const cmcdMode = settings.get().streaming.cmcd.mode;\n            if (cmcdMode === Constants.CMCD_MODE_HEADER) {\n                const cmcdHeaders = cmcdModel.getHeaderParameters({\n                    url: request.url,\n                    type: HTTPRequest.LICENSE\n                });\n\n                if (cmcdHeaders) {\n                    for (const header in cmcdHeaders) {\n                        let value = cmcdHeaders[header];\n                        if (value) {\n                            xhr.setRequestHeader(header, value);\n                        }\n                    }\n                }\n            }\n        }\n\n        const retryRequest = function () {\n            // fail silently and retry\n            retriesCount--;\n            setTimeout(function () {\n                doLicenseRequest(request, retriesCount, timeout, onLoad, onAbort, onError);\n            }, LICENSE_SERVER_REQUEST_RETRY_INTERVAL);\n        };\n\n        xhr.onload = function () {\n            if (this.status === 200 || retriesCount <= 0) {\n                onLoad(this);\n            } else {\n                logger.warn('License request failed (' + this.status + '). Retrying it... Pending retries: ' + retriesCount);\n                retryRequest();\n            }\n        };\n\n        xhr.ontimeout = xhr.onerror = function () {\n            if (retriesCount <= 0) {\n                onError(this);\n            } else {\n                logger.warn('License request network request failed . Retrying it... Pending retries: ' + retriesCount);\n                retryRequest();\n            }\n        };\n\n        xhr.onabort = function () {\n            onAbort(this);\n        };\n\n        // deprecated, to be removed\n        eventBus.trigger(events.LICENSE_REQUEST_SENDING, {\n            url: request.url,\n            headers: request.headers,\n            payload: request.data,\n            sessionId: request.sessionId\n        });\n\n        xhr.send(request.data);\n    }\n\n    function onNeedKey(event, retry) {\n        logger.debug('DRM: onNeedKey');\n        // Ignore non-cenc initData\n        if (event.key.initDataType !== 'cenc') {\n            logger.warn('DRM:  Only \\'cenc\\' initData is supported!  Ignoring initData of type: ' + event.key.initDataType);\n            return;\n        }\n\n        if (mediaInfoArr.length === 0) {\n            logger.warn('DRM: onNeedKey called before initializeForMedia, wait until initialized');\n            retry = typeof retry === 'undefined' ? 1 : retry + 1;\n            if (retry < NEEDKEY_BEFORE_INITIALIZE_RETRIES) {\n                needkeyRetries.push(setTimeout(() => {\n                    onNeedKey(event, retry);\n                }, NEEDKEY_BEFORE_INITIALIZE_TIMEOUT));\n                return;\n            }\n\n        }\n\n        // Some browsers return initData as Uint8Array (IE), some as ArrayBuffer (Chrome).\n        // Convert to ArrayBuffer\n        let abInitData = event.key.initData;\n        if (ArrayBuffer.isView(abInitData)) {\n            abInitData = abInitData.buffer;\n        }\n\n        // If key system has already been selected and initData already seen, then do nothing\n        if (keySystem) {\n            const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, abInitData);\n            if (initDataForKS) {\n\n                // Check for duplicate initData\n                if (_isInitDataDuplicate(initDataForKS)) {\n                    return;\n                }\n            }\n        }\n\n        logger.debug('DRM: initData:', String.fromCharCode.apply(null, new Uint8Array(abInitData)));\n\n        const supportedKS = protectionKeyController.getSupportedKeySystems(abInitData, protDataSet);\n        if (supportedKS.length === 0) {\n            logger.debug('DRM: Received needkey event with initData, but we don\\'t support any of the key systems!');\n            return;\n        }\n\n        selectKeySystem(supportedKS, false);\n    }\n\n    function getKeySystems() {\n        return protectionKeyController ? protectionKeyController.getKeySystems() : [];\n    }\n\n    function setKeySystems(keySystems) {\n        if (protectionKeyController) {\n            protectionKeyController.setKeySystems(keySystems);\n        }\n    }\n\n    function setLicenseRequestFilters (filters) {\n        licenseRequestFilters = filters;\n    }\n\n    function setLicenseResponseFilters (filters) {\n        licenseResponseFilters = filters;\n    }\n\n    function applyFilters (filters, param) {\n        if (!filters) return Promise.resolve();\n        return filters.reduce((prev, next) => {\n            return prev.then(() => {\n                return next(param);\n            });\n        }, Promise.resolve());\n    }\n\n    instance = {\n        initializeForMedia: initializeForMedia,\n        clearMediaInfoArrayByStreamId: clearMediaInfoArrayByStreamId,\n        createKeySession: createKeySession,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        setMediaElement: setMediaElement,\n        setSessionType: setSessionType,\n        setRobustnessLevel: setRobustnessLevel,\n        setProtectionData: setProtectionData,\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\n        getKeySystems: getKeySystems,\n        setKeySystems: setKeySystems,\n        setLicenseRequestFilters: setLicenseRequestFilters,\n        setLicenseResponseFilters: setLicenseResponseFilters,\n        stop: stop,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nProtectionController.__dashjs_factory_name = 'ProtectionController';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionController); /* jshint ignore:line */\n"]}